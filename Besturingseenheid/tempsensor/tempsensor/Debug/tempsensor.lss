
tempsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800100  00800100  00000890  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000029c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b3  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000302  00000000  00000000  00003333  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e5  00000000  00000000  00003635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d3  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000665  00000000  00000000  00004037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 38       	cpi	r26, 0x8E	; 142
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 02 	call	0x496	; 0x496 <main>
  9e:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	db 01       	movw	r26, r22
  b2:	8a 01       	movw	r16, r20
  b4:	80 91 02 01 	lds	r24, 0x0102
  b8:	90 91 03 01 	lds	r25, 0x0103
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e9 e0       	ldi	r30, 0x09	; 9
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	25 31       	cpi	r18, 0x15	; 21
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	84 31       	cpi	r24, 0x14	; 20
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	ee 5f       	subi	r30, 0xFE	; 254
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	d1 83       	std	Z+1, r29	; 0x01
 10c:	c0 83       	st	Z, r28
 10e:	b3 83       	std	Z+3, r27	; 0x03
 110:	a2 83       	std	Z+2, r26	; 0x02
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c8 e0       	ldi	r28, 0x08	; 8
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	14 31       	cpi	r17, 0x14	; 20
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c4 31       	cpi	r28, 0x14	; 20
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e2 e0       	ldi	r30, 0x02	; 2
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	2e e8       	ldi	r18, 0x8E	; 142
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
 26a:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 26e:	83 e3       	ldi	r24, 0x33	; 51
 270:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 274:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter
	 UCSR0B = _BV(TXEN0);
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 93 c2 00 	sts	0x00C2, r24
}
 284:	08 95       	ret

00000286 <transmit>:
void transmit(uint8_t data)
{
	 // wait for an empty transmit buffer
	 // UDRE is set when the transmit buffer is empty
	 
	 loop_until_bit_is_set(UCSR0A, UDRE0);   
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	95 ff       	sbrs	r25, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <transmit+0x4>
	 UDR0 = data;
 290:	80 93 c6 00 	sts	0x00C6, r24
}
 294:	08 95       	ret

00000296 <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 6; //calculate average from 6 measured values with intervals of 10 seconds.
 296:	80 91 00 01 	lds	r24, 0x0100
 29a:	90 91 01 01 	lds	r25, 0x0101
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__udivmodhi4>
 2a6:	86 2f       	mov	r24, r22
 2a8:	60 93 00 01 	sts	0x0100, r22
 2ac:	70 93 01 01 	sts	0x0101, r23
	transmit(averageTemperature); //Send average temperature to screen.
 2b0:	0e 94 43 01 	call	0x286	; 0x286 <transmit>
	averageTemperature = 0; //reset average temperature.
 2b4:	10 92 01 01 	sts	0x0101, r1
 2b8:	10 92 00 01 	sts	0x0100, r1
}
 2bc:	08 95       	ret

000002be <transmit_char>:
	 UDR0 = data;
}

// Sends a single char (byte) over UART
void transmit_char(char c) {
	loop_until_bit_is_set(UCSR0A, UDRE0);
 2be:	e0 ec       	ldi	r30, 0xC0	; 192
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	90 81       	ld	r25, Z
 2c4:	95 ff       	sbrs	r25, 5
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <transmit_char+0x4>
	UDR0 = c;
 2c8:	80 93 c6 00 	sts	0x00C6, r24
}
 2cc:	08 95       	ret

000002ce <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(char *c) {
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
	while (*c) {
 2d4:	88 81       	ld	r24, Y
 2d6:	88 23       	and	r24, r24
 2d8:	31 f0       	breq	.+12     	; 0x2e6 <transmit_string+0x18>
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
}

// Sends a string of chars (bytes) over UART
void transmit_string(char *c) {
 2da:	21 96       	adiw	r28, 0x01	; 1
	while (*c) {
		transmit_char(*c);
 2dc:	0e 94 5f 01 	call	0x2be	; 0x2be <transmit_char>
	UDR0 = c;
}

// Sends a string of chars (bytes) over UART
void transmit_string(char *c) {
	while (*c) {
 2e0:	89 91       	ld	r24, Y+
 2e2:	88 23       	and	r24, r24
 2e4:	d9 f7       	brne	.-10     	; 0x2dc <transmit_string+0xe>
		transmit_char(*c);
		c++;
	}
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <send_light>:

// Sends the light value via UART
void send_light(uint8_t light) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <send_light+0x6>
 2f2:	0f 92       	push	r0
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	val1 = (char)(light / 256);
	val2 = (char)(light % 256);
}

char buffer[3];
buffer[0] = 1;
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	99 83       	std	Y+1, r25	; 0x01
	else if (light > 32767) { // if light value > max value able to send
	val1 = 127;
	val2 = 255;
}
else {
	val1 = (char)(light / 256);
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	33 23       	and	r19, r19
 302:	14 f4       	brge	.+4      	; 0x308 <send_light+0x1c>
 304:	21 50       	subi	r18, 0x01	; 1
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	3a 83       	std	Y+2, r19	; 0x02
}

char buffer[3];
buffer[0] = 1;
buffer[1] = val1;
buffer[2] = val2;
 30a:	8b 83       	std	Y+3, r24	; 0x03
transmit_string(buffer);
 30c:	ce 01       	movw	r24, r28
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	0e 94 67 01 	call	0x2ce	; 0x2ce <transmit_string>
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <send_temperature>:

// Sends the temperature via UART
void send_temperature(uint8_t temp) {
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <send_temperature+0x6>
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
	else {
		val = (char)temp;
	}
	
	char buffer[2];
	buffer[0] = 2;
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	99 83       	std	Y+1, r25	; 0x01
transmit_string(buffer);
}

// Sends the temperature via UART
void send_temperature(uint8_t temp) {
	temp += 128;
 32e:	80 58       	subi	r24, 0x80	; 128
		val = (char)temp;
	}
	
	char buffer[2];
	buffer[0] = 2;
	buffer[1] = val;
 330:	8a 83       	std	Y+2, r24	; 0x02
	transmit_string(buffer);
 332:	ce 01       	movw	r24, r28
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	0e 94 67 01 	call	0x2ce	; 0x2ce <transmit_string>
}
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <send_shutter_status_light>:

// Sends whether the shutter of the light unit is open or closed
// 1 = open, 0 = closed
void send_shutter_status_light(char is_open) {
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	00 d0       	rcall	.+0      	; 0x34a <send_shutter_status_light+0x6>
 34a:	0f 92       	push	r0
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
	if (is_open > 1) {
		is_open = 1;
	}
	char buffer[3];
	buffer[0] = 3;
 350:	93 e0       	ldi	r25, 0x03	; 3
 352:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = 0;
 354:	1a 82       	std	Y+2, r1	; 0x02
	buffer[2] = is_open;
 356:	81 11       	cpse	r24, r1
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	8b 83       	std	Y+3, r24	; 0x03
	transmit_string(buffer);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	0e 94 67 01 	call	0x2ce	; 0x2ce <transmit_string>
}
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <send_shutter_status_temp>:

// Sends whether the shutter of the temperature unit is open or closed
// 1 = open, 0 = closed
void send_shutter_status_temp(char is_open) {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <send_shutter_status_temp+0x6>
 376:	0f 92       	push	r0
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
	if (is_open > 1) {
		is_open = 1;
	}
	char buffer[3];
	buffer[0] = 3;
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = 1;
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	9a 83       	std	Y+2, r25	; 0x02
	buffer[2] = is_open;
 384:	81 11       	cpse	r24, r1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8b 83       	std	Y+3, r24	; 0x03
	transmit_string(buffer);
 38a:	ce 01       	movw	r24, r28
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	0e 94 67 01 	call	0x2ce	; 0x2ce <transmit_string>
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <setup>:

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setup()
{
	ADMUX |= (1 << REFS0); //set reference voltage 
 39e:	ec e7       	ldi	r30, 0x7C	; 124
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 3a8:	ea e7       	ldi	r30, 0x7A	; 122
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	87 60       	ori	r24, 0x07	; 7
 3b0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 3b2:	80 81       	ld	r24, Z
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	80 83       	st	Z, r24
}
 3b8:	08 95       	ret

000003ba <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 3ba:	ec e7       	ldi	r30, 0x7C	; 124
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 3c0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 3c2:	98 7f       	andi	r25, 0xF8	; 248
 3c4:	98 2b       	or	r25, r24
 3c6:	90 83       	st	Z, r25
	
	// start the conversion
	ADCSRA |= (1<<ADSC);
 3c8:	ea e7       	ldi	r30, 0x7A	; 122
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0′ again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 3d2:	80 81       	ld	r24, Z
 3d4:	86 fd       	sbrc	r24, 6
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <adc_read+0x18>
	
	return (ADC); 
 3d8:	80 91 78 00 	lds	r24, 0x0078
 3dc:	90 91 79 00 	lds	r25, 0x0079
}
 3e0:	08 95       	ret

000003e2 <calculateTemperature>:

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC.
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <adc_read>
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
 3f8:	68 2f       	mov	r22, r24
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__floatunsisf>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 e8       	ldi	r20, 0x80	; 128
 40a:	5a e3       	ldi	r21, 0x3A	; 58
 40c:	0e 94 85 03 	call	0x70a	; 0x70a <__mulsf3>
	voltage *= 5;
 410:	46 2f       	mov	r20, r22
 412:	57 2f       	mov	r21, r23
 414:	68 2f       	mov	r22, r24
 416:	79 2f       	mov	r23, r25
 418:	cb 01       	movw	r24, r22
 41a:	ba 01       	movw	r22, r20
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 ea       	ldi	r20, 0xA0	; 160
 422:	50 e4       	ldi	r21, 0x40	; 64
 424:	0e 94 85 03 	call	0x70a	; 0x70a <__mulsf3>
 428:	c6 2f       	mov	r28, r22
 42a:	d7 2f       	mov	r29, r23
 42c:	18 2f       	mov	r17, r24
 42e:	09 2f       	mov	r16, r25
	voltage -= 0.5;
	float temperature = (float)100*voltage;
	
	//transmit(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 430:	60 91 00 01 	lds	r22, 0x0100
 434:	70 91 01 01 	lds	r23, 0x0101
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__floatunsisf>
 440:	6b 01       	movw	r12, r22
 442:	7c 01       	movw	r14, r24
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
	voltage *= 5;
	voltage -= 0.5;
 444:	8c 2f       	mov	r24, r28
 446:	9d 2f       	mov	r25, r29
 448:	a1 2f       	mov	r26, r17
 44a:	b0 2f       	mov	r27, r16
 44c:	bc 01       	movw	r22, r24
 44e:	cd 01       	movw	r24, r26
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	5f e3       	ldi	r21, 0x3F	; 63
 458:	0e 94 66 02 	call	0x4cc	; 0x4cc <__subsf3>
	float temperature = (float)100*voltage;
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	48 ec       	ldi	r20, 0xC8	; 200
 462:	52 e4       	ldi	r21, 0x42	; 66
 464:	0e 94 85 03 	call	0x70a	; 0x70a <__mulsf3>
 468:	9b 01       	movw	r18, r22
 46a:	ac 01       	movw	r20, r24
	
	//transmit(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3>
 474:	0e 94 cb 02 	call	0x596	; 0x596 <__fixunssfsi>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	90 93 01 01 	sts	0x0101, r25
 480:	80 93 00 01 	sts	0x0100, r24
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	08 95       	ret

00000496 <main>:
	averageTemperature = 0; //reset average temperature.
}

int main()                     
{
	setup(); 
 496:	0e 94 cf 01 	call	0x39e	; 0x39e <setup>
	uart_init();
 49a:	0e 94 35 01 	call	0x26a	; 0x26a <uart_init>
	SCH_Init_T1();
 49e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(calculateTemperature, 0, 1000); //Read temperature every 10 seconds
 4a2:	81 ef       	ldi	r24, 0xF1	; 241
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	48 ee       	ldi	r20, 0xE8	; 232
 4ac:	53 e0       	ldi	r21, 0x03	; 3
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageTemperature, 1000, 6000); //Calculate average every minute. Delay it by 10 seconds to prevent incomplete average measurements.
 4b2:	8b e4       	ldi	r24, 0x4B	; 75
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	68 ee       	ldi	r22, 0xE8	; 232
 4b8:	73 e0       	ldi	r23, 0x03	; 3
 4ba:	40 e7       	ldi	r20, 0x70	; 112
 4bc:	57 e1       	ldi	r21, 0x17	; 23
 4be:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 4c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
	while(1)
	{
		SCH_Dispatch_Tasks();
 4c6:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <main+0x30>

000004cc <__subsf3>:
 4cc:	50 58       	subi	r21, 0x80	; 128

000004ce <__addsf3>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	aa 27       	eor	r26, r26
 4d2:	0e d0       	rcall	.+28     	; 0x4f0 <__addsf3x>
 4d4:	e0 c0       	rjmp	.+448    	; 0x696 <__fp_round>
 4d6:	d1 d0       	rcall	.+418    	; 0x67a <__fp_pscA>
 4d8:	30 f0       	brcs	.+12     	; 0x4e6 <__addsf3+0x18>
 4da:	d6 d0       	rcall	.+428    	; 0x688 <__fp_pscB>
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__addsf3+0x18>
 4de:	31 f4       	brne	.+12     	; 0x4ec <__addsf3+0x1e>
 4e0:	9f 3f       	cpi	r25, 0xFF	; 255
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__addsf3+0x1a>
 4e4:	1e f4       	brtc	.+6      	; 0x4ec <__addsf3+0x1e>
 4e6:	c6 c0       	rjmp	.+396    	; 0x674 <__fp_nan>
 4e8:	0e f4       	brtc	.+2      	; 0x4ec <__addsf3+0x1e>
 4ea:	e0 95       	com	r30
 4ec:	e7 fb       	bst	r30, 7
 4ee:	bc c0       	rjmp	.+376    	; 0x668 <__fp_inf>

000004f0 <__addsf3x>:
 4f0:	e9 2f       	mov	r30, r25
 4f2:	e2 d0       	rcall	.+452    	; 0x6b8 <__fp_split3>
 4f4:	80 f3       	brcs	.-32     	; 0x4d6 <__addsf3+0x8>
 4f6:	ba 17       	cp	r27, r26
 4f8:	62 07       	cpc	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	95 07       	cpc	r25, r21
 500:	18 f0       	brcs	.+6      	; 0x508 <__addsf3x+0x18>
 502:	71 f4       	brne	.+28     	; 0x520 <__addsf3x+0x30>
 504:	9e f5       	brtc	.+102    	; 0x56c <__addsf3x+0x7c>
 506:	fa c0       	rjmp	.+500    	; 0x6fc <__fp_zero>
 508:	0e f4       	brtc	.+2      	; 0x50c <__addsf3x+0x1c>
 50a:	e0 95       	com	r30
 50c:	0b 2e       	mov	r0, r27
 50e:	ba 2f       	mov	r27, r26
 510:	a0 2d       	mov	r26, r0
 512:	0b 01       	movw	r0, r22
 514:	b9 01       	movw	r22, r18
 516:	90 01       	movw	r18, r0
 518:	0c 01       	movw	r0, r24
 51a:	ca 01       	movw	r24, r20
 51c:	a0 01       	movw	r20, r0
 51e:	11 24       	eor	r1, r1
 520:	ff 27       	eor	r31, r31
 522:	59 1b       	sub	r21, r25
 524:	99 f0       	breq	.+38     	; 0x54c <__addsf3x+0x5c>
 526:	59 3f       	cpi	r21, 0xF9	; 249
 528:	50 f4       	brcc	.+20     	; 0x53e <__addsf3x+0x4e>
 52a:	50 3e       	cpi	r21, 0xE0	; 224
 52c:	68 f1       	brcs	.+90     	; 0x588 <__addsf3x+0x98>
 52e:	1a 16       	cp	r1, r26
 530:	f0 40       	sbci	r31, 0x00	; 0
 532:	a2 2f       	mov	r26, r18
 534:	23 2f       	mov	r18, r19
 536:	34 2f       	mov	r19, r20
 538:	44 27       	eor	r20, r20
 53a:	58 5f       	subi	r21, 0xF8	; 248
 53c:	f3 cf       	rjmp	.-26     	; 0x524 <__addsf3x+0x34>
 53e:	46 95       	lsr	r20
 540:	37 95       	ror	r19
 542:	27 95       	ror	r18
 544:	a7 95       	ror	r26
 546:	f0 40       	sbci	r31, 0x00	; 0
 548:	53 95       	inc	r21
 54a:	c9 f7       	brne	.-14     	; 0x53e <__addsf3x+0x4e>
 54c:	7e f4       	brtc	.+30     	; 0x56c <__addsf3x+0x7c>
 54e:	1f 16       	cp	r1, r31
 550:	ba 0b       	sbc	r27, r26
 552:	62 0b       	sbc	r22, r18
 554:	73 0b       	sbc	r23, r19
 556:	84 0b       	sbc	r24, r20
 558:	ba f0       	brmi	.+46     	; 0x588 <__addsf3x+0x98>
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	a1 f0       	breq	.+40     	; 0x586 <__addsf3x+0x96>
 55e:	ff 0f       	add	r31, r31
 560:	bb 1f       	adc	r27, r27
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	c2 f7       	brpl	.-16     	; 0x55a <__addsf3x+0x6a>
 56a:	0e c0       	rjmp	.+28     	; 0x588 <__addsf3x+0x98>
 56c:	ba 0f       	add	r27, r26
 56e:	62 1f       	adc	r22, r18
 570:	73 1f       	adc	r23, r19
 572:	84 1f       	adc	r24, r20
 574:	48 f4       	brcc	.+18     	; 0x588 <__addsf3x+0x98>
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f7 95       	ror	r31
 580:	9e 3f       	cpi	r25, 0xFE	; 254
 582:	08 f0       	brcs	.+2      	; 0x586 <__addsf3x+0x96>
 584:	b3 cf       	rjmp	.-154    	; 0x4ec <__addsf3+0x1e>
 586:	93 95       	inc	r25
 588:	88 0f       	add	r24, r24
 58a:	08 f0       	brcs	.+2      	; 0x58e <__addsf3x+0x9e>
 58c:	99 27       	eor	r25, r25
 58e:	ee 0f       	add	r30, r30
 590:	97 95       	ror	r25
 592:	87 95       	ror	r24
 594:	08 95       	ret

00000596 <__fixunssfsi>:
 596:	98 d0       	rcall	.+304    	; 0x6c8 <__fp_splitA>
 598:	88 f0       	brcs	.+34     	; 0x5bc <__fixunssfsi+0x26>
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	90 f0       	brcs	.+36     	; 0x5c2 <__fixunssfsi+0x2c>
 59e:	b9 2f       	mov	r27, r25
 5a0:	99 27       	eor	r25, r25
 5a2:	b7 51       	subi	r27, 0x17	; 23
 5a4:	a0 f0       	brcs	.+40     	; 0x5ce <__fixunssfsi+0x38>
 5a6:	d1 f0       	breq	.+52     	; 0x5dc <__fixunssfsi+0x46>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a f0       	brmi	.+6      	; 0x5b8 <__fixunssfsi+0x22>
 5b2:	ba 95       	dec	r27
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__fixunssfsi+0x12>
 5b6:	12 c0       	rjmp	.+36     	; 0x5dc <__fixunssfsi+0x46>
 5b8:	b1 30       	cpi	r27, 0x01	; 1
 5ba:	81 f0       	breq	.+32     	; 0x5dc <__fixunssfsi+0x46>
 5bc:	9f d0       	rcall	.+318    	; 0x6fc <__fp_zero>
 5be:	b1 e0       	ldi	r27, 0x01	; 1
 5c0:	08 95       	ret
 5c2:	9c c0       	rjmp	.+312    	; 0x6fc <__fp_zero>
 5c4:	67 2f       	mov	r22, r23
 5c6:	78 2f       	mov	r23, r24
 5c8:	88 27       	eor	r24, r24
 5ca:	b8 5f       	subi	r27, 0xF8	; 248
 5cc:	39 f0       	breq	.+14     	; 0x5dc <__fixunssfsi+0x46>
 5ce:	b9 3f       	cpi	r27, 0xF9	; 249
 5d0:	cc f3       	brlt	.-14     	; 0x5c4 <__fixunssfsi+0x2e>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b3 95       	inc	r27
 5da:	d9 f7       	brne	.-10     	; 0x5d2 <__fixunssfsi+0x3c>
 5dc:	3e f4       	brtc	.+14     	; 0x5ec <__fixunssfsi+0x56>
 5de:	90 95       	com	r25
 5e0:	80 95       	com	r24
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	08 95       	ret

000005ee <__floatunsisf>:
 5ee:	e8 94       	clt
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <__floatsisf+0x12>

000005f2 <__floatsisf>:
 5f2:	97 fb       	bst	r25, 7
 5f4:	3e f4       	brtc	.+14     	; 0x604 <__floatsisf+0x12>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	99 23       	and	r25, r25
 606:	a9 f0       	breq	.+42     	; 0x632 <__floatsisf+0x40>
 608:	f9 2f       	mov	r31, r25
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	bb 27       	eor	r27, r27
 60e:	93 95       	inc	r25
 610:	f6 95       	lsr	r31
 612:	87 95       	ror	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b7 95       	ror	r27
 61a:	f1 11       	cpse	r31, r1
 61c:	f8 cf       	rjmp	.-16     	; 0x60e <__floatsisf+0x1c>
 61e:	fa f4       	brpl	.+62     	; 0x65e <__floatsisf+0x6c>
 620:	bb 0f       	add	r27, r27
 622:	11 f4       	brne	.+4      	; 0x628 <__floatsisf+0x36>
 624:	60 ff       	sbrs	r22, 0
 626:	1b c0       	rjmp	.+54     	; 0x65e <__floatsisf+0x6c>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	16 c0       	rjmp	.+44     	; 0x65e <__floatsisf+0x6c>
 632:	88 23       	and	r24, r24
 634:	11 f0       	breq	.+4      	; 0x63a <__floatsisf+0x48>
 636:	96 e9       	ldi	r25, 0x96	; 150
 638:	11 c0       	rjmp	.+34     	; 0x65c <__floatsisf+0x6a>
 63a:	77 23       	and	r23, r23
 63c:	21 f0       	breq	.+8      	; 0x646 <__floatsisf+0x54>
 63e:	9e e8       	ldi	r25, 0x8E	; 142
 640:	87 2f       	mov	r24, r23
 642:	76 2f       	mov	r23, r22
 644:	05 c0       	rjmp	.+10     	; 0x650 <__floatsisf+0x5e>
 646:	66 23       	and	r22, r22
 648:	71 f0       	breq	.+28     	; 0x666 <__floatsisf+0x74>
 64a:	96 e8       	ldi	r25, 0x86	; 134
 64c:	86 2f       	mov	r24, r22
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	2a f0       	brmi	.+10     	; 0x65e <__floatsisf+0x6c>
 654:	9a 95       	dec	r25
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	da f7       	brpl	.-10     	; 0x654 <__floatsisf+0x62>
 65e:	88 0f       	add	r24, r24
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret

00000668 <__fp_inf>:
 668:	97 f9       	bld	r25, 7
 66a:	9f 67       	ori	r25, 0x7F	; 127
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	08 95       	ret

00000674 <__fp_nan>:
 674:	9f ef       	ldi	r25, 0xFF	; 255
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	08 95       	ret

0000067a <__fp_pscA>:
 67a:	00 24       	eor	r0, r0
 67c:	0a 94       	dec	r0
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	09 06       	cpc	r0, r25
 686:	08 95       	ret

00000688 <__fp_pscB>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	05 06       	cpc	r0, r21
 694:	08 95       	ret

00000696 <__fp_round>:
 696:	09 2e       	mov	r0, r25
 698:	03 94       	inc	r0
 69a:	00 0c       	add	r0, r0
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__fp_round+0xc>
 69e:	88 23       	and	r24, r24
 6a0:	52 f0       	brmi	.+20     	; 0x6b6 <__fp_round+0x20>
 6a2:	bb 0f       	add	r27, r27
 6a4:	40 f4       	brcc	.+16     	; 0x6b6 <__fp_round+0x20>
 6a6:	bf 2b       	or	r27, r31
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0x18>
 6aa:	60 ff       	sbrs	r22, 0
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__fp_round+0x20>
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__fp_split3>:
 6b8:	57 fd       	sbrc	r21, 7
 6ba:	90 58       	subi	r25, 0x80	; 128
 6bc:	44 0f       	add	r20, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	59 f0       	breq	.+22     	; 0x6d8 <__fp_splitA+0x10>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <__fp_splitA+0x1a>
 6c6:	47 95       	ror	r20

000006c8 <__fp_splitA>:
 6c8:	88 0f       	add	r24, r24
 6ca:	97 fb       	bst	r25, 7
 6cc:	99 1f       	adc	r25, r25
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_splitA+0x20>
 6d0:	9f 3f       	cpi	r25, 0xFF	; 255
 6d2:	79 f0       	breq	.+30     	; 0x6f2 <__fp_splitA+0x2a>
 6d4:	87 95       	ror	r24
 6d6:	08 95       	ret
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	f2 cf       	rjmp	.-28     	; 0x6c6 <__fp_split3+0xe>
 6e2:	46 95       	lsr	r20
 6e4:	f1 df       	rcall	.-30     	; 0x6c8 <__fp_splitA>
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <__fp_splitA+0x30>
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	18 06       	cpc	r1, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	f1 cf       	rjmp	.-30     	; 0x6d4 <__fp_splitA+0xc>
 6f2:	86 95       	lsr	r24
 6f4:	71 05       	cpc	r23, r1
 6f6:	61 05       	cpc	r22, r1
 6f8:	08 94       	sec
 6fa:	08 95       	ret

000006fc <__fp_zero>:
 6fc:	e8 94       	clt

000006fe <__fp_szero>:
 6fe:	bb 27       	eor	r27, r27
 700:	66 27       	eor	r22, r22
 702:	77 27       	eor	r23, r23
 704:	cb 01       	movw	r24, r22
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <__mulsf3>:
 70a:	0b d0       	rcall	.+22     	; 0x722 <__mulsf3x>
 70c:	c4 cf       	rjmp	.-120    	; 0x696 <__fp_round>
 70e:	b5 df       	rcall	.-150    	; 0x67a <__fp_pscA>
 710:	28 f0       	brcs	.+10     	; 0x71c <__mulsf3+0x12>
 712:	ba df       	rcall	.-140    	; 0x688 <__fp_pscB>
 714:	18 f0       	brcs	.+6      	; 0x71c <__mulsf3+0x12>
 716:	95 23       	and	r25, r21
 718:	09 f0       	breq	.+2      	; 0x71c <__mulsf3+0x12>
 71a:	a6 cf       	rjmp	.-180    	; 0x668 <__fp_inf>
 71c:	ab cf       	rjmp	.-170    	; 0x674 <__fp_nan>
 71e:	11 24       	eor	r1, r1
 720:	ee cf       	rjmp	.-36     	; 0x6fe <__fp_szero>

00000722 <__mulsf3x>:
 722:	ca df       	rcall	.-108    	; 0x6b8 <__fp_split3>
 724:	a0 f3       	brcs	.-24     	; 0x70e <__mulsf3+0x4>

00000726 <__mulsf3_pse>:
 726:	95 9f       	mul	r25, r21
 728:	d1 f3       	breq	.-12     	; 0x71e <__mulsf3+0x14>
 72a:	95 0f       	add	r25, r21
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	55 1f       	adc	r21, r21
 730:	62 9f       	mul	r22, r18
 732:	f0 01       	movw	r30, r0
 734:	72 9f       	mul	r23, r18
 736:	bb 27       	eor	r27, r27
 738:	f0 0d       	add	r31, r0
 73a:	b1 1d       	adc	r27, r1
 73c:	63 9f       	mul	r22, r19
 73e:	aa 27       	eor	r26, r26
 740:	f0 0d       	add	r31, r0
 742:	b1 1d       	adc	r27, r1
 744:	aa 1f       	adc	r26, r26
 746:	64 9f       	mul	r22, r20
 748:	66 27       	eor	r22, r22
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	66 1f       	adc	r22, r22
 750:	82 9f       	mul	r24, r18
 752:	22 27       	eor	r18, r18
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	62 1f       	adc	r22, r18
 75a:	73 9f       	mul	r23, r19
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	62 1f       	adc	r22, r18
 762:	83 9f       	mul	r24, r19
 764:	a0 0d       	add	r26, r0
 766:	61 1d       	adc	r22, r1
 768:	22 1f       	adc	r18, r18
 76a:	74 9f       	mul	r23, r20
 76c:	33 27       	eor	r19, r19
 76e:	a0 0d       	add	r26, r0
 770:	61 1d       	adc	r22, r1
 772:	23 1f       	adc	r18, r19
 774:	84 9f       	mul	r24, r20
 776:	60 0d       	add	r22, r0
 778:	21 1d       	adc	r18, r1
 77a:	82 2f       	mov	r24, r18
 77c:	76 2f       	mov	r23, r22
 77e:	6a 2f       	mov	r22, r26
 780:	11 24       	eor	r1, r1
 782:	9f 57       	subi	r25, 0x7F	; 127
 784:	50 40       	sbci	r21, 0x00	; 0
 786:	8a f0       	brmi	.+34     	; 0x7aa <__mulsf3_pse+0x84>
 788:	e1 f0       	breq	.+56     	; 0x7c2 <__mulsf3_pse+0x9c>
 78a:	88 23       	and	r24, r24
 78c:	4a f0       	brmi	.+18     	; 0x7a0 <__mulsf3_pse+0x7a>
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	bb 1f       	adc	r27, r27
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	91 50       	subi	r25, 0x01	; 1
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	a9 f7       	brne	.-22     	; 0x78a <__mulsf3_pse+0x64>
 7a0:	9e 3f       	cpi	r25, 0xFE	; 254
 7a2:	51 05       	cpc	r21, r1
 7a4:	70 f0       	brcs	.+28     	; 0x7c2 <__mulsf3_pse+0x9c>
 7a6:	60 cf       	rjmp	.-320    	; 0x668 <__fp_inf>
 7a8:	aa cf       	rjmp	.-172    	; 0x6fe <__fp_szero>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	ec f3       	brlt	.-6      	; 0x7a8 <__mulsf3_pse+0x82>
 7ae:	98 3e       	cpi	r25, 0xE8	; 232
 7b0:	dc f3       	brlt	.-10     	; 0x7a8 <__mulsf3_pse+0x82>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	e7 95       	ror	r30
 7be:	9f 5f       	subi	r25, 0xFF	; 255
 7c0:	c1 f7       	brne	.-16     	; 0x7b2 <__mulsf3_pse+0x8c>
 7c2:	fe 2b       	or	r31, r30
 7c4:	88 0f       	add	r24, r24
 7c6:	91 1d       	adc	r25, r1
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__udivmodhi4>:
 7d0:	aa 1b       	sub	r26, r26
 7d2:	bb 1b       	sub	r27, r27
 7d4:	51 e1       	ldi	r21, 0x11	; 17
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <__udivmodhi4_ep>

000007d8 <__udivmodhi4_loop>:
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	a6 17       	cp	r26, r22
 7de:	b7 07       	cpc	r27, r23
 7e0:	10 f0       	brcs	.+4      	; 0x7e6 <__udivmodhi4_ep>
 7e2:	a6 1b       	sub	r26, r22
 7e4:	b7 0b       	sbc	r27, r23

000007e6 <__udivmodhi4_ep>:
 7e6:	88 1f       	adc	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	5a 95       	dec	r21
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__udivmodhi4_loop>
 7ee:	80 95       	com	r24
 7f0:	90 95       	com	r25
 7f2:	bc 01       	movw	r22, r24
 7f4:	cd 01       	movw	r24, r26
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
