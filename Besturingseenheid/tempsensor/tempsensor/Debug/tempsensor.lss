
tempsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800100  00800100  00000bde  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000070c  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003348  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b02  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ab  00000000  00000000  00003f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e1  00000000  00000000  000042d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000048b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000375  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ef  00000000  00000000  00004e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3b       	cpi	r26, 0xB6	; 182
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 03 	call	0x708	; 0x708 <main>
  9e:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	db 01       	movw	r26, r22
  b2:	8a 01       	movw	r16, r20
  b4:	80 91 02 01 	lds	r24, 0x0102
  b8:	90 91 03 01 	lds	r25, 0x0103
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e9 e0       	ldi	r30, 0x09	; 9
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	25 31       	cpi	r18, 0x15	; 21
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	84 31       	cpi	r24, 0x14	; 20
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	ee 5f       	subi	r30, 0xFE	; 254
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	d1 83       	std	Z+1, r29	; 0x01
 10c:	c0 83       	st	Z, r28
 10e:	b3 83       	std	Z+3, r27	; 0x03
 110:	a2 83       	std	Z+2, r26	; 0x02
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	ee 5f       	subi	r30, 0xFE	; 254
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c8 e0       	ldi	r28, 0x08	; 8
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	14 31       	cpi	r17, 0x14	; 20
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c4 31       	cpi	r28, 0x14	; 20
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e2 e0       	ldi	r30, 0x02	; 2
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	2e e8       	ldi	r18, 0x8E	; 142
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
 26a:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 26e:	83 e3       	ldi	r24, 0x33	; 51
 270:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 274:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter
	 UCSR0B = _BV(TXEN0);
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 93 c2 00 	sts	0x00C2, r24
}
 284:	08 95       	ret

00000286 <transmit>:
void transmit(uint8_t data)
{
	 // wait for an empty transmit buffer
	 // UDRE is set when the transmit buffer is empty
	 
	 loop_until_bit_is_set(UCSR0A, UDRE0);   
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	95 ff       	sbrs	r25, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <transmit+0x4>
	 UDR0 = data;
 290:	80 93 c6 00 	sts	0x00C6, r24
}
 294:	08 95       	ret

00000296 <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	while (*c != -1) {
 29c:	88 81       	ld	r24, Y
 29e:	99 81       	ldd	r25, Y+1	; 0x01
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	92 07       	cpc	r25, r18
 2a6:	49 f0       	breq	.+18     	; 0x2ba <transmit_string+0x24>
	 loop_until_bit_is_set(UCSR0A, UDRE0);   
	 UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 2a8:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 2aa:	0e 94 43 01 	call	0x286	; 0x286 <transmit>
	 UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
 2ae:	89 91       	ld	r24, Y+
 2b0:	99 91       	ld	r25, Y+
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	8f 3f       	cpi	r24, 0xFF	; 255
 2b6:	92 07       	cpc	r25, r18
 2b8:	c1 f7       	brne	.-16     	; 0x2aa <transmit_string+0x14>
		transmit(*c);
		c++;
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <receive>:

// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 2c0:	e0 ec       	ldi	r30, 0xC0	; 192
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	90 81       	ld	r25, Z
 2c6:	99 23       	and	r25, r25
 2c8:	ec f7       	brge	.-6      	; 0x2c4 <receive+0x4>
	return response;
}
 2ca:	08 95       	ret

000002cc <receive_non_blocking>:

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & 1<RXC0) { // is the received data bit set in the UCSR0A register?
 2cc:	80 91 c0 00 	lds	r24, 0x00C0
 2d0:	80 ff       	sbrs	r24, 0
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <receive_non_blocking+0x10>
		return (int) UDR0;
 2d4:	80 91 c6 00 	lds	r24, 0x00C6
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
	}
	return -1;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
}
 2e0:	08 95       	ret

000002e2 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	28 97       	sbiw	r28, 0x08	; 8
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	8c 01       	movw	r16, r24
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
 2fc:	99 23       	and	r25, r25
 2fe:	cc f0       	brlt	.+50     	; 0x332 <send_light+0x50>
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
 300:	bc 01       	movw	r22, r24
 302:	99 23       	and	r25, r25
 304:	14 f4       	brge	.+4      	; 0x30a <send_light+0x28>
 306:	61 50       	subi	r22, 0x01	; 1
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	67 2f       	mov	r22, r23
 30c:	77 0f       	add	r23, r23
 30e:	77 0b       	sbc	r23, r23
 310:	88 27       	eor	r24, r24
 312:	77 fd       	sbrc	r23, 7
 314:	80 95       	com	r24
 316:	98 2f       	mov	r25, r24
 318:	0e 94 3a 04 	call	0x874	; 0x874 <__floatsisf>
 31c:	0e 94 75 04 	call	0x8ea	; 0x8ea <floor>
 320:	0e 94 0c 04 	call	0x818	; 0x818 <__fixunssfsi>
 324:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 326:	c8 01       	movw	r24, r16
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	0e 94 90 05 	call	0xb20	; 0xb20 <__divmodhi4>
 330:	02 c0       	rjmp	.+4      	; 0x336 <send_light+0x54>
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
		val2 = 0;
 332:	80 e0       	ldi	r24, 0x00	; 0
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
 334:	40 e0       	ldi	r20, 0x00	; 0
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	3a 83       	std	Y+2, r19	; 0x02
 33c:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 33e:	4b 83       	std	Y+3, r20	; 0x03
 340:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 342:	8d 83       	std	Y+5, r24	; 0x05
 344:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	98 87       	std	Y+8, r25	; 0x08
 34c:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 356:	28 96       	adiw	r28, 0x08	; 8
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <send_temperature>:

// Sends the temperature via UART
void send_temperature(int temp) {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <send_temperature+0x6>
 372:	00 d0       	rcall	.+0      	; 0x374 <send_temperature+0x8>
 374:	00 d0       	rcall	.+0      	; 0x376 <send_temperature+0xa>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 37a:	80 58       	subi	r24, 0x80	; 128
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;
	
	if (temp < 0) {
 37e:	2a f0       	brmi	.+10     	; 0x38a <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 380:	8f 3f       	cpi	r24, 0xFF	; 255
 382:	91 05       	cpc	r25, r1
 384:	29 f0       	breq	.+10     	; 0x390 <send_temperature+0x24>
 386:	24 f0       	brlt	.+8      	; 0x390 <send_temperature+0x24>
 388:	02 c0       	rjmp	.+4      	; 0x38e <send_temperature+0x22>
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;
	
	if (temp < 0) {
		val = 0;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	01 c0       	rjmp	.+2      	; 0x390 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 38e:	8f ef       	ldi	r24, 0xFF	; 255
	else {
		val = (uint8_t)temp;
	}
	
	int buffer[3];
	buffer[0] = 2;
 390:	22 e0       	ldi	r18, 0x02	; 2
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	3a 83       	std	Y+2, r19	; 0x02
 396:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 398:	8b 83       	std	Y+3, r24	; 0x03
 39a:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	9e 83       	std	Y+6, r25	; 0x06
 3a2:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 3ac:	26 96       	adiw	r28, 0x06	; 6
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 6; //calculate average from 6 measured values with intervals of 10 seconds.
 3be:	80 91 00 01 	lds	r24, 0x0100
 3c2:	90 91 01 01 	lds	r25, 0x0101
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__udivmodhi4>
 3ce:	86 2f       	mov	r24, r22
 3d0:	97 2f       	mov	r25, r23
 3d2:	60 93 00 01 	sts	0x0100, r22
 3d6:	70 93 01 01 	sts	0x0101, r23
	//transmit(averageTemperature); //Send average temperature to screen.
	send_temperature(averageTemperature);
 3da:	0e 94 b6 01 	call	0x36c	; 0x36c <send_temperature>
	averageTemperature = 0; //reset average temperature.
 3de:	10 92 01 01 	sts	0x0101, r1
 3e2:	10 92 00 01 	sts	0x0100, r1
}
 3e6:	08 95       	ret

000003e8 <send_blinds_status>:
	transmit_string(buffer);
}

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t is_open) {
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	28 97       	sbiw	r28, 0x08	; 8
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
	if (is_open > 2) {
		is_open = 2;
	}
	int buffer[4];
	buffer[0] = 3;
 3fc:	23 e0       	ldi	r18, 0x03	; 3
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	3a 83       	std	Y+2, r19	; 0x02
 402:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = is_open;
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	08 f0       	brcs	.+2      	; 0x40e <send_blinds_status+0x26>
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	98 87       	std	Y+8, r25	; 0x08
 418:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 422:	28 96       	adiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <reset_buffer>:

// Reset the buffer of incoming messages
int receive_buffer[20];
void reset_buffer() {
 434:	ee e8       	ldi	r30, 0x8E	; 142
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	2e ed       	ldi	r18, 0xDE	; 222
 43a:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	81 93       	st	Z+, r24
 442:	91 93       	st	Z+, r25
}

// Reset the buffer of incoming messages
int receive_buffer[20];
void reset_buffer() {
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
 444:	e2 17       	cp	r30, r18
 446:	f3 07       	cpc	r31, r19
 448:	d9 f7       	brne	.-10     	; 0x440 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 44a:	08 95       	ret

0000044c <add_to_buffer>:

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 44c:	20 91 8e 01 	lds	r18, 0x018E
 450:	30 91 8f 01 	lds	r19, 0x018F
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	2f 3f       	cpi	r18, 0xFF	; 255
 458:	39 07       	cpc	r19, r25
 45a:	91 f0       	breq	.+36     	; 0x480 <add_to_buffer+0x34>
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
 45c:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 45e:	4e e8       	ldi	r20, 0x8E	; 142
 460:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 462:	9f 5f       	subi	r25, 0xFF	; 255
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 464:	29 2f       	mov	r18, r25
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e4 0f       	add	r30, r20
 470:	f5 1f       	adc	r31, r21
 472:	60 81       	ld	r22, Z
 474:	71 81       	ldd	r23, Z+1	; 0x01
 476:	ef ef       	ldi	r30, 0xFF	; 255
 478:	6f 3f       	cpi	r22, 0xFF	; 255
 47a:	7e 07       	cpc	r23, r30
 47c:	91 f7       	brne	.-28     	; 0x462 <add_to_buffer+0x16>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <add_to_buffer+0x38>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 484:	f9 01       	movw	r30, r18
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	e2 57       	subi	r30, 0x72	; 114
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	80 83       	st	Z, r24
 490:	11 82       	std	Z+1, r1	; 0x01
}
 492:	08 95       	ret

00000494 <receiveMessages>:

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	int b = receive_non_blocking();
 494:	0e 94 66 01 	call	0x2cc	; 0x2cc <receive_non_blocking>
	while (b != -1) {
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	8f 3f       	cpi	r24, 0xFF	; 255
 49c:	92 07       	cpc	r25, r18
 49e:	41 f0       	breq	.+16     	; 0x4b0 <receiveMessages+0x1c>
		add_to_buffer((uint8_t) b);
 4a0:	0e 94 26 02 	call	0x44c	; 0x44c <add_to_buffer>
		b = receive_non_blocking();
 4a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <receive_non_blocking>
//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	int b = receive_non_blocking();
	while (b != -1) {
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	8f 3f       	cpi	r24, 0xFF	; 255
 4ac:	92 07       	cpc	r25, r18
 4ae:	c1 f7       	brne	.-16     	; 0x4a0 <receiveMessages+0xc>
		add_to_buffer((uint8_t) b);
		b = receive_non_blocking();
	}
	
	int c = receive_buffer[0];
	int p1 = receive_buffer[1];
 4b0:	40 91 90 01 	lds	r20, 0x0190
 4b4:	50 91 91 01 	lds	r21, 0x0191
	int p2 = receive_buffer[2];
 4b8:	60 91 92 01 	lds	r22, 0x0192
 4bc:	70 91 93 01 	lds	r23, 0x0193
	int p3 = receive_buffer[3];
 4c0:	20 91 94 01 	lds	r18, 0x0194
 4c4:	30 91 95 01 	lds	r19, 0x0195
	
	switch (c) {
 4c8:	80 91 8e 01 	lds	r24, 0x018E
 4cc:	90 91 8f 01 	lds	r25, 0x018F
 4d0:	85 31       	cpi	r24, 0x15	; 21
 4d2:	91 05       	cpc	r25, r1
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <receiveMessages+0x44>
 4d6:	60 c0       	rjmp	.+192    	; 0x598 <receiveMessages+0x104>
 4d8:	86 31       	cpi	r24, 0x16	; 22
 4da:	91 05       	cpc	r25, r1
 4dc:	a4 f4       	brge	.+40     	; 0x506 <receiveMessages+0x72>
 4de:	8a 30       	cpi	r24, 0x0A	; 10
 4e0:	91 05       	cpc	r25, r1
 4e2:	31 f1       	breq	.+76     	; 0x530 <receiveMessages+0x9c>
 4e4:	8b 30       	cpi	r24, 0x0B	; 11
 4e6:	91 05       	cpc	r25, r1
 4e8:	34 f4       	brge	.+12     	; 0x4f6 <receiveMessages+0x62>
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	8f 3f       	cpi	r24, 0xFF	; 255
 4ee:	92 07       	cpc	r25, r18
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <receiveMessages+0x60>
 4f2:	8b c0       	rjmp	.+278    	; 0x60a <receiveMessages+0x176>
 4f4:	08 95       	ret
 4f6:	8b 30       	cpi	r24, 0x0B	; 11
 4f8:	91 05       	cpc	r25, r1
 4fa:	41 f1       	breq	.+80     	; 0x54c <receiveMessages+0xb8>
 4fc:	84 31       	cpi	r24, 0x14	; 20
 4fe:	91 05       	cpc	r25, r1
 500:	09 f0       	breq	.+2      	; 0x504 <receiveMessages+0x70>
 502:	83 c0       	rjmp	.+262    	; 0x60a <receiveMessages+0x176>
 504:	31 c0       	rjmp	.+98     	; 0x568 <receiveMessages+0xd4>
 506:	8f 31       	cpi	r24, 0x1F	; 31
 508:	91 05       	cpc	r25, r1
 50a:	09 f4       	brne	.+2      	; 0x50e <receiveMessages+0x7a>
 50c:	61 c0       	rjmp	.+194    	; 0x5d0 <receiveMessages+0x13c>
 50e:	80 32       	cpi	r24, 0x20	; 32
 510:	91 05       	cpc	r25, r1
 512:	2c f4       	brge	.+10     	; 0x51e <receiveMessages+0x8a>
 514:	8e 31       	cpi	r24, 0x1E	; 30
 516:	91 05       	cpc	r25, r1
 518:	09 f0       	breq	.+2      	; 0x51c <receiveMessages+0x88>
 51a:	77 c0       	rjmp	.+238    	; 0x60a <receiveMessages+0x176>
 51c:	52 c0       	rjmp	.+164    	; 0x5c2 <receiveMessages+0x12e>
 51e:	80 32       	cpi	r24, 0x20	; 32
 520:	91 05       	cpc	r25, r1
 522:	09 f4       	brne	.+2      	; 0x526 <receiveMessages+0x92>
 524:	5c c0       	rjmp	.+184    	; 0x5de <receiveMessages+0x14a>
 526:	81 32       	cpi	r24, 0x21	; 33
 528:	91 05       	cpc	r25, r1
 52a:	09 f0       	breq	.+2      	; 0x52e <receiveMessages+0x9a>
 52c:	6e c0       	rjmp	.+220    	; 0x60a <receiveMessages+0x176>
 52e:	62 c0       	rjmp	.+196    	; 0x5f4 <receiveMessages+0x160>
		case -1:
		break;
		case 10:
		if (p1 != -1) {
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	4f 3f       	cpi	r20, 0xFF	; 255
 534:	58 07       	cpc	r21, r24
 536:	09 f4       	brne	.+2      	; 0x53a <receiveMessages+0xa6>
 538:	6a c0       	rjmp	.+212    	; 0x60e <receiveMessages+0x17a>
			if (p1 == 1) {
 53a:	41 30       	cpi	r20, 0x01	; 1
 53c:	51 05       	cpc	r21, r1
 53e:	19 f4       	brne	.+6      	; 0x546 <receiveMessages+0xb2>
				// OPEN THE BLINDS
				// Do stuff here
				
				// End do stuff
				reset_buffer();
 540:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 544:	08 95       	ret
			}
			else {
				reset_buffer();
 546:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 54a:	08 95       	ret
			}
		}
		break;
		case 11:
		if (p1 != -1) {
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	4f 3f       	cpi	r20, 0xFF	; 255
 550:	52 07       	cpc	r21, r18
 552:	09 f4       	brne	.+2      	; 0x556 <receiveMessages+0xc2>
 554:	5c c0       	rjmp	.+184    	; 0x60e <receiveMessages+0x17a>
			if (p1 == 1) {
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	51 05       	cpc	r21, r1
 55a:	19 f4       	brne	.+6      	; 0x562 <receiveMessages+0xce>
				// CLOSE THE BLINDS
				// Do stuff here
				
				// End do stuff
				reset_buffer();
 55c:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 560:	08 95       	ret
			}
			else {
				reset_buffer();
 562:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 566:	08 95       	ret
			}
		}
		break;
		case 20:
		if (p1 != -1 && p2 != -1 && p3 != -1) {
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	4f 3f       	cpi	r20, 0xFF	; 255
 56c:	58 07       	cpc	r21, r24
 56e:	09 f4       	brne	.+2      	; 0x572 <receiveMessages+0xde>
 570:	4e c0       	rjmp	.+156    	; 0x60e <receiveMessages+0x17a>
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	6f 3f       	cpi	r22, 0xFF	; 255
 576:	78 07       	cpc	r23, r24
 578:	09 f4       	brne	.+2      	; 0x57c <receiveMessages+0xe8>
 57a:	49 c0       	rjmp	.+146    	; 0x60e <receiveMessages+0x17a>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	2f 3f       	cpi	r18, 0xFF	; 255
 580:	38 07       	cpc	r19, r24
 582:	09 f4       	brne	.+2      	; 0x586 <receiveMessages+0xf2>
 584:	44 c0       	rjmp	.+136    	; 0x60e <receiveMessages+0x17a>
			if (p1 == 1) {
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	51 05       	cpc	r21, r1
 58a:	19 f4       	brne	.+6      	; 0x592 <receiveMessages+0xfe>
				int blinds_open_distance = p2 * 256 + p3; // The new blinds open distance
				// Do stuff here
				
				// End do stuff
				reset_buffer();
 58c:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 590:	08 95       	ret
			}
			else {
				reset_buffer();
 592:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 596:	08 95       	ret
			}
		}
		break;
		case 21:
		if (p1 != -1 && p2 != -1 && p3 != -1) {
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	4f 3f       	cpi	r20, 0xFF	; 255
 59c:	58 07       	cpc	r21, r24
 59e:	b9 f1       	breq	.+110    	; 0x60e <receiveMessages+0x17a>
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	6f 3f       	cpi	r22, 0xFF	; 255
 5a4:	78 07       	cpc	r23, r24
 5a6:	99 f1       	breq	.+102    	; 0x60e <receiveMessages+0x17a>
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	2f 3f       	cpi	r18, 0xFF	; 255
 5ac:	38 07       	cpc	r19, r24
 5ae:	79 f1       	breq	.+94     	; 0x60e <receiveMessages+0x17a>
			if (p1 == 1) {
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	51 05       	cpc	r21, r1
 5b4:	19 f4       	brne	.+6      	; 0x5bc <receiveMessages+0x128>
				int blinds_closed_distance = p2 * 256 + p3; // The new blinds closed distance
				// Do stuff here
				
				// End do stuff
				reset_buffer();
 5b6:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5ba:	08 95       	ret
			}
			else {
				reset_buffer();
 5bc:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5c0:	08 95       	ret
			}
		}
		break;
		case 30:
		if (p1 != -1) {
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	4f 3f       	cpi	r20, 0xFF	; 255
 5c6:	52 07       	cpc	r21, r18
 5c8:	11 f1       	breq	.+68     	; 0x60e <receiveMessages+0x17a>
			int temperature_to_close = p1 + 128; // The new temperature threshold to close the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 5ca:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5ce:	08 95       	ret
		}
		break;
		case 31:
		if (p1 != -1) {
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	4f 3f       	cpi	r20, 0xFF	; 255
 5d4:	58 07       	cpc	r21, r24
 5d6:	d9 f0       	breq	.+54     	; 0x60e <receiveMessages+0x17a>
			int temperature_to_open = p1 + 128; // The new temperature threshold to open the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 5d8:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5dc:	08 95       	ret
		}
		break;
		case 32:
		if (p1 != -1 && p2 != -1) {
 5de:	2f ef       	ldi	r18, 0xFF	; 255
 5e0:	4f 3f       	cpi	r20, 0xFF	; 255
 5e2:	52 07       	cpc	r21, r18
 5e4:	a1 f0       	breq	.+40     	; 0x60e <receiveMessages+0x17a>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	6f 3f       	cpi	r22, 0xFF	; 255
 5ea:	78 07       	cpc	r23, r24
 5ec:	81 f0       	breq	.+32     	; 0x60e <receiveMessages+0x17a>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 5ee:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5f2:	08 95       	ret
		}
		break;
		case 33:
		if (p1 != -1 && p2 != -1) {
 5f4:	2f ef       	ldi	r18, 0xFF	; 255
 5f6:	4f 3f       	cpi	r20, 0xFF	; 255
 5f8:	52 07       	cpc	r21, r18
 5fa:	49 f0       	breq	.+18     	; 0x60e <receiveMessages+0x17a>
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	6f 3f       	cpi	r22, 0xFF	; 255
 600:	78 07       	cpc	r23, r24
 602:	29 f0       	breq	.+10     	; 0x60e <receiveMessages+0x17a>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 604:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 608:	08 95       	ret
		}
		break;
		default:
			reset_buffer();
 60a:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 60e:	08 95       	ret

00000610 <setup>:
}

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setup()
{
	ADMUX |= (1 << REFS0); //set reference voltage 
 610:	ec e7       	ldi	r30, 0x7C	; 124
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	80 64       	ori	r24, 0x40	; 64
 618:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 61a:	ea e7       	ldi	r30, 0x7A	; 122
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	87 60       	ori	r24, 0x07	; 7
 622:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 624:	80 81       	ld	r24, Z
 626:	80 68       	ori	r24, 0x80	; 128
 628:	80 83       	st	Z, r24
}
 62a:	08 95       	ret

0000062c <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 62c:	ec e7       	ldi	r30, 0x7C	; 124
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 632:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 634:	98 7f       	andi	r25, 0xF8	; 248
 636:	98 2b       	or	r25, r24
 638:	90 83       	st	Z, r25
	
	// start the conversion
	ADCSRA |= (1<<ADSC);
 63a:	ea e7       	ldi	r30, 0x7A	; 122
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	80 64       	ori	r24, 0x40	; 64
 642:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0′ again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 644:	80 81       	ld	r24, Z
 646:	86 fd       	sbrc	r24, 6
 648:	fd cf       	rjmp	.-6      	; 0x644 <adc_read+0x18>
	
	return (ADC); 
 64a:	80 91 78 00 	lds	r24, 0x0078
 64e:	90 91 79 00 	lds	r25, 0x0079
}
 652:	08 95       	ret

00000654 <calculateTemperature>:

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
 654:	cf 92       	push	r12
 656:	df 92       	push	r13
 658:	ef 92       	push	r14
 65a:	ff 92       	push	r15
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC.
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 16 03 	call	0x62c	; 0x62c <adc_read>
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
 66a:	68 2f       	mov	r22, r24
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 38 04 	call	0x870	; 0x870 <__floatunsisf>
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	40 e8       	ldi	r20, 0x80	; 128
 67c:	5a e3       	ldi	r21, 0x3A	; 58
 67e:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
	voltage *= 5;
 682:	46 2f       	mov	r20, r22
 684:	57 2f       	mov	r21, r23
 686:	68 2f       	mov	r22, r24
 688:	79 2f       	mov	r23, r25
 68a:	cb 01       	movw	r24, r22
 68c:	ba 01       	movw	r22, r20
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	40 ea       	ldi	r20, 0xA0	; 160
 694:	50 e4       	ldi	r21, 0x40	; 64
 696:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
 69a:	c6 2f       	mov	r28, r22
 69c:	d7 2f       	mov	r29, r23
 69e:	18 2f       	mov	r17, r24
 6a0:	09 2f       	mov	r16, r25
	voltage -= 0.5;
	float temperature = (float)100*voltage;
	
	//transmit(temperature); //enable to transmit to screen
	//send_temperature(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 6a2:	60 91 00 01 	lds	r22, 0x0100
 6a6:	70 91 01 01 	lds	r23, 0x0101
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 38 04 	call	0x870	; 0x870 <__floatunsisf>
 6b2:	6b 01       	movw	r12, r22
 6b4:	7c 01       	movw	r14, r24
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
	voltage *= 5;
	voltage -= 0.5;
 6b6:	8c 2f       	mov	r24, r28
 6b8:	9d 2f       	mov	r25, r29
 6ba:	a1 2f       	mov	r26, r17
 6bc:	b0 2f       	mov	r27, r16
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	5f e3       	ldi	r21, 0x3F	; 63
 6ca:	0e 94 a7 03 	call	0x74e	; 0x74e <__subsf3>
	float temperature = (float)100*voltage;
 6ce:	20 e0       	ldi	r18, 0x00	; 0
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	48 ec       	ldi	r20, 0xC8	; 200
 6d4:	52 e4       	ldi	r21, 0x42	; 66
 6d6:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3>
 6da:	9b 01       	movw	r18, r22
 6dc:	ac 01       	movw	r20, r24
	
	//transmit(temperature); //enable to transmit to screen
	//send_temperature(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 a8 03 	call	0x750	; 0x750 <__addsf3>
 6e6:	0e 94 0c 04 	call	0x818	; 0x818 <__fixunssfsi>
 6ea:	dc 01       	movw	r26, r24
 6ec:	cb 01       	movw	r24, r22
 6ee:	90 93 01 01 	sts	0x0101, r25
 6f2:	80 93 00 01 	sts	0x0100, r24
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	df 90       	pop	r13
 704:	cf 90       	pop	r12
 706:	08 95       	ret

00000708 <main>:
	averageTemperature = 0; //reset average temperature.
}

int main()                     
{
	setup(); 
 708:	0e 94 08 03 	call	0x610	; 0x610 <setup>
	uart_init();
 70c:	0e 94 35 01 	call	0x26a	; 0x26a <uart_init>
	SCH_Init_T1();
 710:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(receiveMessages, 0, 100); //Receive stuff every second
 714:	8a e4       	ldi	r24, 0x4A	; 74
 716:	92 e0       	ldi	r25, 0x02	; 2
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	44 e6       	ldi	r20, 0x64	; 100
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateTemperature, 0, 1000); //Read temperature every 10 seconds
 724:	8a e2       	ldi	r24, 0x2A	; 42
 726:	93 e0       	ldi	r25, 0x03	; 3
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	48 ee       	ldi	r20, 0xE8	; 232
 72e:	53 e0       	ldi	r21, 0x03	; 3
 730:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageTemperature, 1000, 6000); //Calculate average every minute. Delay it by 10 seconds to prevent incomplete average measurements.
 734:	8f ed       	ldi	r24, 0xDF	; 223
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	68 ee       	ldi	r22, 0xE8	; 232
 73a:	73 e0       	ldi	r23, 0x03	; 3
 73c:	40 e7       	ldi	r20, 0x70	; 112
 73e:	57 e1       	ldi	r21, 0x17	; 23
 740:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 744:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
	while(1)
	{
		SCH_Dispatch_Tasks();
 748:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 74c:	fd cf       	rjmp	.-6      	; 0x748 <main+0x40>

0000074e <__subsf3>:
 74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
 750:	bb 27       	eor	r27, r27
 752:	aa 27       	eor	r26, r26
 754:	0e d0       	rcall	.+28     	; 0x772 <__addsf3x>
 756:	1c c1       	rjmp	.+568    	; 0x990 <__fp_round>
 758:	0d d1       	rcall	.+538    	; 0x974 <__fp_pscA>
 75a:	30 f0       	brcs	.+12     	; 0x768 <__addsf3+0x18>
 75c:	12 d1       	rcall	.+548    	; 0x982 <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__addsf3+0x18>
 760:	31 f4       	brne	.+12     	; 0x76e <__addsf3+0x1e>
 762:	9f 3f       	cpi	r25, 0xFF	; 255
 764:	11 f4       	brne	.+4      	; 0x76a <__addsf3+0x1a>
 766:	1e f4       	brtc	.+6      	; 0x76e <__addsf3+0x1e>
 768:	02 c1       	rjmp	.+516    	; 0x96e <__fp_nan>
 76a:	0e f4       	brtc	.+2      	; 0x76e <__addsf3+0x1e>
 76c:	e0 95       	com	r30
 76e:	e7 fb       	bst	r30, 7
 770:	cf c0       	rjmp	.+414    	; 0x910 <__fp_inf>

00000772 <__addsf3x>:
 772:	e9 2f       	mov	r30, r25
 774:	1e d1       	rcall	.+572    	; 0x9b2 <__fp_split3>
 776:	80 f3       	brcs	.-32     	; 0x758 <__addsf3+0x8>
 778:	ba 17       	cp	r27, r26
 77a:	62 07       	cpc	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	95 07       	cpc	r25, r21
 782:	18 f0       	brcs	.+6      	; 0x78a <__addsf3x+0x18>
 784:	71 f4       	brne	.+28     	; 0x7a2 <__addsf3x+0x30>
 786:	9e f5       	brtc	.+102    	; 0x7ee <__addsf3x+0x7c>
 788:	4d c1       	rjmp	.+666    	; 0xa24 <__fp_zero>
 78a:	0e f4       	brtc	.+2      	; 0x78e <__addsf3x+0x1c>
 78c:	e0 95       	com	r30
 78e:	0b 2e       	mov	r0, r27
 790:	ba 2f       	mov	r27, r26
 792:	a0 2d       	mov	r26, r0
 794:	0b 01       	movw	r0, r22
 796:	b9 01       	movw	r22, r18
 798:	90 01       	movw	r18, r0
 79a:	0c 01       	movw	r0, r24
 79c:	ca 01       	movw	r24, r20
 79e:	a0 01       	movw	r20, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	ff 27       	eor	r31, r31
 7a4:	59 1b       	sub	r21, r25
 7a6:	99 f0       	breq	.+38     	; 0x7ce <__addsf3x+0x5c>
 7a8:	59 3f       	cpi	r21, 0xF9	; 249
 7aa:	50 f4       	brcc	.+20     	; 0x7c0 <__addsf3x+0x4e>
 7ac:	50 3e       	cpi	r21, 0xE0	; 224
 7ae:	68 f1       	brcs	.+90     	; 0x80a <__addsf3x+0x98>
 7b0:	1a 16       	cp	r1, r26
 7b2:	f0 40       	sbci	r31, 0x00	; 0
 7b4:	a2 2f       	mov	r26, r18
 7b6:	23 2f       	mov	r18, r19
 7b8:	34 2f       	mov	r19, r20
 7ba:	44 27       	eor	r20, r20
 7bc:	58 5f       	subi	r21, 0xF8	; 248
 7be:	f3 cf       	rjmp	.-26     	; 0x7a6 <__addsf3x+0x34>
 7c0:	46 95       	lsr	r20
 7c2:	37 95       	ror	r19
 7c4:	27 95       	ror	r18
 7c6:	a7 95       	ror	r26
 7c8:	f0 40       	sbci	r31, 0x00	; 0
 7ca:	53 95       	inc	r21
 7cc:	c9 f7       	brne	.-14     	; 0x7c0 <__addsf3x+0x4e>
 7ce:	7e f4       	brtc	.+30     	; 0x7ee <__addsf3x+0x7c>
 7d0:	1f 16       	cp	r1, r31
 7d2:	ba 0b       	sbc	r27, r26
 7d4:	62 0b       	sbc	r22, r18
 7d6:	73 0b       	sbc	r23, r19
 7d8:	84 0b       	sbc	r24, r20
 7da:	ba f0       	brmi	.+46     	; 0x80a <__addsf3x+0x98>
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	a1 f0       	breq	.+40     	; 0x808 <__addsf3x+0x96>
 7e0:	ff 0f       	add	r31, r31
 7e2:	bb 1f       	adc	r27, r27
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	c2 f7       	brpl	.-16     	; 0x7dc <__addsf3x+0x6a>
 7ec:	0e c0       	rjmp	.+28     	; 0x80a <__addsf3x+0x98>
 7ee:	ba 0f       	add	r27, r26
 7f0:	62 1f       	adc	r22, r18
 7f2:	73 1f       	adc	r23, r19
 7f4:	84 1f       	adc	r24, r20
 7f6:	48 f4       	brcc	.+18     	; 0x80a <__addsf3x+0x98>
 7f8:	87 95       	ror	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	9e 3f       	cpi	r25, 0xFE	; 254
 804:	08 f0       	brcs	.+2      	; 0x808 <__addsf3x+0x96>
 806:	b3 cf       	rjmp	.-154    	; 0x76e <__addsf3+0x1e>
 808:	93 95       	inc	r25
 80a:	88 0f       	add	r24, r24
 80c:	08 f0       	brcs	.+2      	; 0x810 <__addsf3x+0x9e>
 80e:	99 27       	eor	r25, r25
 810:	ee 0f       	add	r30, r30
 812:	97 95       	ror	r25
 814:	87 95       	ror	r24
 816:	08 95       	ret

00000818 <__fixunssfsi>:
 818:	d4 d0       	rcall	.+424    	; 0x9c2 <__fp_splitA>
 81a:	88 f0       	brcs	.+34     	; 0x83e <__fixunssfsi+0x26>
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	90 f0       	brcs	.+36     	; 0x844 <__fixunssfsi+0x2c>
 820:	b9 2f       	mov	r27, r25
 822:	99 27       	eor	r25, r25
 824:	b7 51       	subi	r27, 0x17	; 23
 826:	a0 f0       	brcs	.+40     	; 0x850 <__fixunssfsi+0x38>
 828:	d1 f0       	breq	.+52     	; 0x85e <__fixunssfsi+0x46>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	1a f0       	brmi	.+6      	; 0x83a <__fixunssfsi+0x22>
 834:	ba 95       	dec	r27
 836:	c9 f7       	brne	.-14     	; 0x82a <__fixunssfsi+0x12>
 838:	12 c0       	rjmp	.+36     	; 0x85e <__fixunssfsi+0x46>
 83a:	b1 30       	cpi	r27, 0x01	; 1
 83c:	81 f0       	breq	.+32     	; 0x85e <__fixunssfsi+0x46>
 83e:	f2 d0       	rcall	.+484    	; 0xa24 <__fp_zero>
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	08 95       	ret
 844:	ef c0       	rjmp	.+478    	; 0xa24 <__fp_zero>
 846:	67 2f       	mov	r22, r23
 848:	78 2f       	mov	r23, r24
 84a:	88 27       	eor	r24, r24
 84c:	b8 5f       	subi	r27, 0xF8	; 248
 84e:	39 f0       	breq	.+14     	; 0x85e <__fixunssfsi+0x46>
 850:	b9 3f       	cpi	r27, 0xF9	; 249
 852:	cc f3       	brlt	.-14     	; 0x846 <__fixunssfsi+0x2e>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b3 95       	inc	r27
 85c:	d9 f7       	brne	.-10     	; 0x854 <__fixunssfsi+0x3c>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__fixunssfsi+0x56>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__floatunsisf>:
 870:	e8 94       	clt
 872:	09 c0       	rjmp	.+18     	; 0x886 <__floatsisf+0x12>

00000874 <__floatsisf>:
 874:	97 fb       	bst	r25, 7
 876:	3e f4       	brtc	.+14     	; 0x886 <__floatsisf+0x12>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	99 23       	and	r25, r25
 888:	a9 f0       	breq	.+42     	; 0x8b4 <__floatsisf+0x40>
 88a:	f9 2f       	mov	r31, r25
 88c:	96 e9       	ldi	r25, 0x96	; 150
 88e:	bb 27       	eor	r27, r27
 890:	93 95       	inc	r25
 892:	f6 95       	lsr	r31
 894:	87 95       	ror	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f1 11       	cpse	r31, r1
 89e:	f8 cf       	rjmp	.-16     	; 0x890 <__floatsisf+0x1c>
 8a0:	fa f4       	brpl	.+62     	; 0x8e0 <__floatsisf+0x6c>
 8a2:	bb 0f       	add	r27, r27
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__floatsisf+0x36>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	1b c0       	rjmp	.+54     	; 0x8e0 <__floatsisf+0x6c>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <__floatsisf+0x6c>
 8b4:	88 23       	and	r24, r24
 8b6:	11 f0       	breq	.+4      	; 0x8bc <__floatsisf+0x48>
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <__floatsisf+0x6a>
 8bc:	77 23       	and	r23, r23
 8be:	21 f0       	breq	.+8      	; 0x8c8 <__floatsisf+0x54>
 8c0:	9e e8       	ldi	r25, 0x8E	; 142
 8c2:	87 2f       	mov	r24, r23
 8c4:	76 2f       	mov	r23, r22
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <__floatsisf+0x5e>
 8c8:	66 23       	and	r22, r22
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__floatsisf+0x74>
 8cc:	96 e8       	ldi	r25, 0x86	; 134
 8ce:	86 2f       	mov	r24, r22
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	2a f0       	brmi	.+10     	; 0x8e0 <__floatsisf+0x6c>
 8d6:	9a 95       	dec	r25
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	da f7       	brpl	.-10     	; 0x8d6 <__floatsisf+0x62>
 8e0:	88 0f       	add	r24, r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <floor>:
 8ea:	85 d0       	rcall	.+266    	; 0x9f6 <__fp_trunc>
 8ec:	80 f0       	brcs	.+32     	; 0x90e <__stack+0xf>
 8ee:	9f 37       	cpi	r25, 0x7F	; 127
 8f0:	40 f4       	brcc	.+16     	; 0x902 <__stack+0x3>
 8f2:	91 11       	cpse	r25, r1
 8f4:	0e f0       	brts	.+2      	; 0x8f8 <floor+0xe>
 8f6:	97 c0       	rjmp	.+302    	; 0xa26 <__fp_szero>
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	9f eb       	ldi	r25, 0xBF	; 191
 900:	08 95       	ret
 902:	26 f4       	brtc	.+8      	; 0x90c <__stack+0xd>
 904:	1b 16       	cp	r1, r27
 906:	61 1d       	adc	r22, r1
 908:	71 1d       	adc	r23, r1
 90a:	81 1d       	adc	r24, r1
 90c:	07 c0       	rjmp	.+14     	; 0x91c <__fp_mintl>
 90e:	21 c0       	rjmp	.+66     	; 0x952 <__fp_mpack>

00000910 <__fp_inf>:
 910:	97 f9       	bld	r25, 7
 912:	9f 67       	ori	r25, 0x7F	; 127
 914:	80 e8       	ldi	r24, 0x80	; 128
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	08 95       	ret

0000091c <__fp_mintl>:
 91c:	88 23       	and	r24, r24
 91e:	71 f4       	brne	.+28     	; 0x93c <__fp_mintl+0x20>
 920:	77 23       	and	r23, r23
 922:	21 f0       	breq	.+8      	; 0x92c <__fp_mintl+0x10>
 924:	98 50       	subi	r25, 0x08	; 8
 926:	87 2b       	or	r24, r23
 928:	76 2f       	mov	r23, r22
 92a:	07 c0       	rjmp	.+14     	; 0x93a <__fp_mintl+0x1e>
 92c:	66 23       	and	r22, r22
 92e:	11 f4       	brne	.+4      	; 0x934 <__fp_mintl+0x18>
 930:	99 27       	eor	r25, r25
 932:	0d c0       	rjmp	.+26     	; 0x94e <__fp_mintl+0x32>
 934:	90 51       	subi	r25, 0x10	; 16
 936:	86 2b       	or	r24, r22
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	2a f0       	brmi	.+10     	; 0x948 <__fp_mintl+0x2c>
 93e:	9a 95       	dec	r25
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	da f7       	brpl	.-10     	; 0x93e <__fp_mintl+0x22>
 948:	88 0f       	add	r24, r24
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <__fp_mpack>:
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	31 f0       	breq	.+12     	; 0x962 <__fp_mpack_finite+0xc>

00000956 <__fp_mpack_finite>:
 956:	91 50       	subi	r25, 0x01	; 1
 958:	20 f4       	brcc	.+8      	; 0x962 <__fp_mpack_finite+0xc>
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	88 0f       	add	r24, r24
 964:	91 1d       	adc	r25, r1
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret

0000096e <__fp_nan>:
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	80 ec       	ldi	r24, 0xC0	; 192
 972:	08 95       	ret

00000974 <__fp_pscA>:
 974:	00 24       	eor	r0, r0
 976:	0a 94       	dec	r0
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	18 06       	cpc	r1, r24
 97e:	09 06       	cpc	r0, r25
 980:	08 95       	ret

00000982 <__fp_pscB>:
 982:	00 24       	eor	r0, r0
 984:	0a 94       	dec	r0
 986:	12 16       	cp	r1, r18
 988:	13 06       	cpc	r1, r19
 98a:	14 06       	cpc	r1, r20
 98c:	05 06       	cpc	r0, r21
 98e:	08 95       	ret

00000990 <__fp_round>:
 990:	09 2e       	mov	r0, r25
 992:	03 94       	inc	r0
 994:	00 0c       	add	r0, r0
 996:	11 f4       	brne	.+4      	; 0x99c <__fp_round+0xc>
 998:	88 23       	and	r24, r24
 99a:	52 f0       	brmi	.+20     	; 0x9b0 <__fp_round+0x20>
 99c:	bb 0f       	add	r27, r27
 99e:	40 f4       	brcc	.+16     	; 0x9b0 <__fp_round+0x20>
 9a0:	bf 2b       	or	r27, r31
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__fp_round+0x18>
 9a4:	60 ff       	sbrs	r22, 0
 9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__fp_round+0x20>
 9a8:	6f 5f       	subi	r22, 0xFF	; 255
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	08 95       	ret

000009b2 <__fp_split3>:
 9b2:	57 fd       	sbrc	r21, 7
 9b4:	90 58       	subi	r25, 0x80	; 128
 9b6:	44 0f       	add	r20, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	59 f0       	breq	.+22     	; 0x9d2 <__fp_splitA+0x10>
 9bc:	5f 3f       	cpi	r21, 0xFF	; 255
 9be:	71 f0       	breq	.+28     	; 0x9dc <__fp_splitA+0x1a>
 9c0:	47 95       	ror	r20

000009c2 <__fp_splitA>:
 9c2:	88 0f       	add	r24, r24
 9c4:	97 fb       	bst	r25, 7
 9c6:	99 1f       	adc	r25, r25
 9c8:	61 f0       	breq	.+24     	; 0x9e2 <__fp_splitA+0x20>
 9ca:	9f 3f       	cpi	r25, 0xFF	; 255
 9cc:	79 f0       	breq	.+30     	; 0x9ec <__fp_splitA+0x2a>
 9ce:	87 95       	ror	r24
 9d0:	08 95       	ret
 9d2:	12 16       	cp	r1, r18
 9d4:	13 06       	cpc	r1, r19
 9d6:	14 06       	cpc	r1, r20
 9d8:	55 1f       	adc	r21, r21
 9da:	f2 cf       	rjmp	.-28     	; 0x9c0 <__fp_split3+0xe>
 9dc:	46 95       	lsr	r20
 9de:	f1 df       	rcall	.-30     	; 0x9c2 <__fp_splitA>
 9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <__fp_splitA+0x30>
 9e2:	16 16       	cp	r1, r22
 9e4:	17 06       	cpc	r1, r23
 9e6:	18 06       	cpc	r1, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	f1 cf       	rjmp	.-30     	; 0x9ce <__fp_splitA+0xc>
 9ec:	86 95       	lsr	r24
 9ee:	71 05       	cpc	r23, r1
 9f0:	61 05       	cpc	r22, r1
 9f2:	08 94       	sec
 9f4:	08 95       	ret

000009f6 <__fp_trunc>:
 9f6:	e5 df       	rcall	.-54     	; 0x9c2 <__fp_splitA>
 9f8:	a0 f0       	brcs	.+40     	; 0xa22 <__fp_trunc+0x2c>
 9fa:	be e7       	ldi	r27, 0x7E	; 126
 9fc:	b9 17       	cp	r27, r25
 9fe:	88 f4       	brcc	.+34     	; 0xa22 <__fp_trunc+0x2c>
 a00:	bb 27       	eor	r27, r27
 a02:	9f 38       	cpi	r25, 0x8F	; 143
 a04:	60 f4       	brcc	.+24     	; 0xa1e <__fp_trunc+0x28>
 a06:	16 16       	cp	r1, r22
 a08:	b1 1d       	adc	r27, r1
 a0a:	67 2f       	mov	r22, r23
 a0c:	78 2f       	mov	r23, r24
 a0e:	88 27       	eor	r24, r24
 a10:	98 5f       	subi	r25, 0xF8	; 248
 a12:	f7 cf       	rjmp	.-18     	; 0xa02 <__fp_trunc+0xc>
 a14:	86 95       	lsr	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b1 1d       	adc	r27, r1
 a1c:	93 95       	inc	r25
 a1e:	96 39       	cpi	r25, 0x96	; 150
 a20:	c8 f3       	brcs	.-14     	; 0xa14 <__fp_trunc+0x1e>
 a22:	08 95       	ret

00000a24 <__fp_zero>:
 a24:	e8 94       	clt

00000a26 <__fp_szero>:
 a26:	bb 27       	eor	r27, r27
 a28:	66 27       	eor	r22, r22
 a2a:	77 27       	eor	r23, r23
 a2c:	cb 01       	movw	r24, r22
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__mulsf3>:
 a32:	0b d0       	rcall	.+22     	; 0xa4a <__mulsf3x>
 a34:	ad cf       	rjmp	.-166    	; 0x990 <__fp_round>
 a36:	9e df       	rcall	.-196    	; 0x974 <__fp_pscA>
 a38:	28 f0       	brcs	.+10     	; 0xa44 <__mulsf3+0x12>
 a3a:	a3 df       	rcall	.-186    	; 0x982 <__fp_pscB>
 a3c:	18 f0       	brcs	.+6      	; 0xa44 <__mulsf3+0x12>
 a3e:	95 23       	and	r25, r21
 a40:	09 f0       	breq	.+2      	; 0xa44 <__mulsf3+0x12>
 a42:	66 cf       	rjmp	.-308    	; 0x910 <__fp_inf>
 a44:	94 cf       	rjmp	.-216    	; 0x96e <__fp_nan>
 a46:	11 24       	eor	r1, r1
 a48:	ee cf       	rjmp	.-36     	; 0xa26 <__fp_szero>

00000a4a <__mulsf3x>:
 a4a:	b3 df       	rcall	.-154    	; 0x9b2 <__fp_split3>
 a4c:	a0 f3       	brcs	.-24     	; 0xa36 <__mulsf3+0x4>

00000a4e <__mulsf3_pse>:
 a4e:	95 9f       	mul	r25, r21
 a50:	d1 f3       	breq	.-12     	; 0xa46 <__mulsf3+0x14>
 a52:	95 0f       	add	r25, r21
 a54:	50 e0       	ldi	r21, 0x00	; 0
 a56:	55 1f       	adc	r21, r21
 a58:	62 9f       	mul	r22, r18
 a5a:	f0 01       	movw	r30, r0
 a5c:	72 9f       	mul	r23, r18
 a5e:	bb 27       	eor	r27, r27
 a60:	f0 0d       	add	r31, r0
 a62:	b1 1d       	adc	r27, r1
 a64:	63 9f       	mul	r22, r19
 a66:	aa 27       	eor	r26, r26
 a68:	f0 0d       	add	r31, r0
 a6a:	b1 1d       	adc	r27, r1
 a6c:	aa 1f       	adc	r26, r26
 a6e:	64 9f       	mul	r22, r20
 a70:	66 27       	eor	r22, r22
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	66 1f       	adc	r22, r22
 a78:	82 9f       	mul	r24, r18
 a7a:	22 27       	eor	r18, r18
 a7c:	b0 0d       	add	r27, r0
 a7e:	a1 1d       	adc	r26, r1
 a80:	62 1f       	adc	r22, r18
 a82:	73 9f       	mul	r23, r19
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	62 1f       	adc	r22, r18
 a8a:	83 9f       	mul	r24, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	22 1f       	adc	r18, r18
 a92:	74 9f       	mul	r23, r20
 a94:	33 27       	eor	r19, r19
 a96:	a0 0d       	add	r26, r0
 a98:	61 1d       	adc	r22, r1
 a9a:	23 1f       	adc	r18, r19
 a9c:	84 9f       	mul	r24, r20
 a9e:	60 0d       	add	r22, r0
 aa0:	21 1d       	adc	r18, r1
 aa2:	82 2f       	mov	r24, r18
 aa4:	76 2f       	mov	r23, r22
 aa6:	6a 2f       	mov	r22, r26
 aa8:	11 24       	eor	r1, r1
 aaa:	9f 57       	subi	r25, 0x7F	; 127
 aac:	50 40       	sbci	r21, 0x00	; 0
 aae:	8a f0       	brmi	.+34     	; 0xad2 <__mulsf3_pse+0x84>
 ab0:	e1 f0       	breq	.+56     	; 0xaea <__mulsf3_pse+0x9c>
 ab2:	88 23       	and	r24, r24
 ab4:	4a f0       	brmi	.+18     	; 0xac8 <__mulsf3_pse+0x7a>
 ab6:	ee 0f       	add	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	bb 1f       	adc	r27, r27
 abc:	66 1f       	adc	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	50 40       	sbci	r21, 0x00	; 0
 ac6:	a9 f7       	brne	.-22     	; 0xab2 <__mulsf3_pse+0x64>
 ac8:	9e 3f       	cpi	r25, 0xFE	; 254
 aca:	51 05       	cpc	r21, r1
 acc:	70 f0       	brcs	.+28     	; 0xaea <__mulsf3_pse+0x9c>
 ace:	20 cf       	rjmp	.-448    	; 0x910 <__fp_inf>
 ad0:	aa cf       	rjmp	.-172    	; 0xa26 <__fp_szero>
 ad2:	5f 3f       	cpi	r21, 0xFF	; 255
 ad4:	ec f3       	brlt	.-6      	; 0xad0 <__mulsf3_pse+0x82>
 ad6:	98 3e       	cpi	r25, 0xE8	; 232
 ad8:	dc f3       	brlt	.-10     	; 0xad0 <__mulsf3_pse+0x82>
 ada:	86 95       	lsr	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b7 95       	ror	r27
 ae2:	f7 95       	ror	r31
 ae4:	e7 95       	ror	r30
 ae6:	9f 5f       	subi	r25, 0xFF	; 255
 ae8:	c1 f7       	brne	.-16     	; 0xada <__mulsf3_pse+0x8c>
 aea:	fe 2b       	or	r31, r30
 aec:	88 0f       	add	r24, r24
 aee:	91 1d       	adc	r25, r1
 af0:	96 95       	lsr	r25
 af2:	87 95       	ror	r24
 af4:	97 f9       	bld	r25, 7
 af6:	08 95       	ret

00000af8 <__udivmodhi4>:
 af8:	aa 1b       	sub	r26, r26
 afa:	bb 1b       	sub	r27, r27
 afc:	51 e1       	ldi	r21, 0x11	; 17
 afe:	07 c0       	rjmp	.+14     	; 0xb0e <__udivmodhi4_ep>

00000b00 <__udivmodhi4_loop>:
 b00:	aa 1f       	adc	r26, r26
 b02:	bb 1f       	adc	r27, r27
 b04:	a6 17       	cp	r26, r22
 b06:	b7 07       	cpc	r27, r23
 b08:	10 f0       	brcs	.+4      	; 0xb0e <__udivmodhi4_ep>
 b0a:	a6 1b       	sub	r26, r22
 b0c:	b7 0b       	sbc	r27, r23

00000b0e <__udivmodhi4_ep>:
 b0e:	88 1f       	adc	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	5a 95       	dec	r21
 b14:	a9 f7       	brne	.-22     	; 0xb00 <__udivmodhi4_loop>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	bc 01       	movw	r22, r24
 b1c:	cd 01       	movw	r24, r26
 b1e:	08 95       	ret

00000b20 <__divmodhi4>:
 b20:	97 fb       	bst	r25, 7
 b22:	09 2e       	mov	r0, r25
 b24:	07 26       	eor	r0, r23
 b26:	0a d0       	rcall	.+20     	; 0xb3c <__divmodhi4_neg1>
 b28:	77 fd       	sbrc	r23, 7
 b2a:	04 d0       	rcall	.+8      	; 0xb34 <__divmodhi4_neg2>
 b2c:	e5 df       	rcall	.-54     	; 0xaf8 <__udivmodhi4>
 b2e:	06 d0       	rcall	.+12     	; 0xb3c <__divmodhi4_neg1>
 b30:	00 20       	and	r0, r0
 b32:	1a f4       	brpl	.+6      	; 0xb3a <__divmodhi4_exit>

00000b34 <__divmodhi4_neg2>:
 b34:	70 95       	com	r23
 b36:	61 95       	neg	r22
 b38:	7f 4f       	sbci	r23, 0xFF	; 255

00000b3a <__divmodhi4_exit>:
 b3a:	08 95       	ret

00000b3c <__divmodhi4_neg1>:
 b3c:	f6 f7       	brtc	.-4      	; 0xb3a <__divmodhi4_exit>
 b3e:	90 95       	com	r25
 b40:	81 95       	neg	r24
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
