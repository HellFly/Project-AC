
tempsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800100  00800100  00000b96  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000070c  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003300  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b20  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ab  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e6  00000000  00000000  000042ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037a  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a6  00000000  00000000  00004e7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3b       	cpi	r26, 0xB7	; 183
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
  9e:	0c 94 7f 05 	jmp	0xafe	; 0xafe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	db 01       	movw	r26, r22
  b2:	8a 01       	movw	r16, r20
  b4:	80 91 03 01 	lds	r24, 0x0103
  b8:	90 91 04 01 	lds	r25, 0x0104
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	ea e0       	ldi	r30, 0x0A	; 10
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	25 31       	cpi	r18, 0x15	; 21
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	84 31       	cpi	r24, 0x14	; 20
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	ed 5f       	subi	r30, 0xFD	; 253
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	d1 83       	std	Z+1, r29	; 0x01
 10c:	c0 83       	st	Z, r28
 10e:	b3 83       	std	Z+3, r27	; 0x03
 110:	a2 83       	std	Z+2, r26	; 0x02
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	ed 5f       	subi	r30, 0xFD	; 253
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c9 e0       	ldi	r28, 0x09	; 9
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	14 31       	cpi	r17, 0x14	; 20
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c4 31       	cpi	r28, 0x14	; 20
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e3 e0       	ldi	r30, 0x03	; 3
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	2f e8       	ldi	r18, 0x8F	; 143
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
 26a:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 26e:	83 e3       	ldi	r24, 0x33	; 51
 270:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 274:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter AND RECEIVER
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	80 93 c2 00 	sts	0x00C2, r24
}
 284:	08 95       	ret

00000286 <transmit>:
void transmit(uint8_t data)
{
	 // wait for an empty transmit buffer
	 // UDRE is set when the transmit buffer is empty
	 
	 loop_until_bit_is_set(UCSR0A, UDRE0);   
 286:	e0 ec       	ldi	r30, 0xC0	; 192
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	95 ff       	sbrs	r25, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <transmit+0x4>
	 UDR0 = data;
 290:	80 93 c6 00 	sts	0x00C6, r24
}
 294:	08 95       	ret

00000296 <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	while (*c != -1) {
 29c:	88 81       	ld	r24, Y
 29e:	99 81       	ldd	r25, Y+1	; 0x01
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	92 07       	cpc	r25, r18
 2a6:	49 f0       	breq	.+18     	; 0x2ba <transmit_string+0x24>
	 loop_until_bit_is_set(UCSR0A, UDRE0);   
	 UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 2a8:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 2aa:	0e 94 43 01 	call	0x286	; 0x286 <transmit>
	 UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
 2ae:	89 91       	ld	r24, Y+
 2b0:	99 91       	ld	r25, Y+
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	8f 3f       	cpi	r24, 0xFF	; 255
 2b6:	92 07       	cpc	r25, r18
 2b8:	c1 f7       	brne	.-16     	; 0x2aa <transmit_string+0x14>
		transmit(*c);
		c++;
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <receive>:

// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 2c0:	e0 ec       	ldi	r30, 0xC0	; 192
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	90 81       	ld	r25, Z
 2c6:	99 23       	and	r25, r25
 2c8:	ec f7       	brge	.-6      	; 0x2c4 <receive+0x4>
	return response;
}
 2ca:	08 95       	ret

000002cc <receive_non_blocking>:

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & (1<<RXC0)) { // is the received data bit set in the UCSR0A register?
 2cc:	80 91 c0 00 	lds	r24, 0x00C0
 2d0:	88 23       	and	r24, r24
 2d2:	24 f4       	brge	.+8      	; 0x2dc <receive_non_blocking+0x10>
		return (int) UDR0;
 2d4:	80 91 c6 00 	lds	r24, 0x00C6
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
	}
	return -1;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
}
 2e0:	08 95       	ret

000002e2 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	28 97       	sbiw	r28, 0x08	; 8
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	8c 01       	movw	r16, r24
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
 2fc:	99 23       	and	r25, r25
 2fe:	cc f0       	brlt	.+50     	; 0x332 <send_light+0x50>
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
 300:	bc 01       	movw	r22, r24
 302:	99 23       	and	r25, r25
 304:	14 f4       	brge	.+4      	; 0x30a <send_light+0x28>
 306:	61 50       	subi	r22, 0x01	; 1
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	67 2f       	mov	r22, r23
 30c:	77 0f       	add	r23, r23
 30e:	77 0b       	sbc	r23, r23
 310:	88 27       	eor	r24, r24
 312:	77 fd       	sbrc	r23, 7
 314:	80 95       	com	r24
 316:	98 2f       	mov	r25, r24
 318:	0e 94 16 04 	call	0x82c	; 0x82c <__floatsisf>
 31c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <floor>
 320:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
 324:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 326:	c8 01       	movw	r24, r16
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divmodhi4>
 330:	02 c0       	rjmp	.+4      	; 0x336 <send_light+0x54>
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
		val2 = 0;
 332:	80 e0       	ldi	r24, 0x00	; 0
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
 334:	40 e0       	ldi	r20, 0x00	; 0
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	3a 83       	std	Y+2, r19	; 0x02
 33c:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 33e:	4b 83       	std	Y+3, r20	; 0x03
 340:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 342:	8d 83       	std	Y+5, r24	; 0x05
 344:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	98 87       	std	Y+8, r25	; 0x08
 34c:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 356:	28 96       	adiw	r28, 0x08	; 8
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <send_temperature>:

// Sends the temperature via UART
void send_temperature(int temp) {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <send_temperature+0x6>
 372:	00 d0       	rcall	.+0      	; 0x374 <send_temperature+0x8>
 374:	00 d0       	rcall	.+0      	; 0x376 <send_temperature+0xa>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 37a:	80 58       	subi	r24, 0x80	; 128
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;
	
	if (temp < 0) {
 37e:	2a f0       	brmi	.+10     	; 0x38a <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 380:	8f 3f       	cpi	r24, 0xFF	; 255
 382:	91 05       	cpc	r25, r1
 384:	29 f0       	breq	.+10     	; 0x390 <send_temperature+0x24>
 386:	24 f0       	brlt	.+8      	; 0x390 <send_temperature+0x24>
 388:	02 c0       	rjmp	.+4      	; 0x38e <send_temperature+0x22>
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;
	
	if (temp < 0) {
		val = 0;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	01 c0       	rjmp	.+2      	; 0x390 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 38e:	8f ef       	ldi	r24, 0xFF	; 255
	else {
		val = (uint8_t)temp;
	}
	
	int buffer[3];
	buffer[0] = 2;
 390:	22 e0       	ldi	r18, 0x02	; 2
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	3a 83       	std	Y+2, r19	; 0x02
 396:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 398:	8b 83       	std	Y+3, r24	; 0x03
 39a:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	9e 83       	std	Y+6, r25	; 0x06
 3a2:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 3ac:	26 96       	adiw	r28, 0x06	; 6
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 6; //calculate average from 6 measured values with intervals of 10 seconds.
 3be:	80 91 01 01 	lds	r24, 0x0101
 3c2:	90 91 02 01 	lds	r25, 0x0102
 3c6:	66 e0       	ldi	r22, 0x06	; 6
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodhi4>
 3ce:	86 2f       	mov	r24, r22
 3d0:	97 2f       	mov	r25, r23
 3d2:	60 93 01 01 	sts	0x0101, r22
 3d6:	70 93 02 01 	sts	0x0102, r23
	//transmit(averageTemperature); //Send average temperature to screen.
	send_temperature(averageTemperature);
 3da:	0e 94 b6 01 	call	0x36c	; 0x36c <send_temperature>
	averageTemperature = 0; //reset average temperature.
 3de:	10 92 02 01 	sts	0x0102, r1
 3e2:	10 92 01 01 	sts	0x0101, r1
}
 3e6:	08 95       	ret

000003e8 <send_blinds_status>:
	transmit_string(buffer);
}

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t status) {
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	28 97       	sbiw	r28, 0x08	; 8
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
	if (status > 2) {
		status = 2;
	}
	int buffer[4];
	buffer[0] = 3;
 3fc:	23 e0       	ldi	r18, 0x03	; 3
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	3a 83       	std	Y+2, r19	; 0x02
 402:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	08 f0       	brcs	.+2      	; 0x40e <send_blinds_status+0x26>
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	98 87       	std	Y+8, r25	; 0x08
 418:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 4b 01 	call	0x296	; 0x296 <transmit_string>
}
 422:	28 96       	adiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <reset_buffer>:

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
 434:	ef e8       	ldi	r30, 0x8F	; 143
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	2f ed       	ldi	r18, 0xDF	; 223
 43a:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	81 93       	st	Z+, r24
 442:	91 93       	st	Z+, r25

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
 444:	e2 17       	cp	r30, r18
 446:	f3 07       	cpc	r31, r19
 448:	d9 f7       	brne	.-10     	; 0x440 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 44a:	08 95       	ret

0000044c <add_to_buffer>:

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 44c:	20 91 8f 01 	lds	r18, 0x018F
 450:	30 91 90 01 	lds	r19, 0x0190
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	2f 3f       	cpi	r18, 0xFF	; 255
 458:	39 07       	cpc	r19, r25
 45a:	91 f0       	breq	.+36     	; 0x480 <add_to_buffer+0x34>
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
 45c:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 45e:	4f e8       	ldi	r20, 0x8F	; 143
 460:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 462:	9f 5f       	subi	r25, 0xFF	; 255
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 464:	29 2f       	mov	r18, r25
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	e4 0f       	add	r30, r20
 470:	f5 1f       	adc	r31, r21
 472:	60 81       	ld	r22, Z
 474:	71 81       	ldd	r23, Z+1	; 0x01
 476:	ef ef       	ldi	r30, 0xFF	; 255
 478:	6f 3f       	cpi	r22, 0xFF	; 255
 47a:	7e 07       	cpc	r23, r30
 47c:	91 f7       	brne	.-28     	; 0x462 <add_to_buffer+0x16>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <add_to_buffer+0x38>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 484:	f9 01       	movw	r30, r18
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	e1 57       	subi	r30, 0x71	; 113
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	80 83       	st	Z, r24
 490:	11 82       	std	Z+1, r1	; 0x01
}
 492:	08 95       	ret

00000494 <receiveMessages>:

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	if (buffer_reset != 123) {
 494:	80 91 00 01 	lds	r24, 0x0100
 498:	8b 37       	cpi	r24, 0x7B	; 123
 49a:	29 f0       	breq	.+10     	; 0x4a6 <receiveMessages+0x12>
		reset_buffer();
 49c:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
		buffer_reset = 123;
 4a0:	8b e7       	ldi	r24, 0x7B	; 123
 4a2:	80 93 00 01 	sts	0x0100, r24
	}
	int b = receive_non_blocking();
 4a6:	0e 94 66 01 	call	0x2cc	; 0x2cc <receive_non_blocking>
	while (b != -1) {
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	8f 3f       	cpi	r24, 0xFF	; 255
 4ae:	92 07       	cpc	r25, r18
 4b0:	41 f0       	breq	.+16     	; 0x4c2 <receiveMessages+0x2e>
		add_to_buffer((uint8_t) b);
 4b2:	0e 94 26 02 	call	0x44c	; 0x44c <add_to_buffer>
		b = receive_non_blocking();
 4b6:	0e 94 66 01 	call	0x2cc	; 0x2cc <receive_non_blocking>
	if (buffer_reset != 123) {
		reset_buffer();
		buffer_reset = 123;
	}
	int b = receive_non_blocking();
	while (b != -1) {
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	8f 3f       	cpi	r24, 0xFF	; 255
 4be:	92 07       	cpc	r25, r18
 4c0:	c1 f7       	brne	.-16     	; 0x4b2 <receiveMessages+0x1e>
		add_to_buffer((uint8_t) b);
		b = receive_non_blocking();
	}
	
	int c = receive_buffer[0];
 4c2:	80 91 8f 01 	lds	r24, 0x018F
 4c6:	90 91 90 01 	lds	r25, 0x0190
	int p1 = receive_buffer[1];
 4ca:	20 91 91 01 	lds	r18, 0x0191
 4ce:	30 91 92 01 	lds	r19, 0x0192
	int p2 = receive_buffer[2];
 4d2:	40 91 93 01 	lds	r20, 0x0193
 4d6:	50 91 94 01 	lds	r21, 0x0194
	int p3 = receive_buffer[3];
	
	if (c == 10) { // Open blinds
 4da:	8a 30       	cpi	r24, 0x0A	; 10
 4dc:	91 05       	cpc	r25, r1
 4de:	71 f4       	brne	.+28     	; 0x4fc <receiveMessages+0x68>
		if (p1 == 1) {
 4e0:	21 30       	cpi	r18, 0x01	; 1
 4e2:	31 05       	cpc	r19, r1
 4e4:	19 f4       	brne	.+6      	; 0x4ec <receiveMessages+0x58>
			// OPEN THE BLINDS
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 4e6:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 4ea:	08 95       	ret
		}
		else if (p1 != -1) {
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	2f 3f       	cpi	r18, 0xFF	; 255
 4f0:	38 07       	cpc	r19, r24
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <receiveMessages+0x62>
 4f4:	68 c0       	rjmp	.+208    	; 0x5c6 <receiveMessages+0x132>
			reset_buffer();
 4f6:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 4fa:	08 95       	ret
		}
	}
	else if (c == 11) { // Close blinds
 4fc:	8b 30       	cpi	r24, 0x0B	; 11
 4fe:	91 05       	cpc	r25, r1
 500:	71 f4       	brne	.+28     	; 0x51e <receiveMessages+0x8a>
		if (p1 == 1) {
 502:	21 30       	cpi	r18, 0x01	; 1
 504:	31 05       	cpc	r19, r1
 506:	19 f4       	brne	.+6      	; 0x50e <receiveMessages+0x7a>
			// CLOSE THE BLINDS
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 508:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 50c:	08 95       	ret
		}
		else if (p1 != -1) {
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	2f 3f       	cpi	r18, 0xFF	; 255
 512:	38 07       	cpc	r19, r24
 514:	09 f4       	brne	.+2      	; 0x518 <receiveMessages+0x84>
 516:	57 c0       	rjmp	.+174    	; 0x5c6 <receiveMessages+0x132>
			reset_buffer();
 518:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 51c:	08 95       	ret
		}
	}
	else if (c == 20) { // Set blinds open distance
 51e:	84 31       	cpi	r24, 0x14	; 20
 520:	91 05       	cpc	r25, r1
 522:	69 f4       	brne	.+26     	; 0x53e <receiveMessages+0xaa>
		if (p1 != -1 && p2 != -1) {
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	2f 3f       	cpi	r18, 0xFF	; 255
 528:	38 07       	cpc	r19, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <receiveMessages+0x9a>
 52c:	4c c0       	rjmp	.+152    	; 0x5c6 <receiveMessages+0x132>
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	4f 3f       	cpi	r20, 0xFF	; 255
 532:	52 07       	cpc	r21, r18
 534:	09 f4       	brne	.+2      	; 0x538 <receiveMessages+0xa4>
 536:	47 c0       	rjmp	.+142    	; 0x5c6 <receiveMessages+0x132>
			int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 538:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 53c:	08 95       	ret
		}
	}
	else if (c == 21) { // Set blinds closed distance
 53e:	85 31       	cpi	r24, 0x15	; 21
 540:	91 05       	cpc	r25, r1
 542:	59 f4       	brne	.+22     	; 0x55a <receiveMessages+0xc6>
		if (p1 != -1 && p2 != -1) {
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	2f 3f       	cpi	r18, 0xFF	; 255
 548:	38 07       	cpc	r19, r24
 54a:	e9 f1       	breq	.+122    	; 0x5c6 <receiveMessages+0x132>
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	4f 3f       	cpi	r20, 0xFF	; 255
 550:	52 07       	cpc	r21, r18
 552:	c9 f1       	breq	.+114    	; 0x5c6 <receiveMessages+0x132>
			int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 554:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 558:	08 95       	ret
		}			
	}
	else if (c == 30) { // Set temperature to close
 55a:	8e 31       	cpi	r24, 0x1E	; 30
 55c:	91 05       	cpc	r25, r1
 55e:	39 f4       	brne	.+14     	; 0x56e <receiveMessages+0xda>
		if (p1 != -1) {
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	2f 3f       	cpi	r18, 0xFF	; 255
 564:	38 07       	cpc	r19, r24
 566:	79 f1       	breq	.+94     	; 0x5c6 <receiveMessages+0x132>
			int temperature_to_close = p1 + 128; // The new temperature threshold to close the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 568:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 56c:	08 95       	ret
		}
	}
	else if (c == 31) { // Set temperature to open
 56e:	8f 31       	cpi	r24, 0x1F	; 31
 570:	91 05       	cpc	r25, r1
 572:	39 f4       	brne	.+14     	; 0x582 <receiveMessages+0xee>
		if (p1 != -1) {
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	2f 3f       	cpi	r18, 0xFF	; 255
 578:	38 07       	cpc	r19, r24
 57a:	29 f1       	breq	.+74     	; 0x5c6 <receiveMessages+0x132>
			int temperature_to_open = p1 + 128; // The new temperature threshold to open the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 57c:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 580:	08 95       	ret
		}
	}
	else if (c == 32) { // Set light to close
 582:	80 32       	cpi	r24, 0x20	; 32
 584:	91 05       	cpc	r25, r1
 586:	59 f4       	brne	.+22     	; 0x59e <receiveMessages+0x10a>
		if (p1 != -1 && p2 != -1) {
 588:	8f ef       	ldi	r24, 0xFF	; 255
 58a:	2f 3f       	cpi	r18, 0xFF	; 255
 58c:	38 07       	cpc	r19, r24
 58e:	d9 f0       	breq	.+54     	; 0x5c6 <receiveMessages+0x132>
 590:	2f ef       	ldi	r18, 0xFF	; 255
 592:	4f 3f       	cpi	r20, 0xFF	; 255
 594:	52 07       	cpc	r21, r18
 596:	b9 f0       	breq	.+46     	; 0x5c6 <receiveMessages+0x132>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 598:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 59c:	08 95       	ret
		}
	}
	else if (c == 33) { // Set light to open
 59e:	81 32       	cpi	r24, 0x21	; 33
 5a0:	91 05       	cpc	r25, r1
 5a2:	59 f4       	brne	.+22     	; 0x5ba <receiveMessages+0x126>
		if (p1 != -1 && p2 != -1) {
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	2f 3f       	cpi	r18, 0xFF	; 255
 5a8:	38 07       	cpc	r19, r24
 5aa:	69 f0       	breq	.+26     	; 0x5c6 <receiveMessages+0x132>
 5ac:	2f ef       	ldi	r18, 0xFF	; 255
 5ae:	4f 3f       	cpi	r20, 0xFF	; 255
 5b0:	52 07       	cpc	r21, r18
 5b2:	49 f0       	breq	.+18     	; 0x5c6 <receiveMessages+0x132>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			
			// End do stuff
			reset_buffer();
 5b4:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5b8:	08 95       	ret
		}
	}
	else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
 5ba:	2f ef       	ldi	r18, 0xFF	; 255
 5bc:	8f 3f       	cpi	r24, 0xFF	; 255
 5be:	92 07       	cpc	r25, r18
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <receiveMessages+0x132>
		reset_buffer();
 5c2:	0e 94 1a 02 	call	0x434	; 0x434 <reset_buffer>
 5c6:	08 95       	ret

000005c8 <setup>:
}

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setup()
{
	ADMUX |= (1 << REFS0); //set reference voltage 
 5c8:	ec e7       	ldi	r30, 0x7C	; 124
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	80 64       	ori	r24, 0x40	; 64
 5d0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 5d2:	ea e7       	ldi	r30, 0x7A	; 122
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	87 60       	ori	r24, 0x07	; 7
 5da:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 5dc:	80 81       	ld	r24, Z
 5de:	80 68       	ori	r24, 0x80	; 128
 5e0:	80 83       	st	Z, r24
}
 5e2:	08 95       	ret

000005e4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 5e4:	ec e7       	ldi	r30, 0x7C	; 124
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7′ will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 5ea:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 5ec:	98 7f       	andi	r25, 0xF8	; 248
 5ee:	98 2b       	or	r25, r24
 5f0:	90 83       	st	Z, r25
	
	// start the conversion
	ADCSRA |= (1<<ADSC);
 5f2:	ea e7       	ldi	r30, 0x7A	; 122
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0′ again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 5fc:	80 81       	ld	r24, Z
 5fe:	86 fd       	sbrc	r24, 6
 600:	fd cf       	rjmp	.-6      	; 0x5fc <adc_read+0x18>
	
	return (ADC); 
 602:	80 91 78 00 	lds	r24, 0x0078
 606:	90 91 79 00 	lds	r25, 0x0079
}
 60a:	08 95       	ret

0000060c <calculateTemperature>:

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC.
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <adc_read>
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
 622:	68 2f       	mov	r22, r24
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 14 04 	call	0x828	; 0x828 <__floatunsisf>
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	40 e8       	ldi	r20, 0x80	; 128
 634:	5a e3       	ldi	r21, 0x3A	; 58
 636:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
	voltage *= 5;
 63a:	46 2f       	mov	r20, r22
 63c:	57 2f       	mov	r21, r23
 63e:	68 2f       	mov	r22, r24
 640:	79 2f       	mov	r23, r25
 642:	cb 01       	movw	r24, r22
 644:	ba 01       	movw	r22, r20
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	40 ea       	ldi	r20, 0xA0	; 160
 64c:	50 e4       	ldi	r21, 0x40	; 64
 64e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
 652:	c6 2f       	mov	r28, r22
 654:	d7 2f       	mov	r29, r23
 656:	18 2f       	mov	r17, r24
 658:	09 2f       	mov	r16, r25
	voltage -= 0.5;
	float temperature = (float)100*voltage;
	
	//transmit(temperature); //enable to transmit to screen
	//send_temperature(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 65a:	60 91 01 01 	lds	r22, 0x0101
 65e:	70 91 02 01 	lds	r23, 0x0102
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 14 04 	call	0x828	; 0x828 <__floatunsisf>
 66a:	6b 01       	movw	r12, r22
 66c:	7c 01       	movw	r14, r24
	uint8_t temp = (uint8_t)reading; //force cast it to an 8 bit integer
	
	//Formula to calculate the temperature 
	float voltage = (float)temp/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V. 
	voltage *= 5;
	voltage -= 0.5;
 66e:	8c 2f       	mov	r24, r28
 670:	9d 2f       	mov	r25, r29
 672:	a1 2f       	mov	r26, r17
 674:	b0 2f       	mov	r27, r16
 676:	bc 01       	movw	r22, r24
 678:	cd 01       	movw	r24, r26
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	5f e3       	ldi	r21, 0x3F	; 63
 682:	0e 94 83 03 	call	0x706	; 0x706 <__subsf3>
	float temperature = (float)100*voltage;
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	48 ec       	ldi	r20, 0xC8	; 200
 68c:	52 e4       	ldi	r21, 0x42	; 66
 68e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__mulsf3>
 692:	9b 01       	movw	r18, r22
 694:	ac 01       	movw	r20, r24
	
	//transmit(temperature); //enable to transmit to screen
	//send_temperature(temperature); //enable to transmit to screen
	averageTemperature += temperature;
 696:	c7 01       	movw	r24, r14
 698:	b6 01       	movw	r22, r12
 69a:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3>
 69e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
 6a2:	dc 01       	movw	r26, r24
 6a4:	cb 01       	movw	r24, r22
 6a6:	90 93 02 01 	sts	0x0102, r25
 6aa:	80 93 01 01 	sts	0x0101, r24
}
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	ff 90       	pop	r15
 6b8:	ef 90       	pop	r14
 6ba:	df 90       	pop	r13
 6bc:	cf 90       	pop	r12
 6be:	08 95       	ret

000006c0 <main>:
	averageTemperature = 0; //reset average temperature.
}

int main()                     
{
	setup(); 
 6c0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <setup>
	uart_init();
 6c4:	0e 94 35 01 	call	0x26a	; 0x26a <uart_init>
	SCH_Init_T1();
 6c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(receiveMessages, 0, 100); //Receive stuff every second
 6cc:	8a e4       	ldi	r24, 0x4A	; 74
 6ce:	92 e0       	ldi	r25, 0x02	; 2
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	44 e6       	ldi	r20, 0x64	; 100
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateTemperature, 0, 1000); //Read temperature every 10 seconds
 6dc:	86 e0       	ldi	r24, 0x06	; 6
 6de:	93 e0       	ldi	r25, 0x03	; 3
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	48 ee       	ldi	r20, 0xE8	; 232
 6e6:	53 e0       	ldi	r21, 0x03	; 3
 6e8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageTemperature, 1000, 6000); //Calculate average every minute. Delay it by 10 seconds to prevent incomplete average measurements.
 6ec:	8f ed       	ldi	r24, 0xDF	; 223
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	68 ee       	ldi	r22, 0xE8	; 232
 6f2:	73 e0       	ldi	r23, 0x03	; 3
 6f4:	40 e7       	ldi	r20, 0x70	; 112
 6f6:	57 e1       	ldi	r21, 0x17	; 23
 6f8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 6fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
	while(1)
	{
		SCH_Dispatch_Tasks();
 700:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 704:	fd cf       	rjmp	.-6      	; 0x700 <main+0x40>

00000706 <__subsf3>:
 706:	50 58       	subi	r21, 0x80	; 128

00000708 <__addsf3>:
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	0e d0       	rcall	.+28     	; 0x72a <__addsf3x>
 70e:	1c c1       	rjmp	.+568    	; 0x948 <__fp_round>
 710:	0d d1       	rcall	.+538    	; 0x92c <__fp_pscA>
 712:	30 f0       	brcs	.+12     	; 0x720 <__addsf3+0x18>
 714:	12 d1       	rcall	.+548    	; 0x93a <__fp_pscB>
 716:	20 f0       	brcs	.+8      	; 0x720 <__addsf3+0x18>
 718:	31 f4       	brne	.+12     	; 0x726 <__addsf3+0x1e>
 71a:	9f 3f       	cpi	r25, 0xFF	; 255
 71c:	11 f4       	brne	.+4      	; 0x722 <__addsf3+0x1a>
 71e:	1e f4       	brtc	.+6      	; 0x726 <__addsf3+0x1e>
 720:	02 c1       	rjmp	.+516    	; 0x926 <__fp_nan>
 722:	0e f4       	brtc	.+2      	; 0x726 <__addsf3+0x1e>
 724:	e0 95       	com	r30
 726:	e7 fb       	bst	r30, 7
 728:	cf c0       	rjmp	.+414    	; 0x8c8 <__fp_inf>

0000072a <__addsf3x>:
 72a:	e9 2f       	mov	r30, r25
 72c:	1e d1       	rcall	.+572    	; 0x96a <__fp_split3>
 72e:	80 f3       	brcs	.-32     	; 0x710 <__addsf3+0x8>
 730:	ba 17       	cp	r27, r26
 732:	62 07       	cpc	r22, r18
 734:	73 07       	cpc	r23, r19
 736:	84 07       	cpc	r24, r20
 738:	95 07       	cpc	r25, r21
 73a:	18 f0       	brcs	.+6      	; 0x742 <__addsf3x+0x18>
 73c:	71 f4       	brne	.+28     	; 0x75a <__addsf3x+0x30>
 73e:	9e f5       	brtc	.+102    	; 0x7a6 <__addsf3x+0x7c>
 740:	4d c1       	rjmp	.+666    	; 0x9dc <__fp_zero>
 742:	0e f4       	brtc	.+2      	; 0x746 <__addsf3x+0x1c>
 744:	e0 95       	com	r30
 746:	0b 2e       	mov	r0, r27
 748:	ba 2f       	mov	r27, r26
 74a:	a0 2d       	mov	r26, r0
 74c:	0b 01       	movw	r0, r22
 74e:	b9 01       	movw	r22, r18
 750:	90 01       	movw	r18, r0
 752:	0c 01       	movw	r0, r24
 754:	ca 01       	movw	r24, r20
 756:	a0 01       	movw	r20, r0
 758:	11 24       	eor	r1, r1
 75a:	ff 27       	eor	r31, r31
 75c:	59 1b       	sub	r21, r25
 75e:	99 f0       	breq	.+38     	; 0x786 <__addsf3x+0x5c>
 760:	59 3f       	cpi	r21, 0xF9	; 249
 762:	50 f4       	brcc	.+20     	; 0x778 <__addsf3x+0x4e>
 764:	50 3e       	cpi	r21, 0xE0	; 224
 766:	68 f1       	brcs	.+90     	; 0x7c2 <__addsf3x+0x98>
 768:	1a 16       	cp	r1, r26
 76a:	f0 40       	sbci	r31, 0x00	; 0
 76c:	a2 2f       	mov	r26, r18
 76e:	23 2f       	mov	r18, r19
 770:	34 2f       	mov	r19, r20
 772:	44 27       	eor	r20, r20
 774:	58 5f       	subi	r21, 0xF8	; 248
 776:	f3 cf       	rjmp	.-26     	; 0x75e <__addsf3x+0x34>
 778:	46 95       	lsr	r20
 77a:	37 95       	ror	r19
 77c:	27 95       	ror	r18
 77e:	a7 95       	ror	r26
 780:	f0 40       	sbci	r31, 0x00	; 0
 782:	53 95       	inc	r21
 784:	c9 f7       	brne	.-14     	; 0x778 <__addsf3x+0x4e>
 786:	7e f4       	brtc	.+30     	; 0x7a6 <__addsf3x+0x7c>
 788:	1f 16       	cp	r1, r31
 78a:	ba 0b       	sbc	r27, r26
 78c:	62 0b       	sbc	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	ba f0       	brmi	.+46     	; 0x7c2 <__addsf3x+0x98>
 794:	91 50       	subi	r25, 0x01	; 1
 796:	a1 f0       	breq	.+40     	; 0x7c0 <__addsf3x+0x96>
 798:	ff 0f       	add	r31, r31
 79a:	bb 1f       	adc	r27, r27
 79c:	66 1f       	adc	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	c2 f7       	brpl	.-16     	; 0x794 <__addsf3x+0x6a>
 7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <__addsf3x+0x98>
 7a6:	ba 0f       	add	r27, r26
 7a8:	62 1f       	adc	r22, r18
 7aa:	73 1f       	adc	r23, r19
 7ac:	84 1f       	adc	r24, r20
 7ae:	48 f4       	brcc	.+18     	; 0x7c2 <__addsf3x+0x98>
 7b0:	87 95       	ror	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9e 3f       	cpi	r25, 0xFE	; 254
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__addsf3x+0x96>
 7be:	b3 cf       	rjmp	.-154    	; 0x726 <__addsf3+0x1e>
 7c0:	93 95       	inc	r25
 7c2:	88 0f       	add	r24, r24
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__addsf3x+0x9e>
 7c6:	99 27       	eor	r25, r25
 7c8:	ee 0f       	add	r30, r30
 7ca:	97 95       	ror	r25
 7cc:	87 95       	ror	r24
 7ce:	08 95       	ret

000007d0 <__fixunssfsi>:
 7d0:	d4 d0       	rcall	.+424    	; 0x97a <__fp_splitA>
 7d2:	88 f0       	brcs	.+34     	; 0x7f6 <__fixunssfsi+0x26>
 7d4:	9f 57       	subi	r25, 0x7F	; 127
 7d6:	90 f0       	brcs	.+36     	; 0x7fc <__fixunssfsi+0x2c>
 7d8:	b9 2f       	mov	r27, r25
 7da:	99 27       	eor	r25, r25
 7dc:	b7 51       	subi	r27, 0x17	; 23
 7de:	a0 f0       	brcs	.+40     	; 0x808 <__fixunssfsi+0x38>
 7e0:	d1 f0       	breq	.+52     	; 0x816 <__fixunssfsi+0x46>
 7e2:	66 0f       	add	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	1a f0       	brmi	.+6      	; 0x7f2 <__fixunssfsi+0x22>
 7ec:	ba 95       	dec	r27
 7ee:	c9 f7       	brne	.-14     	; 0x7e2 <__fixunssfsi+0x12>
 7f0:	12 c0       	rjmp	.+36     	; 0x816 <__fixunssfsi+0x46>
 7f2:	b1 30       	cpi	r27, 0x01	; 1
 7f4:	81 f0       	breq	.+32     	; 0x816 <__fixunssfsi+0x46>
 7f6:	f2 d0       	rcall	.+484    	; 0x9dc <__fp_zero>
 7f8:	b1 e0       	ldi	r27, 0x01	; 1
 7fa:	08 95       	ret
 7fc:	ef c0       	rjmp	.+478    	; 0x9dc <__fp_zero>
 7fe:	67 2f       	mov	r22, r23
 800:	78 2f       	mov	r23, r24
 802:	88 27       	eor	r24, r24
 804:	b8 5f       	subi	r27, 0xF8	; 248
 806:	39 f0       	breq	.+14     	; 0x816 <__fixunssfsi+0x46>
 808:	b9 3f       	cpi	r27, 0xF9	; 249
 80a:	cc f3       	brlt	.-14     	; 0x7fe <__fixunssfsi+0x2e>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b3 95       	inc	r27
 814:	d9 f7       	brne	.-10     	; 0x80c <__fixunssfsi+0x3c>
 816:	3e f4       	brtc	.+14     	; 0x826 <__fixunssfsi+0x56>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__floatunsisf>:
 828:	e8 94       	clt
 82a:	09 c0       	rjmp	.+18     	; 0x83e <__floatsisf+0x12>

0000082c <__floatsisf>:
 82c:	97 fb       	bst	r25, 7
 82e:	3e f4       	brtc	.+14     	; 0x83e <__floatsisf+0x12>
 830:	90 95       	com	r25
 832:	80 95       	com	r24
 834:	70 95       	com	r23
 836:	61 95       	neg	r22
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	99 23       	and	r25, r25
 840:	a9 f0       	breq	.+42     	; 0x86c <__floatsisf+0x40>
 842:	f9 2f       	mov	r31, r25
 844:	96 e9       	ldi	r25, 0x96	; 150
 846:	bb 27       	eor	r27, r27
 848:	93 95       	inc	r25
 84a:	f6 95       	lsr	r31
 84c:	87 95       	ror	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b7 95       	ror	r27
 854:	f1 11       	cpse	r31, r1
 856:	f8 cf       	rjmp	.-16     	; 0x848 <__floatsisf+0x1c>
 858:	fa f4       	brpl	.+62     	; 0x898 <__floatsisf+0x6c>
 85a:	bb 0f       	add	r27, r27
 85c:	11 f4       	brne	.+4      	; 0x862 <__floatsisf+0x36>
 85e:	60 ff       	sbrs	r22, 0
 860:	1b c0       	rjmp	.+54     	; 0x898 <__floatsisf+0x6c>
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	16 c0       	rjmp	.+44     	; 0x898 <__floatsisf+0x6c>
 86c:	88 23       	and	r24, r24
 86e:	11 f0       	breq	.+4      	; 0x874 <__floatsisf+0x48>
 870:	96 e9       	ldi	r25, 0x96	; 150
 872:	11 c0       	rjmp	.+34     	; 0x896 <__floatsisf+0x6a>
 874:	77 23       	and	r23, r23
 876:	21 f0       	breq	.+8      	; 0x880 <__floatsisf+0x54>
 878:	9e e8       	ldi	r25, 0x8E	; 142
 87a:	87 2f       	mov	r24, r23
 87c:	76 2f       	mov	r23, r22
 87e:	05 c0       	rjmp	.+10     	; 0x88a <__floatsisf+0x5e>
 880:	66 23       	and	r22, r22
 882:	71 f0       	breq	.+28     	; 0x8a0 <__floatsisf+0x74>
 884:	96 e8       	ldi	r25, 0x86	; 134
 886:	86 2f       	mov	r24, r22
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	2a f0       	brmi	.+10     	; 0x898 <__floatsisf+0x6c>
 88e:	9a 95       	dec	r25
 890:	66 0f       	add	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	da f7       	brpl	.-10     	; 0x88e <__floatsisf+0x62>
 898:	88 0f       	add	r24, r24
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <floor>:
 8a2:	85 d0       	rcall	.+266    	; 0x9ae <__fp_trunc>
 8a4:	80 f0       	brcs	.+32     	; 0x8c6 <floor+0x24>
 8a6:	9f 37       	cpi	r25, 0x7F	; 127
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <floor+0x18>
 8aa:	91 11       	cpse	r25, r1
 8ac:	0e f0       	brts	.+2      	; 0x8b0 <floor+0xe>
 8ae:	97 c0       	rjmp	.+302    	; 0x9de <__fp_szero>
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	80 e8       	ldi	r24, 0x80	; 128
 8b6:	9f eb       	ldi	r25, 0xBF	; 191
 8b8:	08 95       	ret
 8ba:	26 f4       	brtc	.+8      	; 0x8c4 <floor+0x22>
 8bc:	1b 16       	cp	r1, r27
 8be:	61 1d       	adc	r22, r1
 8c0:	71 1d       	adc	r23, r1
 8c2:	81 1d       	adc	r24, r1
 8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <__fp_mintl>
 8c6:	21 c0       	rjmp	.+66     	; 0x90a <__fp_mpack>

000008c8 <__fp_inf>:
 8c8:	97 f9       	bld	r25, 7
 8ca:	9f 67       	ori	r25, 0x7F	; 127
 8cc:	80 e8       	ldi	r24, 0x80	; 128
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	08 95       	ret

000008d4 <__fp_mintl>:
 8d4:	88 23       	and	r24, r24
 8d6:	71 f4       	brne	.+28     	; 0x8f4 <__fp_mintl+0x20>
 8d8:	77 23       	and	r23, r23
 8da:	21 f0       	breq	.+8      	; 0x8e4 <__fp_mintl+0x10>
 8dc:	98 50       	subi	r25, 0x08	; 8
 8de:	87 2b       	or	r24, r23
 8e0:	76 2f       	mov	r23, r22
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__fp_mintl+0x1e>
 8e4:	66 23       	and	r22, r22
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__fp_mintl+0x18>
 8e8:	99 27       	eor	r25, r25
 8ea:	0d c0       	rjmp	.+26     	; 0x906 <__stack+0x7>
 8ec:	90 51       	subi	r25, 0x10	; 16
 8ee:	86 2b       	or	r24, r22
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	2a f0       	brmi	.+10     	; 0x900 <__stack+0x1>
 8f6:	9a 95       	dec	r25
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	da f7       	brpl	.-10     	; 0x8f6 <__fp_mintl+0x22>
 900:	88 0f       	add	r24, r24
 902:	96 95       	lsr	r25
 904:	87 95       	ror	r24
 906:	97 f9       	bld	r25, 7
 908:	08 95       	ret

0000090a <__fp_mpack>:
 90a:	9f 3f       	cpi	r25, 0xFF	; 255
 90c:	31 f0       	breq	.+12     	; 0x91a <__fp_mpack_finite+0xc>

0000090e <__fp_mpack_finite>:
 90e:	91 50       	subi	r25, 0x01	; 1
 910:	20 f4       	brcc	.+8      	; 0x91a <__fp_mpack_finite+0xc>
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <__fp_nan>:
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	80 ec       	ldi	r24, 0xC0	; 192
 92a:	08 95       	ret

0000092c <__fp_pscA>:
 92c:	00 24       	eor	r0, r0
 92e:	0a 94       	dec	r0
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	18 06       	cpc	r1, r24
 936:	09 06       	cpc	r0, r25
 938:	08 95       	ret

0000093a <__fp_pscB>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	05 06       	cpc	r0, r21
 946:	08 95       	ret

00000948 <__fp_round>:
 948:	09 2e       	mov	r0, r25
 94a:	03 94       	inc	r0
 94c:	00 0c       	add	r0, r0
 94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0xc>
 950:	88 23       	and	r24, r24
 952:	52 f0       	brmi	.+20     	; 0x968 <__fp_round+0x20>
 954:	bb 0f       	add	r27, r27
 956:	40 f4       	brcc	.+16     	; 0x968 <__fp_round+0x20>
 958:	bf 2b       	or	r27, r31
 95a:	11 f4       	brne	.+4      	; 0x960 <__fp_round+0x18>
 95c:	60 ff       	sbrs	r22, 0
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__fp_round+0x20>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__fp_split3>:
 96a:	57 fd       	sbrc	r21, 7
 96c:	90 58       	subi	r25, 0x80	; 128
 96e:	44 0f       	add	r20, r20
 970:	55 1f       	adc	r21, r21
 972:	59 f0       	breq	.+22     	; 0x98a <__fp_splitA+0x10>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	71 f0       	breq	.+28     	; 0x994 <__fp_splitA+0x1a>
 978:	47 95       	ror	r20

0000097a <__fp_splitA>:
 97a:	88 0f       	add	r24, r24
 97c:	97 fb       	bst	r25, 7
 97e:	99 1f       	adc	r25, r25
 980:	61 f0       	breq	.+24     	; 0x99a <__fp_splitA+0x20>
 982:	9f 3f       	cpi	r25, 0xFF	; 255
 984:	79 f0       	breq	.+30     	; 0x9a4 <__fp_splitA+0x2a>
 986:	87 95       	ror	r24
 988:	08 95       	ret
 98a:	12 16       	cp	r1, r18
 98c:	13 06       	cpc	r1, r19
 98e:	14 06       	cpc	r1, r20
 990:	55 1f       	adc	r21, r21
 992:	f2 cf       	rjmp	.-28     	; 0x978 <__fp_split3+0xe>
 994:	46 95       	lsr	r20
 996:	f1 df       	rcall	.-30     	; 0x97a <__fp_splitA>
 998:	08 c0       	rjmp	.+16     	; 0x9aa <__fp_splitA+0x30>
 99a:	16 16       	cp	r1, r22
 99c:	17 06       	cpc	r1, r23
 99e:	18 06       	cpc	r1, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	f1 cf       	rjmp	.-30     	; 0x986 <__fp_splitA+0xc>
 9a4:	86 95       	lsr	r24
 9a6:	71 05       	cpc	r23, r1
 9a8:	61 05       	cpc	r22, r1
 9aa:	08 94       	sec
 9ac:	08 95       	ret

000009ae <__fp_trunc>:
 9ae:	e5 df       	rcall	.-54     	; 0x97a <__fp_splitA>
 9b0:	a0 f0       	brcs	.+40     	; 0x9da <__fp_trunc+0x2c>
 9b2:	be e7       	ldi	r27, 0x7E	; 126
 9b4:	b9 17       	cp	r27, r25
 9b6:	88 f4       	brcc	.+34     	; 0x9da <__fp_trunc+0x2c>
 9b8:	bb 27       	eor	r27, r27
 9ba:	9f 38       	cpi	r25, 0x8F	; 143
 9bc:	60 f4       	brcc	.+24     	; 0x9d6 <__fp_trunc+0x28>
 9be:	16 16       	cp	r1, r22
 9c0:	b1 1d       	adc	r27, r1
 9c2:	67 2f       	mov	r22, r23
 9c4:	78 2f       	mov	r23, r24
 9c6:	88 27       	eor	r24, r24
 9c8:	98 5f       	subi	r25, 0xF8	; 248
 9ca:	f7 cf       	rjmp	.-18     	; 0x9ba <__fp_trunc+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b1 1d       	adc	r27, r1
 9d4:	93 95       	inc	r25
 9d6:	96 39       	cpi	r25, 0x96	; 150
 9d8:	c8 f3       	brcs	.-14     	; 0x9cc <__fp_trunc+0x1e>
 9da:	08 95       	ret

000009dc <__fp_zero>:
 9dc:	e8 94       	clt

000009de <__fp_szero>:
 9de:	bb 27       	eor	r27, r27
 9e0:	66 27       	eor	r22, r22
 9e2:	77 27       	eor	r23, r23
 9e4:	cb 01       	movw	r24, r22
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <__mulsf3>:
 9ea:	0b d0       	rcall	.+22     	; 0xa02 <__mulsf3x>
 9ec:	ad cf       	rjmp	.-166    	; 0x948 <__fp_round>
 9ee:	9e df       	rcall	.-196    	; 0x92c <__fp_pscA>
 9f0:	28 f0       	brcs	.+10     	; 0x9fc <__mulsf3+0x12>
 9f2:	a3 df       	rcall	.-186    	; 0x93a <__fp_pscB>
 9f4:	18 f0       	brcs	.+6      	; 0x9fc <__mulsf3+0x12>
 9f6:	95 23       	and	r25, r21
 9f8:	09 f0       	breq	.+2      	; 0x9fc <__mulsf3+0x12>
 9fa:	66 cf       	rjmp	.-308    	; 0x8c8 <__fp_inf>
 9fc:	94 cf       	rjmp	.-216    	; 0x926 <__fp_nan>
 9fe:	11 24       	eor	r1, r1
 a00:	ee cf       	rjmp	.-36     	; 0x9de <__fp_szero>

00000a02 <__mulsf3x>:
 a02:	b3 df       	rcall	.-154    	; 0x96a <__fp_split3>
 a04:	a0 f3       	brcs	.-24     	; 0x9ee <__mulsf3+0x4>

00000a06 <__mulsf3_pse>:
 a06:	95 9f       	mul	r25, r21
 a08:	d1 f3       	breq	.-12     	; 0x9fe <__mulsf3+0x14>
 a0a:	95 0f       	add	r25, r21
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	55 1f       	adc	r21, r21
 a10:	62 9f       	mul	r22, r18
 a12:	f0 01       	movw	r30, r0
 a14:	72 9f       	mul	r23, r18
 a16:	bb 27       	eor	r27, r27
 a18:	f0 0d       	add	r31, r0
 a1a:	b1 1d       	adc	r27, r1
 a1c:	63 9f       	mul	r22, r19
 a1e:	aa 27       	eor	r26, r26
 a20:	f0 0d       	add	r31, r0
 a22:	b1 1d       	adc	r27, r1
 a24:	aa 1f       	adc	r26, r26
 a26:	64 9f       	mul	r22, r20
 a28:	66 27       	eor	r22, r22
 a2a:	b0 0d       	add	r27, r0
 a2c:	a1 1d       	adc	r26, r1
 a2e:	66 1f       	adc	r22, r22
 a30:	82 9f       	mul	r24, r18
 a32:	22 27       	eor	r18, r18
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	62 1f       	adc	r22, r18
 a3a:	73 9f       	mul	r23, r19
 a3c:	b0 0d       	add	r27, r0
 a3e:	a1 1d       	adc	r26, r1
 a40:	62 1f       	adc	r22, r18
 a42:	83 9f       	mul	r24, r19
 a44:	a0 0d       	add	r26, r0
 a46:	61 1d       	adc	r22, r1
 a48:	22 1f       	adc	r18, r18
 a4a:	74 9f       	mul	r23, r20
 a4c:	33 27       	eor	r19, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	23 1f       	adc	r18, r19
 a54:	84 9f       	mul	r24, r20
 a56:	60 0d       	add	r22, r0
 a58:	21 1d       	adc	r18, r1
 a5a:	82 2f       	mov	r24, r18
 a5c:	76 2f       	mov	r23, r22
 a5e:	6a 2f       	mov	r22, r26
 a60:	11 24       	eor	r1, r1
 a62:	9f 57       	subi	r25, 0x7F	; 127
 a64:	50 40       	sbci	r21, 0x00	; 0
 a66:	8a f0       	brmi	.+34     	; 0xa8a <__mulsf3_pse+0x84>
 a68:	e1 f0       	breq	.+56     	; 0xaa2 <__mulsf3_pse+0x9c>
 a6a:	88 23       	and	r24, r24
 a6c:	4a f0       	brmi	.+18     	; 0xa80 <__mulsf3_pse+0x7a>
 a6e:	ee 0f       	add	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	bb 1f       	adc	r27, r27
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	a9 f7       	brne	.-22     	; 0xa6a <__mulsf3_pse+0x64>
 a80:	9e 3f       	cpi	r25, 0xFE	; 254
 a82:	51 05       	cpc	r21, r1
 a84:	70 f0       	brcs	.+28     	; 0xaa2 <__mulsf3_pse+0x9c>
 a86:	20 cf       	rjmp	.-448    	; 0x8c8 <__fp_inf>
 a88:	aa cf       	rjmp	.-172    	; 0x9de <__fp_szero>
 a8a:	5f 3f       	cpi	r21, 0xFF	; 255
 a8c:	ec f3       	brlt	.-6      	; 0xa88 <__mulsf3_pse+0x82>
 a8e:	98 3e       	cpi	r25, 0xE8	; 232
 a90:	dc f3       	brlt	.-10     	; 0xa88 <__mulsf3_pse+0x82>
 a92:	86 95       	lsr	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f7 95       	ror	r31
 a9c:	e7 95       	ror	r30
 a9e:	9f 5f       	subi	r25, 0xFF	; 255
 aa0:	c1 f7       	brne	.-16     	; 0xa92 <__mulsf3_pse+0x8c>
 aa2:	fe 2b       	or	r31, r30
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret

00000ab0 <__udivmodhi4>:
 ab0:	aa 1b       	sub	r26, r26
 ab2:	bb 1b       	sub	r27, r27
 ab4:	51 e1       	ldi	r21, 0x11	; 17
 ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__udivmodhi4_ep>

00000ab8 <__udivmodhi4_loop>:
 ab8:	aa 1f       	adc	r26, r26
 aba:	bb 1f       	adc	r27, r27
 abc:	a6 17       	cp	r26, r22
 abe:	b7 07       	cpc	r27, r23
 ac0:	10 f0       	brcs	.+4      	; 0xac6 <__udivmodhi4_ep>
 ac2:	a6 1b       	sub	r26, r22
 ac4:	b7 0b       	sbc	r27, r23

00000ac6 <__udivmodhi4_ep>:
 ac6:	88 1f       	adc	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	5a 95       	dec	r21
 acc:	a9 f7       	brne	.-22     	; 0xab8 <__udivmodhi4_loop>
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	bc 01       	movw	r22, r24
 ad4:	cd 01       	movw	r24, r26
 ad6:	08 95       	ret

00000ad8 <__divmodhi4>:
 ad8:	97 fb       	bst	r25, 7
 ada:	09 2e       	mov	r0, r25
 adc:	07 26       	eor	r0, r23
 ade:	0a d0       	rcall	.+20     	; 0xaf4 <__divmodhi4_neg1>
 ae0:	77 fd       	sbrc	r23, 7
 ae2:	04 d0       	rcall	.+8      	; 0xaec <__divmodhi4_neg2>
 ae4:	e5 df       	rcall	.-54     	; 0xab0 <__udivmodhi4>
 ae6:	06 d0       	rcall	.+12     	; 0xaf4 <__divmodhi4_neg1>
 ae8:	00 20       	and	r0, r0
 aea:	1a f4       	brpl	.+6      	; 0xaf2 <__divmodhi4_exit>

00000aec <__divmodhi4_neg2>:
 aec:	70 95       	com	r23
 aee:	61 95       	neg	r22
 af0:	7f 4f       	sbci	r23, 0xFF	; 255

00000af2 <__divmodhi4_exit>:
 af2:	08 95       	ret

00000af4 <__divmodhi4_neg1>:
 af4:	f6 f7       	brtc	.-4      	; 0xaf2 <__divmodhi4_exit>
 af6:	90 95       	com	r25
 af8:	81 95       	neg	r24
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	08 95       	ret

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
