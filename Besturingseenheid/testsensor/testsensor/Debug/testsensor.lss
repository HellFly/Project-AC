
testsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f4c  00000fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800108  00800108  00000fe8  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007cf  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2f  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fa  00000000  00000000  00004d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a5  00000000  00000000  00005171  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00005818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051c  00000000  00000000  00005ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a59  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3a       	cpi	r26, 0xA9	; 169
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 05 	call	0xa02	; 0xa02 <main>
  9e:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	dc 01       	movw	r26, r24
  b0:	eb 01       	movw	r28, r22
  b2:	8a 01       	movw	r16, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b4:	80 91 10 01 	lds	r24, 0x0110
  b8:	90 91 11 01 	lds	r25, 0x0111
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e7 e1       	ldi	r30, 0x17	; 23
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c8:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	20 31       	cpi	r18, 0x10	; 16
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
   {
      Index++;
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  e6:	8f 30       	cpi	r24, 0x0F	; 15
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  f0:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	e0 5f       	subi	r30, 0xF0	; 240
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	b1 83       	std	Z+1, r27	; 0x01
 10c:	a0 83       	st	Z, r26
   SCH_tasks_G[Index].Delay =DELAY;
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 116:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
 118:	84 2f       	mov	r24, r20
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	e0 5f       	subi	r30, 0xF0	; 240
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 148:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 15c:	c6 e1       	ldi	r28, 0x16	; 22
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 184:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	1f 30       	cpi	r17, 0x0F	; 15
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 1bc:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 1be:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	cf 30       	cpi	r28, 0x0F	; 15
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1e8:	78 94       	sei
}
 1ea:	08 95       	ret

000001ec <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e0 e1       	ldi	r30, 0x10	; 16
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
 212:	29 e7       	ldi	r18, 0x79	; 121
 214:	31 e0       	ldi	r19, 0x01	; 1
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <turnOnYELLOW>:
void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
}

void turnOnYELLOW(){
	PORTB |= _BV(PORTB3);
 26a:	2b 9a       	sbi	0x05, 3	; 5
}
 26c:	08 95       	ret

0000026e <turnOffYELLOW>:

void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
 26e:	2b 98       	cbi	0x05, 3	; 5
}
 270:	08 95       	ret

00000272 <lowerScreen>:

//********FUNCTIONS TO CONTROL THE SCREEN*************

//Actually physically lowers the screen
void lowerScreen(){
	distance += SCROLLSPEED;
 272:	80 91 09 01 	lds	r24, 0x0109
 276:	90 91 0a 01 	lds	r25, 0x010A
 27a:	0a 96       	adiw	r24, 0x0a	; 10
 27c:	90 93 0a 01 	sts	0x010A, r25
 280:	80 93 09 01 	sts	0x0109, r24
}
 284:	08 95       	ret

00000286 <upScreen>:

//Actually physically rises the screen
void upScreen(){
	distance -= SCROLLSPEED;
 286:	80 91 09 01 	lds	r24, 0x0109
 28a:	90 91 0a 01 	lds	r25, 0x010A
 28e:	0a 97       	sbiw	r24, 0x0a	; 10
 290:	90 93 0a 01 	sts	0x010A, r25
 294:	80 93 09 01 	sts	0x0109, r24
}
 298:	08 95       	ret

0000029a <setupLeds>:
unsigned char upscreen;


//**********FUNCTIONS TO CONTROL LEDS*****************
void setupLeds(){
	DDRB |= _BV(DDB5); //red led pin 5
 29a:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB3); //yellow led pin 3
 29c:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB1); //green led pin 1
 29e:	21 9a       	sbi	0x04, 1	; 4
}
 2a0:	08 95       	ret

000002a2 <turnOnRED>:

void turnOnRED(){
	 PORTB |= _BV(PORTB5);
 2a2:	2d 9a       	sbi	0x05, 5	; 5
}
 2a4:	08 95       	ret

000002a6 <turnOffRED>:

void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
 2a6:	2d 98       	cbi	0x05, 5	; 5
}
 2a8:	08 95       	ret

000002aa <turnOnGREEN>:
void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
}

void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
 2aa:	29 9a       	sbi	0x05, 1	; 5
}
 2ac:	08 95       	ret

000002ae <turnOffGREEN>:

void turnOffGREEN(){
	PORTB &= ~_BV(PORTB1);
 2ae:	29 98       	cbi	0x05, 1	; 5
}
 2b0:	08 95       	ret

000002b2 <turnOffAll>:

void turnOffAll(){
	turnOffYELLOW();
 2b2:	0e 94 37 01 	call	0x26e	; 0x26e <turnOffYELLOW>
	turnOffRED();
 2b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOffRED>
	turnOffGREEN();
 2ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOffGREEN>
}
 2be:	08 95       	ret

000002c0 <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
 2c0:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 2c4:	83 e3       	ldi	r24, 0x33	; 51
 2c6:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 2ca:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter and receiver
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	80 93 c2 00 	sts	0x00C2, r24
}
 2da:	08 95       	ret

000002dc <transmit>:
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty

	loop_until_bit_is_set(UCSR0A, UDRE0);
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <transmit+0x4>
	UDR0 = data;
 2e6:	80 93 c6 00 	sts	0x00C6, r24
}
 2ea:	08 95       	ret

000002ec <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
	while (*c != -1) {
 2f2:	88 81       	ld	r24, Y
 2f4:	99 81       	ldd	r25, Y+1	; 0x01
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	8f 3f       	cpi	r24, 0xFF	; 255
 2fa:	92 07       	cpc	r25, r18
 2fc:	49 f0       	breq	.+18     	; 0x310 <transmit_string+0x24>
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 2fe:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 300:	0e 94 6e 01 	call	0x2dc	; 0x2dc <transmit>
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
 304:	89 91       	ld	r24, Y+
 306:	99 91       	ld	r25, Y+
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	8f 3f       	cpi	r24, 0xFF	; 255
 30c:	92 07       	cpc	r25, r18
 30e:	c1 f7       	brne	.-16     	; 0x300 <transmit_string+0x14>
		transmit(*c);
		c++;
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <transmit_max_temp>:


void transmit_max_temp(){
	transmit_string(MAX_TEMP);
 316:	80 91 01 01 	lds	r24, 0x0101
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 320:	08 95       	ret

00000322 <receive>:
// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	99 23       	and	r25, r25
 32a:	ec f7       	brge	.-6      	; 0x326 <receive+0x4>
	return response;
}
 32c:	08 95       	ret

0000032e <receive_non_blocking>:

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & (1<<RXC0)) { // is the received data bit set in the UCSR0A register?
 32e:	80 91 c0 00 	lds	r24, 0x00C0
 332:	88 23       	and	r24, r24
 334:	24 f4       	brge	.+8      	; 0x33e <receive_non_blocking+0x10>
	return (int) UDR0;
 336:	80 91 c6 00 	lds	r24, 0x00C6
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	08 95       	ret
}
return -1;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f ef       	ldi	r25, 0xFF	; 255
}
 342:	08 95       	ret

00000344 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	28 97       	sbiw	r28, 0x08	; 8
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	8c 01       	movw	r16, r24
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
 35e:	99 23       	and	r25, r25
 360:	cc f0       	brlt	.+50     	; 0x394 <send_light+0x50>
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
 362:	bc 01       	movw	r22, r24
 364:	99 23       	and	r25, r25
 366:	14 f4       	brge	.+4      	; 0x36c <send_light+0x28>
 368:	61 50       	subi	r22, 0x01	; 1
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	67 2f       	mov	r22, r23
 36e:	77 0f       	add	r23, r23
 370:	77 0b       	sbc	r23, r23
 372:	88 27       	eor	r24, r24
 374:	77 fd       	sbrc	r23, 7
 376:	80 95       	com	r24
 378:	98 2f       	mov	r25, r24
 37a:	0e 94 3b 06 	call	0xc76	; 0xc76 <__floatsisf>
 37e:	0e 94 76 06 	call	0xcec	; 0xcec <floor>
 382:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fixunssfsi>
 386:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 388:	c8 01       	movw	r24, r16
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	71 e0       	ldi	r23, 0x01	; 1
 38e:	0e 94 91 07 	call	0xf22	; 0xf22 <__divmodhi4>
 392:	02 c0       	rjmp	.+4      	; 0x398 <send_light+0x54>
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
		val1 = 0;
		val2 = 0;
 394:	80 e0       	ldi	r24, 0x00	; 0
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
		val1 = 0;
 396:	40 e0       	ldi	r20, 0x00	; 0
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	3a 83       	std	Y+2, r19	; 0x02
 39e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 3a0:	4b 83       	std	Y+3, r20	; 0x03
 3a2:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 3a4:	8d 83       	std	Y+5, r24	; 0x05
 3a6:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	98 87       	std	Y+8, r25	; 0x08
 3ae:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 3b8:	28 96       	adiw	r28, 0x08	; 8
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <send_temperature>:

// Sends the temperature via UART
void send_temperature(int temp) {
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <send_temperature+0x6>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <send_temperature+0x8>
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <send_temperature+0xa>
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 3dc:	80 58       	subi	r24, 0x80	; 128
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;

	if (temp < 0) {
 3e0:	2a f0       	brmi	.+10     	; 0x3ec <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 3e2:	8f 3f       	cpi	r24, 0xFF	; 255
 3e4:	91 05       	cpc	r25, r1
 3e6:	29 f0       	breq	.+10     	; 0x3f2 <send_temperature+0x24>
 3e8:	24 f0       	brlt	.+8      	; 0x3f2 <send_temperature+0x24>
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <send_temperature+0x22>
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;

	if (temp < 0) {
		val = 0;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
	else {
		val = (uint8_t)temp;
	}

	int buffer[3];
	buffer[0] = 2;
 3f2:	22 e0       	ldi	r18, 0x02	; 2
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3a 83       	std	Y+2, r19	; 0x02
 3f8:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 3fa:	8b 83       	std	Y+3, r24	; 0x03
 3fc:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	9e 83       	std	Y+6, r25	; 0x06
 404:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 40e:	26 96       	adiw	r28, 0x06	; 6
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <send_blinds_status>:

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t status) {
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	28 97       	sbiw	r28, 0x08	; 8
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
	if (status > 2) {
		status = 2;
	}
	int buffer[4];
	buffer[0] = 3;
 434:	23 e0       	ldi	r18, 0x03	; 3
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	3a 83       	std	Y+2, r19	; 0x02
 43a:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 43c:	1c 82       	std	Y+4, r1	; 0x04
 43e:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	08 f0       	brcs	.+2      	; 0x446 <send_blinds_status+0x26>
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	8d 83       	std	Y+5, r24	; 0x05
 448:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	98 87       	std	Y+8, r25	; 0x08
 450:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 45a:	28 96       	adiw	r28, 0x08	; 8
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <checkDistance>:
	averageLight = 0;
}

//Check to see if we are finished scrolling
void checkDistance(){
	if(distance <= OPEN_DISTANCE && instruction == SCROLLUP && screen == SCROLLING){ 
 46c:	80 91 09 01 	lds	r24, 0x0109
 470:	90 91 0a 01 	lds	r25, 0x010A
 474:	20 91 02 01 	lds	r18, 0x0102
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	28 17       	cp	r18, r24
 47c:	39 07       	cpc	r19, r25
 47e:	38 f1       	brcs	.+78     	; 0x4ce <checkDistance+0x62>
 480:	20 91 00 01 	lds	r18, 0x0100
 484:	22 30       	cpi	r18, 0x02	; 2
 486:	19 f5       	brne	.+70     	; 0x4ce <checkDistance+0x62>
 488:	20 91 0b 01 	lds	r18, 0x010B
 48c:	21 30       	cpi	r18, 0x01	; 1
 48e:	f9 f4       	brne	.+62     	; 0x4ce <checkDistance+0x62>
		SCH_Delete_Task(upscreen);
 490:	80 91 a2 01 	lds	r24, 0x01A2
 494:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 498:	80 91 a3 01 	lds	r24, 0x01A3
 49c:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 4a0:	80 91 a8 01 	lds	r24, 0x01A8
 4a4:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		distance = OPEN_DISTANCE;
 4a8:	80 91 02 01 	lds	r24, 0x0102
 4ac:	80 93 09 01 	sts	0x0109, r24
 4b0:	10 92 0a 01 	sts	0x010A, r1
		screen = UP;
 4b4:	10 92 0b 01 	sts	0x010B, r1
		instruction = NEUTRAL;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 4be:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnGREEN();
 4c2:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
		send_blinds_status(1);
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 10 02 	call	0x420	; 0x420 <send_blinds_status>
 4cc:	08 95       	ret
	} else if(distance >= CLOSED_DISTANCE && instruction == SCROLLDOWN && screen == SCROLLING){
 4ce:	20 91 03 01 	lds	r18, 0x0103
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	82 17       	cp	r24, r18
 4d6:	93 07       	cpc	r25, r19
 4d8:	38 f1       	brcs	.+78     	; 0x528 <checkDistance+0xbc>
 4da:	80 91 00 01 	lds	r24, 0x0100
 4de:	88 23       	and	r24, r24
 4e0:	19 f5       	brne	.+70     	; 0x528 <checkDistance+0xbc>
 4e2:	80 91 0b 01 	lds	r24, 0x010B
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	f9 f4       	brne	.+62     	; 0x528 <checkDistance+0xbc>
		SCH_Delete_Task(lowerscreen);
 4ea:	80 91 a5 01 	lds	r24, 0x01A5
 4ee:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 4f2:	80 91 a3 01 	lds	r24, 0x01A3
 4f6:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 4fa:	80 91 a8 01 	lds	r24, 0x01A8
 4fe:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		distance = CLOSED_DISTANCE;
 502:	80 91 03 01 	lds	r24, 0x0103
 506:	80 93 09 01 	sts	0x0109, r24
 50a:	10 92 0a 01 	sts	0x010A, r1
		screen = DOWN;
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	80 93 0b 01 	sts	0x010B, r24
		instruction = NEUTRAL;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 51a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnRED();
 51e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
		send_blinds_status(0);
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 10 02 	call	0x420	; 0x420 <send_blinds_status>
 528:	08 95       	ret

0000052a <ScrollUp>:
}

//Set instruction to SCROLLUP, scroll the screen, and light correct leds
void ScrollUp()
{
	if(screen == DOWN && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll up if it is DOWN and hasnt received other instruction before
 52a:	80 91 0b 01 	lds	r24, 0x010B
 52e:	82 30       	cpi	r24, 0x02	; 2
 530:	79 f5       	brne	.+94     	; 0x590 <ScrollUp+0x66>
 532:	80 91 00 01 	lds	r24, 0x0100
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	59 f5       	brne	.+86     	; 0x590 <ScrollUp+0x66>
		instruction = SCROLLUP;
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	80 93 00 01 	sts	0x0100, r24
		screen = SCROLLING;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 0b 01 	sts	0x010B, r24
		send_blinds_status(2);
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 10 02 	call	0x420	; 0x420 <send_blinds_status>
		turnOffAll();
 54c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		upscreen = SCH_Add_Task(upScreen, 5, 100);
 550:	83 e4       	ldi	r24, 0x43	; 67
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	65 e0       	ldi	r22, 0x05	; 5
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	44 e6       	ldi	r20, 0x64	; 100
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 560:	80 93 a2 01 	sts	0x01A2, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
 564:	85 e3       	ldi	r24, 0x35	; 53
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	66 e0       	ldi	r22, 0x06	; 6
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	44 e6       	ldi	r20, 0x64	; 100
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 574:	80 93 a3 01 	sts	0x01A3, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 56, 100);
 578:	87 e3       	ldi	r24, 0x37	; 55
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	68 e3       	ldi	r22, 0x38	; 56
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	44 e6       	ldi	r20, 0x64	; 100
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 588:	80 93 a8 01 	sts	0x01A8, r24
		turnOnGREEN();
 58c:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
 590:	08 95       	ret

00000592 <ScrollDown>:
}

//Set instruction to SCROLLDOWN, scroll the screen and light correct leds
void ScrollDown()
{
	if(screen == UP && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll down if it is UP and hasnt received other instruction before
 592:	80 91 0b 01 	lds	r24, 0x010B
 596:	88 23       	and	r24, r24
 598:	69 f5       	brne	.+90     	; 0x5f4 <ScrollDown+0x62>
 59a:	80 91 00 01 	lds	r24, 0x0100
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	49 f5       	brne	.+82     	; 0x5f4 <ScrollDown+0x62>
		instruction = SCROLLDOWN;
 5a2:	10 92 00 01 	sts	0x0100, r1
		screen = SCROLLING;
 5a6:	80 93 0b 01 	sts	0x010B, r24
		send_blinds_status(2);
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	0e 94 10 02 	call	0x420	; 0x420 <send_blinds_status>
		turnOffAll();
 5b0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		lowerscreen = SCH_Add_Task(lowerScreen, 5, 100);
 5b4:	89 e3       	ldi	r24, 0x39	; 57
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	65 e0       	ldi	r22, 0x05	; 5
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	44 e6       	ldi	r20, 0x64	; 100
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5c4:	80 93 a5 01 	sts	0x01A5, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
 5c8:	85 e3       	ldi	r24, 0x35	; 53
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	66 e0       	ldi	r22, 0x06	; 6
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	44 e6       	ldi	r20, 0x64	; 100
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5d8:	80 93 a3 01 	sts	0x01A3, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 56, 100);
 5dc:	87 e3       	ldi	r24, 0x37	; 55
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	68 e3       	ldi	r22, 0x38	; 56
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	44 e6       	ldi	r20, 0x64	; 100
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5ec:	80 93 a8 01 	sts	0x01A8, r24
		turnOnRED();
 5f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
 5f4:	08 95       	ret

000005f6 <calculateAverageLight>:


//This function is used to calculate the average temperature.
void calculateAverageLight()
{
	averageLight /= 5; //calculate average from 5 measured values
 5f6:	80 91 0c 01 	lds	r24, 0x010C
 5fa:	90 91 0d 01 	lds	r25, 0x010D
 5fe:	65 e0       	ldi	r22, 0x05	; 5
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodhi4>
 606:	86 2f       	mov	r24, r22
 608:	97 2f       	mov	r25, r23
 60a:	60 93 0c 01 	sts	0x010C, r22
 60e:	70 93 0d 01 	sts	0x010D, r23
	if(averageLight >= MAX_LIGHT){
 612:	20 91 05 01 	lds	r18, 0x0105
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	82 17       	cp	r24, r18
 61a:	93 07       	cpc	r25, r19
 61c:	18 f0       	brcs	.+6      	; 0x624 <calculateAverageLight+0x2e>
		ScrollDown();
 61e:	0e 94 c9 02 	call	0x592	; 0x592 <ScrollDown>
 622:	08 c0       	rjmp	.+16     	; 0x634 <calculateAverageLight+0x3e>
	} else if (averageLight <= MIN_LIGHT){
 624:	20 91 06 01 	lds	r18, 0x0106
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	10 f0       	brcs	.+4      	; 0x634 <calculateAverageLight+0x3e>
		ScrollUp();
 630:	0e 94 95 02 	call	0x52a	; 0x52a <ScrollUp>
	}
	send_light((uint8_t)averageLight);
 634:	80 91 0c 01 	lds	r24, 0x010C
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 a2 01 	call	0x344	; 0x344 <send_light>
	averageLight = 0;
 63e:	10 92 0d 01 	sts	0x010D, r1
 642:	10 92 0c 01 	sts	0x010C, r1
}
 646:	08 95       	ret

00000648 <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 5; //calculate average from 5 values
 648:	80 91 0e 01 	lds	r24, 0x010E
 64c:	90 91 0f 01 	lds	r25, 0x010F
 650:	65 e0       	ldi	r22, 0x05	; 5
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodhi4>
 658:	86 2f       	mov	r24, r22
 65a:	97 2f       	mov	r25, r23
 65c:	60 93 0e 01 	sts	0x010E, r22
 660:	70 93 0f 01 	sts	0x010F, r23
	if(averageTemperature >= MAX_TEMP){
 664:	20 91 01 01 	lds	r18, 0x0101
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	82 17       	cp	r24, r18
 66c:	93 07       	cpc	r25, r19
 66e:	18 f0       	brcs	.+6      	; 0x676 <calculateAverageTemperature+0x2e>
		ScrollDown();
 670:	0e 94 c9 02 	call	0x592	; 0x592 <ScrollDown>
 674:	08 c0       	rjmp	.+16     	; 0x686 <calculateAverageTemperature+0x3e>
	} else if (averageTemperature <= MIN_TEMP){
 676:	20 91 04 01 	lds	r18, 0x0104
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	28 17       	cp	r18, r24
 67e:	39 07       	cpc	r19, r25
 680:	10 f0       	brcs	.+4      	; 0x686 <calculateAverageTemperature+0x3e>
		ScrollUp();
 682:	0e 94 95 02 	call	0x52a	; 0x52a <ScrollUp>
	}
	send_temperature(averageTemperature);
 686:	80 91 0e 01 	lds	r24, 0x010E
 68a:	90 91 0f 01 	lds	r25, 0x010F
 68e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <send_temperature>
	averageTemperature = 0;
 692:	10 92 0f 01 	sts	0x010F, r1
 696:	10 92 0e 01 	sts	0x010E, r1
}
 69a:	08 95       	ret

0000069c <reset_buffer>:
}

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
 69c:	ea e7       	ldi	r30, 0x7A	; 122
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	2a ec       	ldi	r18, 0xCA	; 202
 6a2:	31 e0       	ldi	r19, 0x01	; 1
	
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	81 93       	st	Z+, r24
 6aa:	91 93       	st	Z+, r25
// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
	
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
 6ac:	e2 17       	cp	r30, r18
 6ae:	f3 07       	cpc	r31, r19
 6b0:	d9 f7       	brne	.-10     	; 0x6a8 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 6b2:	08 95       	ret

000006b4 <add_to_buffer>:

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 6b4:	20 91 7a 01 	lds	r18, 0x017A
 6b8:	30 91 7b 01 	lds	r19, 0x017B
 6bc:	9f ef       	ldi	r25, 0xFF	; 255
 6be:	2f 3f       	cpi	r18, 0xFF	; 255
 6c0:	39 07       	cpc	r19, r25
 6c2:	91 f0       	breq	.+36     	; 0x6e8 <add_to_buffer+0x34>
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
 6c4:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 6c6:	4a e7       	ldi	r20, 0x7A	; 122
 6c8:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 6cc:	29 2f       	mov	r18, r25
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	f9 01       	movw	r30, r18
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	e4 0f       	add	r30, r20
 6d8:	f5 1f       	adc	r31, r21
 6da:	60 81       	ld	r22, Z
 6dc:	71 81       	ldd	r23, Z+1	; 0x01
 6de:	ef ef       	ldi	r30, 0xFF	; 255
 6e0:	6f 3f       	cpi	r22, 0xFF	; 255
 6e2:	7e 07       	cpc	r23, r30
 6e4:	91 f7       	brne	.-28     	; 0x6ca <add_to_buffer+0x16>
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <add_to_buffer+0x38>
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 6ec:	f9 01       	movw	r30, r18
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	e6 58       	subi	r30, 0x86	; 134
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	80 83       	st	Z, r24
 6f8:	11 82       	std	Z+1, r1	; 0x01
}
 6fa:	08 95       	ret

000006fc <receiveMessages>:

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	if (buffer_reset != 123) {
 6fc:	80 91 08 01 	lds	r24, 0x0108
 700:	8b 37       	cpi	r24, 0x7B	; 123
 702:	29 f0       	breq	.+10     	; 0x70e <receiveMessages+0x12>
		reset_buffer();
 704:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
		buffer_reset = 123;
 708:	8b e7       	ldi	r24, 0x7B	; 123
 70a:	80 93 08 01 	sts	0x0108, r24
	}
	int b = receive_non_blocking();
 70e:	0e 94 97 01 	call	0x32e	; 0x32e <receive_non_blocking>
	while (b != -1) {
 712:	2f ef       	ldi	r18, 0xFF	; 255
 714:	8f 3f       	cpi	r24, 0xFF	; 255
 716:	92 07       	cpc	r25, r18
 718:	41 f0       	breq	.+16     	; 0x72a <receiveMessages+0x2e>
		add_to_buffer((uint8_t) b);
 71a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <add_to_buffer>
		b = receive_non_blocking();
 71e:	0e 94 97 01 	call	0x32e	; 0x32e <receive_non_blocking>
	if (buffer_reset != 123) {
		reset_buffer();
		buffer_reset = 123;
	}
	int b = receive_non_blocking();
	while (b != -1) {
 722:	2f ef       	ldi	r18, 0xFF	; 255
 724:	8f 3f       	cpi	r24, 0xFF	; 255
 726:	92 07       	cpc	r25, r18
 728:	c1 f7       	brne	.-16     	; 0x71a <receiveMessages+0x1e>
		add_to_buffer((uint8_t) b);
		b = receive_non_blocking();
	}

	int c = receive_buffer[0];
 72a:	20 91 7a 01 	lds	r18, 0x017A
 72e:	30 91 7b 01 	lds	r19, 0x017B
	int p1 = receive_buffer[1];
 732:	40 91 7c 01 	lds	r20, 0x017C
 736:	50 91 7d 01 	lds	r21, 0x017D
	int p2 = receive_buffer[2];
 73a:	80 91 7e 01 	lds	r24, 0x017E
 73e:	90 91 7f 01 	lds	r25, 0x017F
	int p3 = receive_buffer[3];

	if (c == 10) { // Open blinds
 742:	2a 30       	cpi	r18, 0x0A	; 10
 744:	31 05       	cpc	r19, r1
 746:	81 f4       	brne	.+32     	; 0x768 <receiveMessages+0x6c>
		if (p1 == 1) {
 748:	41 30       	cpi	r20, 0x01	; 1
 74a:	51 05       	cpc	r21, r1
 74c:	29 f4       	brne	.+10     	; 0x758 <receiveMessages+0x5c>
			// OPEN THE BLINDS
			// Do stuff here
			ScrollUp();
 74e:	0e 94 95 02 	call	0x52a	; 0x52a <ScrollUp>
			
			// End do stuff
			reset_buffer();
 752:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 756:	08 95       	ret
		}
		else if (p1 != -1) {
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	4f 3f       	cpi	r20, 0xFF	; 255
 75c:	58 07       	cpc	r21, r24
 75e:	09 f4       	brne	.+2      	; 0x762 <receiveMessages+0x66>
 760:	96 c0       	rjmp	.+300    	; 0x88e <receiveMessages+0x192>
			reset_buffer();
 762:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 766:	08 95       	ret
		}
	}
	else if (c == 11) { // Close blinds
 768:	2b 30       	cpi	r18, 0x0B	; 11
 76a:	31 05       	cpc	r19, r1
 76c:	81 f4       	brne	.+32     	; 0x78e <receiveMessages+0x92>
		if (p1 == 1) {
 76e:	41 30       	cpi	r20, 0x01	; 1
 770:	51 05       	cpc	r21, r1
 772:	29 f4       	brne	.+10     	; 0x77e <receiveMessages+0x82>
			// CLOSE THE BLINDS
			// Do stuff here
			ScrollDown();
 774:	0e 94 c9 02 	call	0x592	; 0x592 <ScrollDown>
			// End do stuff
			reset_buffer();
 778:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 77c:	08 95       	ret
		}
		else if (p1 != -1) {
 77e:	2f ef       	ldi	r18, 0xFF	; 255
 780:	4f 3f       	cpi	r20, 0xFF	; 255
 782:	52 07       	cpc	r21, r18
 784:	09 f4       	brne	.+2      	; 0x788 <receiveMessages+0x8c>
 786:	83 c0       	rjmp	.+262    	; 0x88e <receiveMessages+0x192>
			reset_buffer();
 788:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 78c:	08 95       	ret
		}
	}
	else if (c == 20) { // Set blinds open distance
 78e:	24 31       	cpi	r18, 0x14	; 20
 790:	31 05       	cpc	r19, r1
 792:	e1 f4       	brne	.+56     	; 0x7cc <receiveMessages+0xd0>
		if (p1 != -1 && p2 != -1) {
 794:	2f ef       	ldi	r18, 0xFF	; 255
 796:	4f 3f       	cpi	r20, 0xFF	; 255
 798:	52 07       	cpc	r21, r18
 79a:	09 f4       	brne	.+2      	; 0x79e <receiveMessages+0xa2>
 79c:	78 c0       	rjmp	.+240    	; 0x88e <receiveMessages+0x192>
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	8f 3f       	cpi	r24, 0xFF	; 255
 7a2:	92 07       	cpc	r25, r18
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <receiveMessages+0xac>
 7a6:	73 c0       	rjmp	.+230    	; 0x88e <receiveMessages+0x192>
			int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
 7a8:	54 2f       	mov	r21, r20
 7aa:	44 27       	eor	r20, r20
 7ac:	84 0f       	add	r24, r20
 7ae:	95 1f       	adc	r25, r21
			// Do stuff here
			OPEN_DISTANCE = blinds_open_distance;
 7b0:	98 2f       	mov	r25, r24
 7b2:	80 93 02 01 	sts	0x0102, r24
			if(screen == UP){
 7b6:	80 91 0b 01 	lds	r24, 0x010B
 7ba:	88 23       	and	r24, r24
 7bc:	21 f4       	brne	.+8      	; 0x7c6 <receiveMessages+0xca>
				distance = OPEN_DISTANCE;
 7be:	90 93 09 01 	sts	0x0109, r25
 7c2:	10 92 0a 01 	sts	0x010A, r1
			}
			// End do stuff
			reset_buffer();
 7c6:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 7ca:	08 95       	ret
		}
	}
	else if (c == 21) { // Set blinds closed distance
 7cc:	25 31       	cpi	r18, 0x15	; 21
 7ce:	31 05       	cpc	r19, r1
 7d0:	e1 f4       	brne	.+56     	; 0x80a <receiveMessages+0x10e>
		if (p1 != -1 && p2 != -1) {
 7d2:	2f ef       	ldi	r18, 0xFF	; 255
 7d4:	4f 3f       	cpi	r20, 0xFF	; 255
 7d6:	52 07       	cpc	r21, r18
 7d8:	09 f4       	brne	.+2      	; 0x7dc <receiveMessages+0xe0>
 7da:	59 c0       	rjmp	.+178    	; 0x88e <receiveMessages+0x192>
 7dc:	2f ef       	ldi	r18, 0xFF	; 255
 7de:	8f 3f       	cpi	r24, 0xFF	; 255
 7e0:	92 07       	cpc	r25, r18
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <receiveMessages+0xea>
 7e4:	54 c0       	rjmp	.+168    	; 0x88e <receiveMessages+0x192>
			int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
 7e6:	54 2f       	mov	r21, r20
 7e8:	44 27       	eor	r20, r20
 7ea:	84 0f       	add	r24, r20
 7ec:	95 1f       	adc	r25, r21
			// Do stuff here
			CLOSED_DISTANCE = blinds_closed_distance;
 7ee:	98 2f       	mov	r25, r24
 7f0:	80 93 03 01 	sts	0x0103, r24
			if(screen == DOWN){
 7f4:	80 91 0b 01 	lds	r24, 0x010B
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	21 f4       	brne	.+8      	; 0x804 <receiveMessages+0x108>
				distance = CLOSED_DISTANCE;
 7fc:	90 93 09 01 	sts	0x0109, r25
 800:	10 92 0a 01 	sts	0x010A, r1
			}
			// End do stuff
			reset_buffer();
 804:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 808:	08 95       	ret
		}
	}
	else if (c == 30) { // Set temperature to close
 80a:	2e 31       	cpi	r18, 0x1E	; 30
 80c:	31 05       	cpc	r19, r1
 80e:	59 f4       	brne	.+22     	; 0x826 <receiveMessages+0x12a>
		if (p1 != -1) {
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	4f 3f       	cpi	r20, 0xFF	; 255
 814:	58 07       	cpc	r21, r24
 816:	d9 f1       	breq	.+118    	; 0x88e <receiveMessages+0x192>
			int temperature_to_close = p1 - 128; // The new temperature threshold to close the blinds at
 818:	40 58       	subi	r20, 0x80	; 128
 81a:	50 40       	sbci	r21, 0x00	; 0
			// Do stuff here
			MAX_TEMP = temperature_to_close;
 81c:	40 93 01 01 	sts	0x0101, r20
			// End do stuff
			reset_buffer();
 820:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 824:	08 95       	ret
		}
	}
	else if (c == 31) { // Set temperature to open
 826:	2f 31       	cpi	r18, 0x1F	; 31
 828:	31 05       	cpc	r19, r1
 82a:	59 f4       	brne	.+22     	; 0x842 <receiveMessages+0x146>
		if (p1 != -1) {
 82c:	2f ef       	ldi	r18, 0xFF	; 255
 82e:	4f 3f       	cpi	r20, 0xFF	; 255
 830:	52 07       	cpc	r21, r18
 832:	69 f1       	breq	.+90     	; 0x88e <receiveMessages+0x192>
			int temperature_to_open = p1 - 128; // The new temperature threshold to open the blinds at
 834:	40 58       	subi	r20, 0x80	; 128
 836:	50 40       	sbci	r21, 0x00	; 0
			// Do stuff here
			MIN_TEMP = temperature_to_open;
 838:	40 93 04 01 	sts	0x0104, r20
			// End do stuff
			reset_buffer();
 83c:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 840:	08 95       	ret
		}
	}
	else if (c == 32) { // Set light to close
 842:	20 32       	cpi	r18, 0x20	; 32
 844:	31 05       	cpc	r19, r1
 846:	69 f4       	brne	.+26     	; 0x862 <receiveMessages+0x166>
		if (p1 != -1 && p2 != -1) {
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	4f 3f       	cpi	r20, 0xFF	; 255
 84c:	52 07       	cpc	r21, r18
 84e:	f9 f0       	breq	.+62     	; 0x88e <receiveMessages+0x192>
 850:	2f ef       	ldi	r18, 0xFF	; 255
 852:	8f 3f       	cpi	r24, 0xFF	; 255
 854:	92 07       	cpc	r25, r18
 856:	d9 f0       	breq	.+54     	; 0x88e <receiveMessages+0x192>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			MAX_LIGHT = light_to_close;
 858:	80 93 05 01 	sts	0x0105, r24
			// End do stuff
			reset_buffer();
 85c:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 860:	08 95       	ret
		}
	}
	else if (c == 33) { // Set light to open
 862:	21 32       	cpi	r18, 0x21	; 33
 864:	31 05       	cpc	r19, r1
 866:	69 f4       	brne	.+26     	; 0x882 <receiveMessages+0x186>
		if (p1 != -1 && p2 != -1) {
 868:	2f ef       	ldi	r18, 0xFF	; 255
 86a:	4f 3f       	cpi	r20, 0xFF	; 255
 86c:	52 07       	cpc	r21, r18
 86e:	79 f0       	breq	.+30     	; 0x88e <receiveMessages+0x192>
 870:	2f ef       	ldi	r18, 0xFF	; 255
 872:	8f 3f       	cpi	r24, 0xFF	; 255
 874:	92 07       	cpc	r25, r18
 876:	59 f0       	breq	.+22     	; 0x88e <receiveMessages+0x192>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			MIN_LIGHT = light_to_open;
 878:	80 93 06 01 	sts	0x0106, r24
			// End do stuff
			reset_buffer();
 87c:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 880:	08 95       	ret
		}
	}
	else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	2f 3f       	cpi	r18, 0xFF	; 255
 886:	38 07       	cpc	r19, r24
 888:	11 f0       	breq	.+4      	; 0x88e <receiveMessages+0x192>
		reset_buffer();
 88a:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_buffer>
 88e:	08 95       	ret

00000890 <setChannelZero>:


//***********FUNCTIONS FOR THE ADC****************

void setChannelZero(){
	ADMUX &= ~(1 << MUX0); //Set channel to 0
 890:	ec e7       	ldi	r30, 0x7C	; 124
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	8e 7f       	andi	r24, 0xFE	; 254
 898:	80 83       	st	Z, r24
}
 89a:	08 95       	ret

0000089c <setChannelOne>:

void setChannelOne(){
	ADMUX |= (1 << MUX0); // set channel to 1
 89c:	ec e7       	ldi	r30, 0x7C	; 124
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	80 83       	st	Z, r24
}
 8a6:	08 95       	ret

000008a8 <setupADC>:

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setupADC()
{
	//Channel = 0 as of now
	ADMUX |= (1 << REFS0); //set reference voltage
 8a8:	ec e7       	ldi	r30, 0x7C	; 124
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	80 64       	ori	r24, 0x40	; 64
 8b0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 8b2:	ea e7       	ldi	r30, 0x7A	; 122
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	87 60       	ori	r24, 0x07	; 7
 8ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 8bc:	80 81       	ld	r24, Z
 8be:	80 68       	ori	r24, 0x80	; 128
 8c0:	80 83       	st	Z, r24
}
 8c2:	08 95       	ret

000008c4 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 8c4:	ec e7       	ldi	r30, 0x7C	; 124
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	90 81       	ld	r25, Z
	ADCSRA |= (1 << ADEN); //enable the ADC
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
 8ca:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 8cc:	98 7f       	andi	r25, 0xF8	; 248
 8ce:	98 2b       	or	r25, r24
 8d0:	90 83       	st	Z, r25

	// start the conversion
	ADCSRA |= (1<<ADSC);
 8d2:	ea e7       	ldi	r30, 0x7A	; 122
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	80 64       	ori	r24, 0x40	; 64
 8da:	80 83       	st	Z, r24

	// wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
 8dc:	80 81       	ld	r24, Z
 8de:	86 fd       	sbrc	r24, 6
 8e0:	fd cf       	rjmp	.-6      	; 0x8dc <adc_read+0x18>

	return (ADC);
 8e2:	80 91 78 00 	lds	r24, 0x0078
 8e6:	90 91 79 00 	lds	r25, 0x0079
}
 8ea:	08 95       	ret

000008ec <calculateLight>:
	averageTemperature = 0;
}

//**********FUNCTIONS FOR LIGHTSENSOR**************
void calculateLight(){
	setChannelOne();
 8ec:	0e 94 4e 04 	call	0x89c	; 0x89c <setChannelOne>
	uint16_t reading = adc_read(1);
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <adc_read>
	float temp = (reading/4);
 8f6:	bc 01       	movw	r22, r24
 8f8:	76 95       	lsr	r23
 8fa:	67 95       	ror	r22
 8fc:	76 95       	lsr	r23
 8fe:	67 95       	ror	r22
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatunsisf>
	float light = 100 - ((temp/(float)255)*100); //Light is a percentage. 0 = dark. 100 = bright
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	4f e7       	ldi	r20, 0x7F	; 127
 90e:	53 e4       	ldi	r21, 0x43	; 67
 910:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divsf3>
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	48 ec       	ldi	r20, 0xC8	; 200
 91a:	52 e4       	ldi	r21, 0x42	; 66
 91c:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	88 ec       	ldi	r24, 0xC8	; 200
 92a:	92 e4       	ldi	r25, 0x42	; 66
 92c:	0e 94 40 05 	call	0xa80	; 0xa80 <__subsf3>

	averageLight += (uint8_t)light;
 930:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fixunssfsi>
 934:	80 91 0c 01 	lds	r24, 0x010C
 938:	90 91 0d 01 	lds	r25, 0x010D
 93c:	86 0f       	add	r24, r22
 93e:	91 1d       	adc	r25, r1
 940:	90 93 0d 01 	sts	0x010D, r25
 944:	80 93 0c 01 	sts	0x010C, r24
}
 948:	08 95       	ret

0000094a <calculateTemperature>:
//**********FUNCTIONS FOR TEMPSENSOR****************

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
	setChannelZero(); //Channel 0 is used to measure temperature
 94a:	0e 94 48 04 	call	0x890	; 0x890 <setChannelZero>
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC. (0 - 1023)
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	0e 94 62 04 	call	0x8c4	; 0x8c4 <adc_read>

	//Formula to calculate the temperature
	float voltage = (float)reading/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V.
 954:	bc 01       	movw	r22, r24
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatunsisf>
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	40 e8       	ldi	r20, 0x80	; 128
 964:	5a e3       	ldi	r21, 0x3A	; 58
 966:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
	voltage *= 5; //Multiply by 5V
 96a:	46 2f       	mov	r20, r22
 96c:	57 2f       	mov	r21, r23
 96e:	68 2f       	mov	r22, r24
 970:	79 2f       	mov	r23, r25
 972:	cb 01       	movw	r24, r22
 974:	ba 01       	movw	r22, r20
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	40 ea       	ldi	r20, 0xA0	; 160
 97c:	50 e4       	ldi	r21, 0x40	; 64
 97e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
	voltage -= 0.5; //Deduct the offset ( Offset is 0.5 )
 982:	46 2f       	mov	r20, r22
 984:	57 2f       	mov	r21, r23
 986:	68 2f       	mov	r22, r24
 988:	79 2f       	mov	r23, r25
 98a:	cb 01       	movw	r24, r22
 98c:	ba 01       	movw	r22, r20
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	40 e0       	ldi	r20, 0x00	; 0
 994:	5f e3       	ldi	r21, 0x3F	; 63
 996:	0e 94 40 05 	call	0xa80	; 0xa80 <__subsf3>
	float temperature = (float)100*voltage;
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	48 ec       	ldi	r20, 0xC8	; 200
 9a0:	52 e4       	ldi	r21, 0x42	; 66
 9a2:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>

	averageTemperature += (uint8_t)temperature;
 9a6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fixunssfsi>
 9aa:	80 91 0e 01 	lds	r24, 0x010E
 9ae:	90 91 0f 01 	lds	r25, 0x010F
 9b2:	86 0f       	add	r24, r22
 9b4:	91 1d       	adc	r25, r1
 9b6:	90 93 0f 01 	sts	0x010F, r25
 9ba:	80 93 0e 01 	sts	0x010E, r24
}
 9be:	08 95       	ret

000009c0 <transmitDistance>:
	}
}

//Used for debugging. Sends value of distance to UART.
void transmitDistance(){
	send_temperature(MAX_TEMP);
 9c0:	80 91 01 01 	lds	r24, 0x0101
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <send_temperature>
	send_temperature(MIN_TEMP);
 9ca:	80 91 04 01 	lds	r24, 0x0104
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <send_temperature>
}
 9d4:	08 95       	ret

000009d6 <setStartingPosition>:
	}
}

//Sets starting position of the screen and turns on the corresponding led
void setStartingPosition(){
	if(screen == UP){
 9d6:	80 91 0b 01 	lds	r24, 0x010B
 9da:	88 23       	and	r24, r24
 9dc:	49 f4       	brne	.+18     	; 0x9f0 <setStartingPosition+0x1a>
		distance = OPEN_DISTANCE;
 9de:	80 91 02 01 	lds	r24, 0x0102
 9e2:	80 93 09 01 	sts	0x0109, r24
 9e6:	10 92 0a 01 	sts	0x010A, r1
		turnOnGREEN();
 9ea:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
 9ee:	08 95       	ret
	} else {
		distance = CLOSED_DISTANCE;
 9f0:	80 91 03 01 	lds	r24, 0x0103
 9f4:	80 93 09 01 	sts	0x0109, r24
 9f8:	10 92 0a 01 	sts	0x010A, r1
		turnOnRED();
 9fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
 a00:	08 95       	ret

00000a02 <main>:

//******MAIN********

int main()
{
	setupADC();
 a02:	0e 94 54 04 	call	0x8a8	; 0x8a8 <setupADC>
	setupLeds();
 a06:	0e 94 4d 01 	call	0x29a	; 0x29a <setupLeds>
	uart_init();
 a0a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <uart_init>
	SCH_Init_T1();
 a0e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	setStartingPosition();
 a12:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <setStartingPosition>
	First argument of Add_task is the task you want to execute regularly. 
	Second argument is how many ticks it should wait before starting doing it (so only for the first time)
	Third argument is how often it should be executed in ticks
	One tick = 10ms - So 200 = 2 secs and 1000 = 10 sec etc...
	*/
	SCH_Add_Task(calculateTemperature, 0, 200); //Read temperature every 2 seconds
 a16:	85 ea       	ldi	r24, 0xA5	; 165
 a18:	94 e0       	ldi	r25, 0x04	; 4
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	48 ec       	ldi	r20, 0xC8	; 200
 a20:	50 e0       	ldi	r21, 0x00	; 0
 a22:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateLight, 100, 200); //Read light every 2 seconds
 a26:	86 e7       	ldi	r24, 0x76	; 118
 a28:	94 e0       	ldi	r25, 0x04	; 4
 a2a:	64 e6       	ldi	r22, 0x64	; 100
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	48 ec       	ldi	r20, 0xC8	; 200
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(calculateAverageTemperature, 1010, 1000); //Calculate average every 10 seconds. Delay it by 10.01 seconds to prevent incomplete average measurements.
 a36:	84 e2       	ldi	r24, 0x24	; 36
 a38:	93 e0       	ldi	r25, 0x03	; 3
 a3a:	62 ef       	ldi	r22, 0xF2	; 242
 a3c:	73 e0       	ldi	r23, 0x03	; 3
 a3e:	48 ee       	ldi	r20, 0xE8	; 232
 a40:	53 e0       	ldi	r21, 0x03	; 3
 a42:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageLight, 1110, 1000); //Calculate average light every 10 seconds.
 a46:	8b ef       	ldi	r24, 0xFB	; 251
 a48:	92 e0       	ldi	r25, 0x02	; 2
 a4a:	66 e5       	ldi	r22, 0x56	; 86
 a4c:	74 e0       	ldi	r23, 0x04	; 4
 a4e:	48 ee       	ldi	r20, 0xE8	; 232
 a50:	53 e0       	ldi	r21, 0x03	; 3
 a52:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(checkDistance, 1002, 50); //Check if we are finished scrolling
 a56:	86 e3       	ldi	r24, 0x36	; 54
 a58:	92 e0       	ldi	r25, 0x02	; 2
 a5a:	6a ee       	ldi	r22, 0xEA	; 234
 a5c:	73 e0       	ldi	r23, 0x03	; 3
 a5e:	42 e3       	ldi	r20, 0x32	; 50
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(receiveMessages, 1003, 50); // Receive commands/settings from GUI 
 a66:	8e e7       	ldi	r24, 0x7E	; 126
 a68:	93 e0       	ldi	r25, 0x03	; 3
 a6a:	6b ee       	ldi	r22, 0xEB	; 235
 a6c:	73 e0       	ldi	r23, 0x03	; 3
 a6e:	42 e3       	ldi	r20, 0x32	; 50
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(transmitDistance, 1004, 100); //enable to transmit height of screen to cmd
	
	SCH_Start();
 a76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>

	while(1)
	{
		SCH_Dispatch_Tasks();
 a7a:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 a7e:	fd cf       	rjmp	.-6      	; 0xa7a <main+0x78>

00000a80 <__subsf3>:
 a80:	50 58       	subi	r21, 0x80	; 128

00000a82 <__addsf3>:
 a82:	bb 27       	eor	r27, r27
 a84:	aa 27       	eor	r26, r26
 a86:	0e d0       	rcall	.+28     	; 0xaa4 <__addsf3x>
 a88:	84 c1       	rjmp	.+776    	; 0xd92 <__fp_round>
 a8a:	75 d1       	rcall	.+746    	; 0xd76 <__fp_pscA>
 a8c:	30 f0       	brcs	.+12     	; 0xa9a <__addsf3+0x18>
 a8e:	7a d1       	rcall	.+756    	; 0xd84 <__fp_pscB>
 a90:	20 f0       	brcs	.+8      	; 0xa9a <__addsf3+0x18>
 a92:	31 f4       	brne	.+12     	; 0xaa0 <__addsf3+0x1e>
 a94:	9f 3f       	cpi	r25, 0xFF	; 255
 a96:	11 f4       	brne	.+4      	; 0xa9c <__addsf3+0x1a>
 a98:	1e f4       	brtc	.+6      	; 0xaa0 <__addsf3+0x1e>
 a9a:	6a c1       	rjmp	.+724    	; 0xd70 <__fp_nan>
 a9c:	0e f4       	brtc	.+2      	; 0xaa0 <__addsf3+0x1e>
 a9e:	e0 95       	com	r30
 aa0:	e7 fb       	bst	r30, 7
 aa2:	37 c1       	rjmp	.+622    	; 0xd12 <__fp_inf>

00000aa4 <__addsf3x>:
 aa4:	e9 2f       	mov	r30, r25
 aa6:	86 d1       	rcall	.+780    	; 0xdb4 <__fp_split3>
 aa8:	80 f3       	brcs	.-32     	; 0xa8a <__addsf3+0x8>
 aaa:	ba 17       	cp	r27, r26
 aac:	62 07       	cpc	r22, r18
 aae:	73 07       	cpc	r23, r19
 ab0:	84 07       	cpc	r24, r20
 ab2:	95 07       	cpc	r25, r21
 ab4:	18 f0       	brcs	.+6      	; 0xabc <__addsf3x+0x18>
 ab6:	71 f4       	brne	.+28     	; 0xad4 <__addsf3x+0x30>
 ab8:	9e f5       	brtc	.+102    	; 0xb20 <__addsf3x+0x7c>
 aba:	b5 c1       	rjmp	.+874    	; 0xe26 <__fp_zero>
 abc:	0e f4       	brtc	.+2      	; 0xac0 <__addsf3x+0x1c>
 abe:	e0 95       	com	r30
 ac0:	0b 2e       	mov	r0, r27
 ac2:	ba 2f       	mov	r27, r26
 ac4:	a0 2d       	mov	r26, r0
 ac6:	0b 01       	movw	r0, r22
 ac8:	b9 01       	movw	r22, r18
 aca:	90 01       	movw	r18, r0
 acc:	0c 01       	movw	r0, r24
 ace:	ca 01       	movw	r24, r20
 ad0:	a0 01       	movw	r20, r0
 ad2:	11 24       	eor	r1, r1
 ad4:	ff 27       	eor	r31, r31
 ad6:	59 1b       	sub	r21, r25
 ad8:	99 f0       	breq	.+38     	; 0xb00 <__addsf3x+0x5c>
 ada:	59 3f       	cpi	r21, 0xF9	; 249
 adc:	50 f4       	brcc	.+20     	; 0xaf2 <__addsf3x+0x4e>
 ade:	50 3e       	cpi	r21, 0xE0	; 224
 ae0:	68 f1       	brcs	.+90     	; 0xb3c <__addsf3x+0x98>
 ae2:	1a 16       	cp	r1, r26
 ae4:	f0 40       	sbci	r31, 0x00	; 0
 ae6:	a2 2f       	mov	r26, r18
 ae8:	23 2f       	mov	r18, r19
 aea:	34 2f       	mov	r19, r20
 aec:	44 27       	eor	r20, r20
 aee:	58 5f       	subi	r21, 0xF8	; 248
 af0:	f3 cf       	rjmp	.-26     	; 0xad8 <__addsf3x+0x34>
 af2:	46 95       	lsr	r20
 af4:	37 95       	ror	r19
 af6:	27 95       	ror	r18
 af8:	a7 95       	ror	r26
 afa:	f0 40       	sbci	r31, 0x00	; 0
 afc:	53 95       	inc	r21
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__addsf3x+0x4e>
 b00:	7e f4       	brtc	.+30     	; 0xb20 <__addsf3x+0x7c>
 b02:	1f 16       	cp	r1, r31
 b04:	ba 0b       	sbc	r27, r26
 b06:	62 0b       	sbc	r22, r18
 b08:	73 0b       	sbc	r23, r19
 b0a:	84 0b       	sbc	r24, r20
 b0c:	ba f0       	brmi	.+46     	; 0xb3c <__addsf3x+0x98>
 b0e:	91 50       	subi	r25, 0x01	; 1
 b10:	a1 f0       	breq	.+40     	; 0xb3a <__addsf3x+0x96>
 b12:	ff 0f       	add	r31, r31
 b14:	bb 1f       	adc	r27, r27
 b16:	66 1f       	adc	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	c2 f7       	brpl	.-16     	; 0xb0e <__addsf3x+0x6a>
 b1e:	0e c0       	rjmp	.+28     	; 0xb3c <__addsf3x+0x98>
 b20:	ba 0f       	add	r27, r26
 b22:	62 1f       	adc	r22, r18
 b24:	73 1f       	adc	r23, r19
 b26:	84 1f       	adc	r24, r20
 b28:	48 f4       	brcc	.+18     	; 0xb3c <__addsf3x+0x98>
 b2a:	87 95       	ror	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	b7 95       	ror	r27
 b32:	f7 95       	ror	r31
 b34:	9e 3f       	cpi	r25, 0xFE	; 254
 b36:	08 f0       	brcs	.+2      	; 0xb3a <__addsf3x+0x96>
 b38:	b3 cf       	rjmp	.-154    	; 0xaa0 <__addsf3+0x1e>
 b3a:	93 95       	inc	r25
 b3c:	88 0f       	add	r24, r24
 b3e:	08 f0       	brcs	.+2      	; 0xb42 <__addsf3x+0x9e>
 b40:	99 27       	eor	r25, r25
 b42:	ee 0f       	add	r30, r30
 b44:	97 95       	ror	r25
 b46:	87 95       	ror	r24
 b48:	08 95       	ret

00000b4a <__divsf3>:
 b4a:	0c d0       	rcall	.+24     	; 0xb64 <__divsf3x>
 b4c:	22 c1       	rjmp	.+580    	; 0xd92 <__fp_round>
 b4e:	1a d1       	rcall	.+564    	; 0xd84 <__fp_pscB>
 b50:	40 f0       	brcs	.+16     	; 0xb62 <__divsf3+0x18>
 b52:	11 d1       	rcall	.+546    	; 0xd76 <__fp_pscA>
 b54:	30 f0       	brcs	.+12     	; 0xb62 <__divsf3+0x18>
 b56:	21 f4       	brne	.+8      	; 0xb60 <__divsf3+0x16>
 b58:	5f 3f       	cpi	r21, 0xFF	; 255
 b5a:	19 f0       	breq	.+6      	; 0xb62 <__divsf3+0x18>
 b5c:	da c0       	rjmp	.+436    	; 0xd12 <__fp_inf>
 b5e:	51 11       	cpse	r21, r1
 b60:	63 c1       	rjmp	.+710    	; 0xe28 <__fp_szero>
 b62:	06 c1       	rjmp	.+524    	; 0xd70 <__fp_nan>

00000b64 <__divsf3x>:
 b64:	27 d1       	rcall	.+590    	; 0xdb4 <__fp_split3>
 b66:	98 f3       	brcs	.-26     	; 0xb4e <__divsf3+0x4>

00000b68 <__divsf3_pse>:
 b68:	99 23       	and	r25, r25
 b6a:	c9 f3       	breq	.-14     	; 0xb5e <__divsf3+0x14>
 b6c:	55 23       	and	r21, r21
 b6e:	b1 f3       	breq	.-20     	; 0xb5c <__divsf3+0x12>
 b70:	95 1b       	sub	r25, r21
 b72:	55 0b       	sbc	r21, r21
 b74:	bb 27       	eor	r27, r27
 b76:	aa 27       	eor	r26, r26
 b78:	62 17       	cp	r22, r18
 b7a:	73 07       	cpc	r23, r19
 b7c:	84 07       	cpc	r24, r20
 b7e:	38 f0       	brcs	.+14     	; 0xb8e <__divsf3_pse+0x26>
 b80:	9f 5f       	subi	r25, 0xFF	; 255
 b82:	5f 4f       	sbci	r21, 0xFF	; 255
 b84:	22 0f       	add	r18, r18
 b86:	33 1f       	adc	r19, r19
 b88:	44 1f       	adc	r20, r20
 b8a:	aa 1f       	adc	r26, r26
 b8c:	a9 f3       	breq	.-22     	; 0xb78 <__divsf3_pse+0x10>
 b8e:	33 d0       	rcall	.+102    	; 0xbf6 <__divsf3_pse+0x8e>
 b90:	0e 2e       	mov	r0, r30
 b92:	3a f0       	brmi	.+14     	; 0xba2 <__divsf3_pse+0x3a>
 b94:	e0 e8       	ldi	r30, 0x80	; 128
 b96:	30 d0       	rcall	.+96     	; 0xbf8 <__divsf3_pse+0x90>
 b98:	91 50       	subi	r25, 0x01	; 1
 b9a:	50 40       	sbci	r21, 0x00	; 0
 b9c:	e6 95       	lsr	r30
 b9e:	00 1c       	adc	r0, r0
 ba0:	ca f7       	brpl	.-14     	; 0xb94 <__divsf3_pse+0x2c>
 ba2:	29 d0       	rcall	.+82     	; 0xbf6 <__divsf3_pse+0x8e>
 ba4:	fe 2f       	mov	r31, r30
 ba6:	27 d0       	rcall	.+78     	; 0xbf6 <__divsf3_pse+0x8e>
 ba8:	66 0f       	add	r22, r22
 baa:	77 1f       	adc	r23, r23
 bac:	88 1f       	adc	r24, r24
 bae:	bb 1f       	adc	r27, r27
 bb0:	26 17       	cp	r18, r22
 bb2:	37 07       	cpc	r19, r23
 bb4:	48 07       	cpc	r20, r24
 bb6:	ab 07       	cpc	r26, r27
 bb8:	b0 e8       	ldi	r27, 0x80	; 128
 bba:	09 f0       	breq	.+2      	; 0xbbe <__divsf3_pse+0x56>
 bbc:	bb 0b       	sbc	r27, r27
 bbe:	80 2d       	mov	r24, r0
 bc0:	bf 01       	movw	r22, r30
 bc2:	ff 27       	eor	r31, r31
 bc4:	93 58       	subi	r25, 0x83	; 131
 bc6:	5f 4f       	sbci	r21, 0xFF	; 255
 bc8:	2a f0       	brmi	.+10     	; 0xbd4 <__divsf3_pse+0x6c>
 bca:	9e 3f       	cpi	r25, 0xFE	; 254
 bcc:	51 05       	cpc	r21, r1
 bce:	68 f0       	brcs	.+26     	; 0xbea <__divsf3_pse+0x82>
 bd0:	a0 c0       	rjmp	.+320    	; 0xd12 <__fp_inf>
 bd2:	2a c1       	rjmp	.+596    	; 0xe28 <__fp_szero>
 bd4:	5f 3f       	cpi	r21, 0xFF	; 255
 bd6:	ec f3       	brlt	.-6      	; 0xbd2 <__divsf3_pse+0x6a>
 bd8:	98 3e       	cpi	r25, 0xE8	; 232
 bda:	dc f3       	brlt	.-10     	; 0xbd2 <__divsf3_pse+0x6a>
 bdc:	86 95       	lsr	r24
 bde:	77 95       	ror	r23
 be0:	67 95       	ror	r22
 be2:	b7 95       	ror	r27
 be4:	f7 95       	ror	r31
 be6:	9f 5f       	subi	r25, 0xFF	; 255
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__divsf3_pse+0x74>
 bea:	88 0f       	add	r24, r24
 bec:	91 1d       	adc	r25, r1
 bee:	96 95       	lsr	r25
 bf0:	87 95       	ror	r24
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret
 bf6:	e1 e0       	ldi	r30, 0x01	; 1
 bf8:	66 0f       	add	r22, r22
 bfa:	77 1f       	adc	r23, r23
 bfc:	88 1f       	adc	r24, r24
 bfe:	bb 1f       	adc	r27, r27
 c00:	62 17       	cp	r22, r18
 c02:	73 07       	cpc	r23, r19
 c04:	84 07       	cpc	r24, r20
 c06:	ba 07       	cpc	r27, r26
 c08:	20 f0       	brcs	.+8      	; 0xc12 <__divsf3_pse+0xaa>
 c0a:	62 1b       	sub	r22, r18
 c0c:	73 0b       	sbc	r23, r19
 c0e:	84 0b       	sbc	r24, r20
 c10:	ba 0b       	sbc	r27, r26
 c12:	ee 1f       	adc	r30, r30
 c14:	88 f7       	brcc	.-30     	; 0xbf8 <__divsf3_pse+0x90>
 c16:	e0 95       	com	r30
 c18:	08 95       	ret

00000c1a <__fixunssfsi>:
 c1a:	d4 d0       	rcall	.+424    	; 0xdc4 <__fp_splitA>
 c1c:	88 f0       	brcs	.+34     	; 0xc40 <__fixunssfsi+0x26>
 c1e:	9f 57       	subi	r25, 0x7F	; 127
 c20:	90 f0       	brcs	.+36     	; 0xc46 <__fixunssfsi+0x2c>
 c22:	b9 2f       	mov	r27, r25
 c24:	99 27       	eor	r25, r25
 c26:	b7 51       	subi	r27, 0x17	; 23
 c28:	a0 f0       	brcs	.+40     	; 0xc52 <__fixunssfsi+0x38>
 c2a:	d1 f0       	breq	.+52     	; 0xc60 <__fixunssfsi+0x46>
 c2c:	66 0f       	add	r22, r22
 c2e:	77 1f       	adc	r23, r23
 c30:	88 1f       	adc	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	1a f0       	brmi	.+6      	; 0xc3c <__fixunssfsi+0x22>
 c36:	ba 95       	dec	r27
 c38:	c9 f7       	brne	.-14     	; 0xc2c <__fixunssfsi+0x12>
 c3a:	12 c0       	rjmp	.+36     	; 0xc60 <__fixunssfsi+0x46>
 c3c:	b1 30       	cpi	r27, 0x01	; 1
 c3e:	81 f0       	breq	.+32     	; 0xc60 <__fixunssfsi+0x46>
 c40:	f2 d0       	rcall	.+484    	; 0xe26 <__fp_zero>
 c42:	b1 e0       	ldi	r27, 0x01	; 1
 c44:	08 95       	ret
 c46:	ef c0       	rjmp	.+478    	; 0xe26 <__fp_zero>
 c48:	67 2f       	mov	r22, r23
 c4a:	78 2f       	mov	r23, r24
 c4c:	88 27       	eor	r24, r24
 c4e:	b8 5f       	subi	r27, 0xF8	; 248
 c50:	39 f0       	breq	.+14     	; 0xc60 <__fixunssfsi+0x46>
 c52:	b9 3f       	cpi	r27, 0xF9	; 249
 c54:	cc f3       	brlt	.-14     	; 0xc48 <__fixunssfsi+0x2e>
 c56:	86 95       	lsr	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b3 95       	inc	r27
 c5e:	d9 f7       	brne	.-10     	; 0xc56 <__fixunssfsi+0x3c>
 c60:	3e f4       	brtc	.+14     	; 0xc70 <__fixunssfsi+0x56>
 c62:	90 95       	com	r25
 c64:	80 95       	com	r24
 c66:	70 95       	com	r23
 c68:	61 95       	neg	r22
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	08 95       	ret

00000c72 <__floatunsisf>:
 c72:	e8 94       	clt
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <__floatsisf+0x12>

00000c76 <__floatsisf>:
 c76:	97 fb       	bst	r25, 7
 c78:	3e f4       	brtc	.+14     	; 0xc88 <__floatsisf+0x12>
 c7a:	90 95       	com	r25
 c7c:	80 95       	com	r24
 c7e:	70 95       	com	r23
 c80:	61 95       	neg	r22
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	99 23       	and	r25, r25
 c8a:	a9 f0       	breq	.+42     	; 0xcb6 <__floatsisf+0x40>
 c8c:	f9 2f       	mov	r31, r25
 c8e:	96 e9       	ldi	r25, 0x96	; 150
 c90:	bb 27       	eor	r27, r27
 c92:	93 95       	inc	r25
 c94:	f6 95       	lsr	r31
 c96:	87 95       	ror	r24
 c98:	77 95       	ror	r23
 c9a:	67 95       	ror	r22
 c9c:	b7 95       	ror	r27
 c9e:	f1 11       	cpse	r31, r1
 ca0:	f8 cf       	rjmp	.-16     	; 0xc92 <__floatsisf+0x1c>
 ca2:	fa f4       	brpl	.+62     	; 0xce2 <__floatsisf+0x6c>
 ca4:	bb 0f       	add	r27, r27
 ca6:	11 f4       	brne	.+4      	; 0xcac <__floatsisf+0x36>
 ca8:	60 ff       	sbrs	r22, 0
 caa:	1b c0       	rjmp	.+54     	; 0xce2 <__floatsisf+0x6c>
 cac:	6f 5f       	subi	r22, 0xFF	; 255
 cae:	7f 4f       	sbci	r23, 0xFF	; 255
 cb0:	8f 4f       	sbci	r24, 0xFF	; 255
 cb2:	9f 4f       	sbci	r25, 0xFF	; 255
 cb4:	16 c0       	rjmp	.+44     	; 0xce2 <__floatsisf+0x6c>
 cb6:	88 23       	and	r24, r24
 cb8:	11 f0       	breq	.+4      	; 0xcbe <__floatsisf+0x48>
 cba:	96 e9       	ldi	r25, 0x96	; 150
 cbc:	11 c0       	rjmp	.+34     	; 0xce0 <__floatsisf+0x6a>
 cbe:	77 23       	and	r23, r23
 cc0:	21 f0       	breq	.+8      	; 0xcca <__floatsisf+0x54>
 cc2:	9e e8       	ldi	r25, 0x8E	; 142
 cc4:	87 2f       	mov	r24, r23
 cc6:	76 2f       	mov	r23, r22
 cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <__floatsisf+0x5e>
 cca:	66 23       	and	r22, r22
 ccc:	71 f0       	breq	.+28     	; 0xcea <__floatsisf+0x74>
 cce:	96 e8       	ldi	r25, 0x86	; 134
 cd0:	86 2f       	mov	r24, r22
 cd2:	70 e0       	ldi	r23, 0x00	; 0
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	2a f0       	brmi	.+10     	; 0xce2 <__floatsisf+0x6c>
 cd8:	9a 95       	dec	r25
 cda:	66 0f       	add	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	da f7       	brpl	.-10     	; 0xcd8 <__floatsisf+0x62>
 ce2:	88 0f       	add	r24, r24
 ce4:	96 95       	lsr	r25
 ce6:	87 95       	ror	r24
 ce8:	97 f9       	bld	r25, 7
 cea:	08 95       	ret

00000cec <floor>:
 cec:	85 d0       	rcall	.+266    	; 0xdf8 <__fp_trunc>
 cee:	80 f0       	brcs	.+32     	; 0xd10 <floor+0x24>
 cf0:	9f 37       	cpi	r25, 0x7F	; 127
 cf2:	40 f4       	brcc	.+16     	; 0xd04 <floor+0x18>
 cf4:	91 11       	cpse	r25, r1
 cf6:	0e f0       	brts	.+2      	; 0xcfa <floor+0xe>
 cf8:	97 c0       	rjmp	.+302    	; 0xe28 <__fp_szero>
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	80 e8       	ldi	r24, 0x80	; 128
 d00:	9f eb       	ldi	r25, 0xBF	; 191
 d02:	08 95       	ret
 d04:	26 f4       	brtc	.+8      	; 0xd0e <floor+0x22>
 d06:	1b 16       	cp	r1, r27
 d08:	61 1d       	adc	r22, r1
 d0a:	71 1d       	adc	r23, r1
 d0c:	81 1d       	adc	r24, r1
 d0e:	07 c0       	rjmp	.+14     	; 0xd1e <__fp_mintl>
 d10:	21 c0       	rjmp	.+66     	; 0xd54 <__fp_mpack>

00000d12 <__fp_inf>:
 d12:	97 f9       	bld	r25, 7
 d14:	9f 67       	ori	r25, 0x7F	; 127
 d16:	80 e8       	ldi	r24, 0x80	; 128
 d18:	70 e0       	ldi	r23, 0x00	; 0
 d1a:	60 e0       	ldi	r22, 0x00	; 0
 d1c:	08 95       	ret

00000d1e <__fp_mintl>:
 d1e:	88 23       	and	r24, r24
 d20:	71 f4       	brne	.+28     	; 0xd3e <__fp_mintl+0x20>
 d22:	77 23       	and	r23, r23
 d24:	21 f0       	breq	.+8      	; 0xd2e <__fp_mintl+0x10>
 d26:	98 50       	subi	r25, 0x08	; 8
 d28:	87 2b       	or	r24, r23
 d2a:	76 2f       	mov	r23, r22
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <__fp_mintl+0x1e>
 d2e:	66 23       	and	r22, r22
 d30:	11 f4       	brne	.+4      	; 0xd36 <__fp_mintl+0x18>
 d32:	99 27       	eor	r25, r25
 d34:	0d c0       	rjmp	.+26     	; 0xd50 <__fp_mintl+0x32>
 d36:	90 51       	subi	r25, 0x10	; 16
 d38:	86 2b       	or	r24, r22
 d3a:	70 e0       	ldi	r23, 0x00	; 0
 d3c:	60 e0       	ldi	r22, 0x00	; 0
 d3e:	2a f0       	brmi	.+10     	; 0xd4a <__fp_mintl+0x2c>
 d40:	9a 95       	dec	r25
 d42:	66 0f       	add	r22, r22
 d44:	77 1f       	adc	r23, r23
 d46:	88 1f       	adc	r24, r24
 d48:	da f7       	brpl	.-10     	; 0xd40 <__fp_mintl+0x22>
 d4a:	88 0f       	add	r24, r24
 d4c:	96 95       	lsr	r25
 d4e:	87 95       	ror	r24
 d50:	97 f9       	bld	r25, 7
 d52:	08 95       	ret

00000d54 <__fp_mpack>:
 d54:	9f 3f       	cpi	r25, 0xFF	; 255
 d56:	31 f0       	breq	.+12     	; 0xd64 <__fp_mpack_finite+0xc>

00000d58 <__fp_mpack_finite>:
 d58:	91 50       	subi	r25, 0x01	; 1
 d5a:	20 f4       	brcc	.+8      	; 0xd64 <__fp_mpack_finite+0xc>
 d5c:	87 95       	ror	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	b7 95       	ror	r27
 d64:	88 0f       	add	r24, r24
 d66:	91 1d       	adc	r25, r1
 d68:	96 95       	lsr	r25
 d6a:	87 95       	ror	r24
 d6c:	97 f9       	bld	r25, 7
 d6e:	08 95       	ret

00000d70 <__fp_nan>:
 d70:	9f ef       	ldi	r25, 0xFF	; 255
 d72:	80 ec       	ldi	r24, 0xC0	; 192
 d74:	08 95       	ret

00000d76 <__fp_pscA>:
 d76:	00 24       	eor	r0, r0
 d78:	0a 94       	dec	r0
 d7a:	16 16       	cp	r1, r22
 d7c:	17 06       	cpc	r1, r23
 d7e:	18 06       	cpc	r1, r24
 d80:	09 06       	cpc	r0, r25
 d82:	08 95       	ret

00000d84 <__fp_pscB>:
 d84:	00 24       	eor	r0, r0
 d86:	0a 94       	dec	r0
 d88:	12 16       	cp	r1, r18
 d8a:	13 06       	cpc	r1, r19
 d8c:	14 06       	cpc	r1, r20
 d8e:	05 06       	cpc	r0, r21
 d90:	08 95       	ret

00000d92 <__fp_round>:
 d92:	09 2e       	mov	r0, r25
 d94:	03 94       	inc	r0
 d96:	00 0c       	add	r0, r0
 d98:	11 f4       	brne	.+4      	; 0xd9e <__fp_round+0xc>
 d9a:	88 23       	and	r24, r24
 d9c:	52 f0       	brmi	.+20     	; 0xdb2 <__fp_round+0x20>
 d9e:	bb 0f       	add	r27, r27
 da0:	40 f4       	brcc	.+16     	; 0xdb2 <__fp_round+0x20>
 da2:	bf 2b       	or	r27, r31
 da4:	11 f4       	brne	.+4      	; 0xdaa <__fp_round+0x18>
 da6:	60 ff       	sbrs	r22, 0
 da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__fp_round+0x20>
 daa:	6f 5f       	subi	r22, 0xFF	; 255
 dac:	7f 4f       	sbci	r23, 0xFF	; 255
 dae:	8f 4f       	sbci	r24, 0xFF	; 255
 db0:	9f 4f       	sbci	r25, 0xFF	; 255
 db2:	08 95       	ret

00000db4 <__fp_split3>:
 db4:	57 fd       	sbrc	r21, 7
 db6:	90 58       	subi	r25, 0x80	; 128
 db8:	44 0f       	add	r20, r20
 dba:	55 1f       	adc	r21, r21
 dbc:	59 f0       	breq	.+22     	; 0xdd4 <__fp_splitA+0x10>
 dbe:	5f 3f       	cpi	r21, 0xFF	; 255
 dc0:	71 f0       	breq	.+28     	; 0xdde <__fp_splitA+0x1a>
 dc2:	47 95       	ror	r20

00000dc4 <__fp_splitA>:
 dc4:	88 0f       	add	r24, r24
 dc6:	97 fb       	bst	r25, 7
 dc8:	99 1f       	adc	r25, r25
 dca:	61 f0       	breq	.+24     	; 0xde4 <__fp_splitA+0x20>
 dcc:	9f 3f       	cpi	r25, 0xFF	; 255
 dce:	79 f0       	breq	.+30     	; 0xdee <__fp_splitA+0x2a>
 dd0:	87 95       	ror	r24
 dd2:	08 95       	ret
 dd4:	12 16       	cp	r1, r18
 dd6:	13 06       	cpc	r1, r19
 dd8:	14 06       	cpc	r1, r20
 dda:	55 1f       	adc	r21, r21
 ddc:	f2 cf       	rjmp	.-28     	; 0xdc2 <__fp_split3+0xe>
 dde:	46 95       	lsr	r20
 de0:	f1 df       	rcall	.-30     	; 0xdc4 <__fp_splitA>
 de2:	08 c0       	rjmp	.+16     	; 0xdf4 <__fp_splitA+0x30>
 de4:	16 16       	cp	r1, r22
 de6:	17 06       	cpc	r1, r23
 de8:	18 06       	cpc	r1, r24
 dea:	99 1f       	adc	r25, r25
 dec:	f1 cf       	rjmp	.-30     	; 0xdd0 <__fp_splitA+0xc>
 dee:	86 95       	lsr	r24
 df0:	71 05       	cpc	r23, r1
 df2:	61 05       	cpc	r22, r1
 df4:	08 94       	sec
 df6:	08 95       	ret

00000df8 <__fp_trunc>:
 df8:	e5 df       	rcall	.-54     	; 0xdc4 <__fp_splitA>
 dfa:	a0 f0       	brcs	.+40     	; 0xe24 <__fp_trunc+0x2c>
 dfc:	be e7       	ldi	r27, 0x7E	; 126
 dfe:	b9 17       	cp	r27, r25
 e00:	88 f4       	brcc	.+34     	; 0xe24 <__fp_trunc+0x2c>
 e02:	bb 27       	eor	r27, r27
 e04:	9f 38       	cpi	r25, 0x8F	; 143
 e06:	60 f4       	brcc	.+24     	; 0xe20 <__fp_trunc+0x28>
 e08:	16 16       	cp	r1, r22
 e0a:	b1 1d       	adc	r27, r1
 e0c:	67 2f       	mov	r22, r23
 e0e:	78 2f       	mov	r23, r24
 e10:	88 27       	eor	r24, r24
 e12:	98 5f       	subi	r25, 0xF8	; 248
 e14:	f7 cf       	rjmp	.-18     	; 0xe04 <__fp_trunc+0xc>
 e16:	86 95       	lsr	r24
 e18:	77 95       	ror	r23
 e1a:	67 95       	ror	r22
 e1c:	b1 1d       	adc	r27, r1
 e1e:	93 95       	inc	r25
 e20:	96 39       	cpi	r25, 0x96	; 150
 e22:	c8 f3       	brcs	.-14     	; 0xe16 <__fp_trunc+0x1e>
 e24:	08 95       	ret

00000e26 <__fp_zero>:
 e26:	e8 94       	clt

00000e28 <__fp_szero>:
 e28:	bb 27       	eor	r27, r27
 e2a:	66 27       	eor	r22, r22
 e2c:	77 27       	eor	r23, r23
 e2e:	cb 01       	movw	r24, r22
 e30:	97 f9       	bld	r25, 7
 e32:	08 95       	ret

00000e34 <__mulsf3>:
 e34:	0b d0       	rcall	.+22     	; 0xe4c <__mulsf3x>
 e36:	ad cf       	rjmp	.-166    	; 0xd92 <__fp_round>
 e38:	9e df       	rcall	.-196    	; 0xd76 <__fp_pscA>
 e3a:	28 f0       	brcs	.+10     	; 0xe46 <__mulsf3+0x12>
 e3c:	a3 df       	rcall	.-186    	; 0xd84 <__fp_pscB>
 e3e:	18 f0       	brcs	.+6      	; 0xe46 <__mulsf3+0x12>
 e40:	95 23       	and	r25, r21
 e42:	09 f0       	breq	.+2      	; 0xe46 <__mulsf3+0x12>
 e44:	66 cf       	rjmp	.-308    	; 0xd12 <__fp_inf>
 e46:	94 cf       	rjmp	.-216    	; 0xd70 <__fp_nan>
 e48:	11 24       	eor	r1, r1
 e4a:	ee cf       	rjmp	.-36     	; 0xe28 <__fp_szero>

00000e4c <__mulsf3x>:
 e4c:	b3 df       	rcall	.-154    	; 0xdb4 <__fp_split3>
 e4e:	a0 f3       	brcs	.-24     	; 0xe38 <__mulsf3+0x4>

00000e50 <__mulsf3_pse>:
 e50:	95 9f       	mul	r25, r21
 e52:	d1 f3       	breq	.-12     	; 0xe48 <__mulsf3+0x14>
 e54:	95 0f       	add	r25, r21
 e56:	50 e0       	ldi	r21, 0x00	; 0
 e58:	55 1f       	adc	r21, r21
 e5a:	62 9f       	mul	r22, r18
 e5c:	f0 01       	movw	r30, r0
 e5e:	72 9f       	mul	r23, r18
 e60:	bb 27       	eor	r27, r27
 e62:	f0 0d       	add	r31, r0
 e64:	b1 1d       	adc	r27, r1
 e66:	63 9f       	mul	r22, r19
 e68:	aa 27       	eor	r26, r26
 e6a:	f0 0d       	add	r31, r0
 e6c:	b1 1d       	adc	r27, r1
 e6e:	aa 1f       	adc	r26, r26
 e70:	64 9f       	mul	r22, r20
 e72:	66 27       	eor	r22, r22
 e74:	b0 0d       	add	r27, r0
 e76:	a1 1d       	adc	r26, r1
 e78:	66 1f       	adc	r22, r22
 e7a:	82 9f       	mul	r24, r18
 e7c:	22 27       	eor	r18, r18
 e7e:	b0 0d       	add	r27, r0
 e80:	a1 1d       	adc	r26, r1
 e82:	62 1f       	adc	r22, r18
 e84:	73 9f       	mul	r23, r19
 e86:	b0 0d       	add	r27, r0
 e88:	a1 1d       	adc	r26, r1
 e8a:	62 1f       	adc	r22, r18
 e8c:	83 9f       	mul	r24, r19
 e8e:	a0 0d       	add	r26, r0
 e90:	61 1d       	adc	r22, r1
 e92:	22 1f       	adc	r18, r18
 e94:	74 9f       	mul	r23, r20
 e96:	33 27       	eor	r19, r19
 e98:	a0 0d       	add	r26, r0
 e9a:	61 1d       	adc	r22, r1
 e9c:	23 1f       	adc	r18, r19
 e9e:	84 9f       	mul	r24, r20
 ea0:	60 0d       	add	r22, r0
 ea2:	21 1d       	adc	r18, r1
 ea4:	82 2f       	mov	r24, r18
 ea6:	76 2f       	mov	r23, r22
 ea8:	6a 2f       	mov	r22, r26
 eaa:	11 24       	eor	r1, r1
 eac:	9f 57       	subi	r25, 0x7F	; 127
 eae:	50 40       	sbci	r21, 0x00	; 0
 eb0:	8a f0       	brmi	.+34     	; 0xed4 <__mulsf3_pse+0x84>
 eb2:	e1 f0       	breq	.+56     	; 0xeec <__mulsf3_pse+0x9c>
 eb4:	88 23       	and	r24, r24
 eb6:	4a f0       	brmi	.+18     	; 0xeca <__mulsf3_pse+0x7a>
 eb8:	ee 0f       	add	r30, r30
 eba:	ff 1f       	adc	r31, r31
 ebc:	bb 1f       	adc	r27, r27
 ebe:	66 1f       	adc	r22, r22
 ec0:	77 1f       	adc	r23, r23
 ec2:	88 1f       	adc	r24, r24
 ec4:	91 50       	subi	r25, 0x01	; 1
 ec6:	50 40       	sbci	r21, 0x00	; 0
 ec8:	a9 f7       	brne	.-22     	; 0xeb4 <__mulsf3_pse+0x64>
 eca:	9e 3f       	cpi	r25, 0xFE	; 254
 ecc:	51 05       	cpc	r21, r1
 ece:	70 f0       	brcs	.+28     	; 0xeec <__mulsf3_pse+0x9c>
 ed0:	20 cf       	rjmp	.-448    	; 0xd12 <__fp_inf>
 ed2:	aa cf       	rjmp	.-172    	; 0xe28 <__fp_szero>
 ed4:	5f 3f       	cpi	r21, 0xFF	; 255
 ed6:	ec f3       	brlt	.-6      	; 0xed2 <__mulsf3_pse+0x82>
 ed8:	98 3e       	cpi	r25, 0xE8	; 232
 eda:	dc f3       	brlt	.-10     	; 0xed2 <__mulsf3_pse+0x82>
 edc:	86 95       	lsr	r24
 ede:	77 95       	ror	r23
 ee0:	67 95       	ror	r22
 ee2:	b7 95       	ror	r27
 ee4:	f7 95       	ror	r31
 ee6:	e7 95       	ror	r30
 ee8:	9f 5f       	subi	r25, 0xFF	; 255
 eea:	c1 f7       	brne	.-16     	; 0xedc <__mulsf3_pse+0x8c>
 eec:	fe 2b       	or	r31, r30
 eee:	88 0f       	add	r24, r24
 ef0:	91 1d       	adc	r25, r1
 ef2:	96 95       	lsr	r25
 ef4:	87 95       	ror	r24
 ef6:	97 f9       	bld	r25, 7
 ef8:	08 95       	ret

00000efa <__udivmodhi4>:
 efa:	aa 1b       	sub	r26, r26
 efc:	bb 1b       	sub	r27, r27
 efe:	51 e1       	ldi	r21, 0x11	; 17
 f00:	07 c0       	rjmp	.+14     	; 0xf10 <__udivmodhi4_ep>

00000f02 <__udivmodhi4_loop>:
 f02:	aa 1f       	adc	r26, r26
 f04:	bb 1f       	adc	r27, r27
 f06:	a6 17       	cp	r26, r22
 f08:	b7 07       	cpc	r27, r23
 f0a:	10 f0       	brcs	.+4      	; 0xf10 <__udivmodhi4_ep>
 f0c:	a6 1b       	sub	r26, r22
 f0e:	b7 0b       	sbc	r27, r23

00000f10 <__udivmodhi4_ep>:
 f10:	88 1f       	adc	r24, r24
 f12:	99 1f       	adc	r25, r25
 f14:	5a 95       	dec	r21
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__udivmodhi4_loop>
 f18:	80 95       	com	r24
 f1a:	90 95       	com	r25
 f1c:	bc 01       	movw	r22, r24
 f1e:	cd 01       	movw	r24, r26
 f20:	08 95       	ret

00000f22 <__divmodhi4>:
 f22:	97 fb       	bst	r25, 7
 f24:	09 2e       	mov	r0, r25
 f26:	07 26       	eor	r0, r23
 f28:	0a d0       	rcall	.+20     	; 0xf3e <__divmodhi4_neg1>
 f2a:	77 fd       	sbrc	r23, 7
 f2c:	04 d0       	rcall	.+8      	; 0xf36 <__divmodhi4_neg2>
 f2e:	e5 df       	rcall	.-54     	; 0xefa <__udivmodhi4>
 f30:	06 d0       	rcall	.+12     	; 0xf3e <__divmodhi4_neg1>
 f32:	00 20       	and	r0, r0
 f34:	1a f4       	brpl	.+6      	; 0xf3c <__divmodhi4_exit>

00000f36 <__divmodhi4_neg2>:
 f36:	70 95       	com	r23
 f38:	61 95       	neg	r22
 f3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f3c <__divmodhi4_exit>:
 f3c:	08 95       	ret

00000f3e <__divmodhi4_neg1>:
 f3e:	f6 f7       	brtc	.-4      	; 0xf3c <__divmodhi4_exit>
 f40:	90 95       	com	r25
 f42:	81 95       	neg	r24
 f44:	9f 4f       	sbci	r25, 0xFF	; 255
 f46:	08 95       	ret

00000f48 <_exit>:
 f48:	f8 94       	cli

00000f4a <__stop_program>:
 f4a:	ff cf       	rjmp	.-2      	; 0xf4a <__stop_program>
