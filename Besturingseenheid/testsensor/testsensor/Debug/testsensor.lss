
testsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  0080011a  0080011a  00001128  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007cf  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f44  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040d  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ba  00000000  00000000  000052d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00005994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a88  00000000  00000000  00006285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3b       	cpi	r26, 0xB3	; 179
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a0 05 	call	0xb40	; 0xb40 <main>
      9e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	dc 01       	movw	r26, r24
      b0:	eb 01       	movw	r28, r22
      b2:	8a 01       	movw	r16, r20
      b4:	80 91 22 01 	lds	r24, 0x0122
      b8:	90 91 23 01 	lds	r25, 0x0123
      bc:	00 97       	sbiw	r24, 0x00	; 0
      be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
      c0:	e9 e2       	ldi	r30, 0x29	; 41
      c2:	f1 e0       	ldi	r31, 0x01	; 1
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	42 2f       	mov	r20, r18
      ca:	b9 01       	movw	r22, r18
      cc:	80 81       	ld	r24, Z
      ce:	91 81       	ldd	r25, Z+1	; 0x01
      d0:	00 97       	sbiw	r24, 0x00	; 0
      d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
      d4:	2f 5f       	subi	r18, 0xFF	; 255
      d6:	3f 4f       	sbci	r19, 0xFF	; 255
      d8:	37 96       	adiw	r30, 0x07	; 7
      da:	20 31       	cpi	r18, 0x10	; 16
      dc:	31 05       	cpc	r19, r1
      de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
      e0:	84 2f       	mov	r24, r20
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
      e4:	82 2f       	mov	r24, r18
      e6:	8f 30       	cpi	r24, 0x0F	; 15
      e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
      ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	cb 01       	movw	r24, r22
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	86 1b       	sub	r24, r22
     102:	97 0b       	sbc	r25, r23
     104:	fc 01       	movw	r30, r24
     106:	ee 5d       	subi	r30, 0xDE	; 222
     108:	fe 4f       	sbci	r31, 0xFE	; 254
     10a:	b1 83       	std	Z+1, r27	; 0x01
     10c:	a0 83       	st	Z, r26
     10e:	d3 83       	std	Z+3, r29	; 0x03
     110:	c2 83       	std	Z+2, r28	; 0x02
     112:	15 83       	std	Z+5, r17	; 0x05
     114:	04 83       	std	Z+4, r16	; 0x04
     116:	16 82       	std	Z+6, r1	; 0x06
     118:	84 2f       	mov	r24, r20
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	08 95       	ret

00000124 <SCH_Delete_Task>:
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	fc 01       	movw	r30, r24
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	ee 0f       	add	r30, r30
     12e:	ff 1f       	adc	r31, r31
     130:	ee 0f       	add	r30, r30
     132:	ff 1f       	adc	r31, r31
     134:	e8 1b       	sub	r30, r24
     136:	f9 0b       	sbc	r31, r25
     138:	ee 5d       	subi	r30, 0xDE	; 222
     13a:	fe 4f       	sbci	r31, 0xFE	; 254
     13c:	11 82       	std	Z+1, r1	; 0x01
     13e:	10 82       	st	Z, r1
     140:	13 82       	std	Z+3, r1	; 0x03
     142:	12 82       	std	Z+2, r1	; 0x02
     144:	15 82       	std	Z+5, r1	; 0x05
     146:	14 82       	std	Z+4, r1	; 0x04
     148:	16 82       	std	Z+6, r1	; 0x06
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	c8 e2       	ldi	r28, 0x28	; 40
     15e:	d1 e0       	ldi	r29, 0x01	; 1
     160:	0f 2e       	mov	r0, r31
     162:	fa ef       	ldi	r31, 0xFA	; 250
     164:	ef 2e       	mov	r14, r31
     166:	ff ef       	ldi	r31, 0xFF	; 255
     168:	ff 2e       	mov	r15, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	ec 0e       	add	r14, r28
     16e:	fd 1e       	adc	r15, r29
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	88 81       	ld	r24, Y
     174:	88 23       	and	r24, r24
     176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
     178:	d7 01       	movw	r26, r14
     17a:	ed 91       	ld	r30, X+
     17c:	fc 91       	ld	r31, X
     17e:	11 97       	sbiw	r26, 0x01	; 1
     180:	30 97       	sbiw	r30, 0x00	; 0
     182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
     184:	09 95       	icall
     186:	88 81       	ld	r24, Y
     188:	81 50       	subi	r24, 0x01	; 1
     18a:	88 83       	st	Y, r24
     18c:	f7 01       	movw	r30, r14
     18e:	84 81       	ldd	r24, Z+4	; 0x04
     190:	95 81       	ldd	r25, Z+5	; 0x05
     192:	00 97       	sbiw	r24, 0x00	; 0
     194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
     196:	81 2f       	mov	r24, r17
     198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
     19c:	1f 5f       	subi	r17, 0xFF	; 255
     19e:	27 96       	adiw	r28, 0x07	; 7
     1a0:	87 e0       	ldi	r24, 0x07	; 7
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	e8 0e       	add	r14, r24
     1a6:	f9 1e       	adc	r15, r25
     1a8:	1f 30       	cpi	r17, 0x0F	; 15
     1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	ff 90       	pop	r15
     1b4:	ef 90       	pop	r14
     1b6:	df 90       	pop	r13
     1b8:	cf 90       	pop	r12
     1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
     1bc:	cf 93       	push	r28
     1be:	c0 e0       	ldi	r28, 0x00	; 0
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
     1c6:	cf 5f       	subi	r28, 0xFF	; 255
     1c8:	cf 30       	cpi	r28, 0x0F	; 15
     1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
     1cc:	81 e7       	ldi	r24, 0x71	; 113
     1ce:	92 e0       	ldi	r25, 0x02	; 2
     1d0:	90 93 89 00 	sts	0x0089, r25
     1d4:	80 93 88 00 	sts	0x0088, r24
     1d8:	8c e0       	ldi	r24, 0x0C	; 12
     1da:	80 93 81 00 	sts	0x0081, r24
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	80 93 6f 00 	sts	0x006F, r24
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <SCH_Start>:
     1e8:	78 94       	sei
     1ea:	08 95       	ret

000001ec <__vector_11>:
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	8f 93       	push	r24
     1fc:	9f 93       	push	r25
     1fe:	af 93       	push	r26
     200:	bf 93       	push	r27
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
     20a:	e2 e2       	ldi	r30, 0x22	; 34
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	df 01       	movw	r26, r30
     210:	16 96       	adiw	r26, 0x06	; 6
     212:	2b e8       	ldi	r18, 0x8B	; 139
     214:	31 e0       	ldi	r19, 0x01	; 1
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
     21e:	82 81       	ldd	r24, Z+2	; 0x02
     220:	93 81       	ldd	r25, Z+3	; 0x03
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
     226:	8c 91       	ld	r24, X
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	8c 93       	st	X, r24
     22c:	84 81       	ldd	r24, Z+4	; 0x04
     22e:	95 81       	ldd	r25, Z+5	; 0x05
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	93 83       	std	Z+3, r25	; 0x03
     238:	82 83       	std	Z+2, r24	; 0x02
     23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	93 83       	std	Z+3, r25	; 0x03
     240:	82 83       	std	Z+2, r24	; 0x02
     242:	37 96       	adiw	r30, 0x07	; 7
     244:	17 96       	adiw	r26, 0x07	; 7
     246:	e2 17       	cp	r30, r18
     248:	f3 07       	cpc	r31, r19
     24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	bf 91       	pop	r27
     256:	af 91       	pop	r26
     258:	9f 91       	pop	r25
     25a:	8f 91       	pop	r24
     25c:	3f 91       	pop	r19
     25e:	2f 91       	pop	r18
     260:	0f 90       	pop	r0
     262:	0f be       	out	0x3f, r0	; 63
     264:	0f 90       	pop	r0
     266:	1f 90       	pop	r1
     268:	18 95       	reti

0000026a <turnOnYELLOW>:
void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
}

void turnOnYELLOW(){
	PORTB |= _BV(PORTB3);
     26a:	2b 9a       	sbi	0x05, 3	; 5
}
     26c:	08 95       	ret

0000026e <turnOffYELLOW>:

void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
     26e:	2b 98       	cbi	0x05, 3	; 5
}
     270:	08 95       	ret

00000272 <lowerScreen>:

//********FUNCTIONS TO CONTROL THE SCREEN*************

//Actually physically lowers the screen
void lowerScreen(){
	distance += SCROLLSPEED;
     272:	80 91 1b 01 	lds	r24, 0x011B
     276:	90 91 1c 01 	lds	r25, 0x011C
     27a:	0a 96       	adiw	r24, 0x0a	; 10
     27c:	90 93 1c 01 	sts	0x011C, r25
     280:	80 93 1b 01 	sts	0x011B, r24
}
     284:	08 95       	ret

00000286 <upScreen>:

//Actually physically rises the screen
void upScreen(){
	distance -= SCROLLSPEED;
     286:	80 91 1b 01 	lds	r24, 0x011B
     28a:	90 91 1c 01 	lds	r25, 0x011C
     28e:	0a 97       	sbiw	r24, 0x0a	; 10
     290:	90 93 1c 01 	sts	0x011C, r25
     294:	80 93 1b 01 	sts	0x011B, r24
}
     298:	08 95       	ret

0000029a <setupLeds>:
unsigned int checkdistance = -1;


//**********FUNCTIONS TO CONTROL LEDS*****************
void setupLeds(){
	DDRB |= _BV(DDB5); //red led pin 5
     29a:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB3); //yellow led pin 3
     29c:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB1); //green led pin 1
     29e:	21 9a       	sbi	0x04, 1	; 4
}
     2a0:	08 95       	ret

000002a2 <turnOnRED>:

void turnOnRED(){
	 PORTB |= _BV(PORTB5);
     2a2:	2d 9a       	sbi	0x05, 5	; 5
}
     2a4:	08 95       	ret

000002a6 <turnOffRED>:

void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
     2a6:	2d 98       	cbi	0x05, 5	; 5
}
     2a8:	08 95       	ret

000002aa <turnOnGREEN>:
void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
}

void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
     2aa:	29 9a       	sbi	0x05, 1	; 5
}
     2ac:	08 95       	ret

000002ae <turnOffGREEN>:

void turnOffGREEN(){
	PORTB &= ~_BV(PORTB1);
     2ae:	29 98       	cbi	0x05, 1	; 5
}
     2b0:	08 95       	ret

000002b2 <turnOffAll>:

void turnOffAll(){
	turnOffYELLOW();
     2b2:	0e 94 37 01 	call	0x26e	; 0x26e <turnOffYELLOW>
	turnOffRED();
     2b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOffRED>
	turnOffGREEN();
     2ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOffGREEN>
}
     2be:	08 95       	ret

000002c0 <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
     2c0:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
     2c4:	83 e3       	ldi	r24, 0x33	; 51
     2c6:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
     2ca:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter and receiver
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     2ce:	88 e1       	ldi	r24, 0x18	; 24
     2d0:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	80 93 c2 00 	sts	0x00C2, r24
}
     2da:	08 95       	ret

000002dc <transmit>:
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty

	loop_until_bit_is_set(UCSR0A, UDRE0);
     2dc:	e0 ec       	ldi	r30, 0xC0	; 192
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	90 81       	ld	r25, Z
     2e2:	95 ff       	sbrs	r25, 5
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <transmit+0x4>
	UDR0 = data;
     2e6:	80 93 c6 00 	sts	0x00C6, r24
}
     2ea:	08 95       	ret

000002ec <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
	while (*c != -1) {
     2f2:	88 81       	ld	r24, Y
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	8f 3f       	cpi	r24, 0xFF	; 255
     2fa:	92 07       	cpc	r25, r18
     2fc:	49 f0       	breq	.+18     	; 0x310 <transmit_string+0x24>
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
     2fe:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
     300:	0e 94 6e 01 	call	0x2dc	; 0x2dc <transmit>
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
     304:	89 91       	ld	r24, Y+
     306:	99 91       	ld	r25, Y+
     308:	2f ef       	ldi	r18, 0xFF	; 255
     30a:	8f 3f       	cpi	r24, 0xFF	; 255
     30c:	92 07       	cpc	r25, r18
     30e:	c1 f7       	brne	.-16     	; 0x300 <transmit_string+0x14>
		transmit(*c);
		c++;
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <receive>:

// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     316:	e0 ec       	ldi	r30, 0xC0	; 192
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	90 81       	ld	r25, Z
     31c:	99 23       	and	r25, r25
     31e:	ec f7       	brge	.-6      	; 0x31a <receive+0x4>
	return response;
}
     320:	08 95       	ret

00000322 <receive_non_blocking>:

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & (1<<RXC0)) { // is the received data bit set in the UCSR0A register?
     322:	80 91 c0 00 	lds	r24, 0x00C0
     326:	88 23       	and	r24, r24
     328:	24 f4       	brge	.+8      	; 0x332 <receive_non_blocking+0x10>
	return (int) UDR0;
     32a:	80 91 c6 00 	lds	r24, 0x00C6
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 95       	ret
}
return -1;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
}
     336:	08 95       	ret

00000338 <send_light>:

// Sends the light value via UART
void send_light(int light) {
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	28 97       	sbiw	r28, 0x08	; 8
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	8c 01       	movw	r16, r24
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
     352:	99 23       	and	r25, r25
     354:	cc f0       	brlt	.+50     	; 0x388 <send_light+0x50>
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
     356:	bc 01       	movw	r22, r24
     358:	99 23       	and	r25, r25
     35a:	14 f4       	brge	.+4      	; 0x360 <send_light+0x28>
     35c:	61 50       	subi	r22, 0x01	; 1
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	67 2f       	mov	r22, r23
     362:	77 0f       	add	r23, r23
     364:	77 0b       	sbc	r23, r23
     366:	88 27       	eor	r24, r24
     368:	77 fd       	sbrc	r23, 7
     36a:	80 95       	com	r24
     36c:	98 2f       	mov	r25, r24
     36e:	0e 94 d2 06 	call	0xda4	; 0xda4 <__floatsisf>
     372:	0e 94 0d 07 	call	0xe1a	; 0xe1a <floor>
     376:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fixunssfsi>
     37a:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
     37c:	c8 01       	movw	r24, r16
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	0e 94 28 08 	call	0x1050	; 0x1050 <__divmodhi4>
     386:	02 c0       	rjmp	.+4      	; 0x38c <send_light+0x54>
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
		val1 = 0;
		val2 = 0;
     388:	80 e0       	ldi	r24, 0x00	; 0
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;

	if (light < 0) {
		val1 = 0;
     38a:	40 e0       	ldi	r20, 0x00	; 0
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	3a 83       	std	Y+2, r19	; 0x02
     392:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
     394:	4b 83       	std	Y+3, r20	; 0x03
     396:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
     398:	8d 83       	std	Y+5, r24	; 0x05
     39a:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	9f ef       	ldi	r25, 0xFF	; 255
     3a0:	98 87       	std	Y+8, r25	; 0x08
     3a2:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
     3ac:	28 96       	adiw	r28, 0x08	; 8
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <send_temperature>:

// Sends the temperature via UART
void send_temperature(int temp) {
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <send_temperature+0x6>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <send_temperature+0x8>
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <send_temperature+0xa>
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
     3d0:	80 58       	subi	r24, 0x80	; 128
     3d2:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;

	if (temp < 0) {
     3d4:	2a f0       	brmi	.+10     	; 0x3e0 <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
     3d6:	8f 3f       	cpi	r24, 0xFF	; 255
     3d8:	91 05       	cpc	r25, r1
     3da:	29 f0       	breq	.+10     	; 0x3e6 <send_temperature+0x24>
     3dc:	24 f0       	brlt	.+8      	; 0x3e6 <send_temperature+0x24>
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <send_temperature+0x22>
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;

	if (temp < 0) {
		val = 0;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
	else {
		val = (uint8_t)temp;
	}

	int buffer[3];
	buffer[0] = 2;
     3e6:	22 e0       	ldi	r18, 0x02	; 2
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	3a 83       	std	Y+2, r19	; 0x02
     3ec:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
     3ee:	8b 83       	std	Y+3, r24	; 0x03
     3f0:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
     402:	26 96       	adiw	r28, 0x06	; 6
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <send_blinds_status>:

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t status) {
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	28 97       	sbiw	r28, 0x08	; 8
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
	if (status > 2) {
		status = 2;
	}
	int buffer[4];
	buffer[0] = 3;
     428:	23 e0       	ldi	r18, 0x03	; 3
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	3a 83       	std	Y+2, r19	; 0x02
     42e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
     430:	1c 82       	std	Y+4, r1	; 0x04
     432:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	08 f0       	brcs	.+2      	; 0x43a <send_blinds_status+0x26>
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	8d 83       	std	Y+5, r24	; 0x05
     43c:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	98 87       	std	Y+8, r25	; 0x08
     444:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
     44e:	28 96       	adiw	r28, 0x08	; 8
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <ScrollUp>:
}

//Set instruction to SCROLLUP, scroll the screen, and light correct leds
void ScrollUp()
{
	if(screen == DOWN && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll up if it is DOWN and hasnt received other instruction before
     460:	80 91 1d 01 	lds	r24, 0x011D
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	09 f0       	breq	.+2      	; 0x46a <ScrollUp+0xa>
     468:	62 c0       	rjmp	.+196    	; 0x52e <ScrollUp+0xce>
     46a:	80 91 12 01 	lds	r24, 0x0112
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <ScrollUp+0x14>
     472:	5d c0       	rjmp	.+186    	; 0x52e <ScrollUp+0xce>
		instruction = SCROLLUP;
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	80 93 12 01 	sts	0x0112, r24
		screen = SCROLLING;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 1d 01 	sts	0x011D, r24
		turnOffAll();
     480:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		if(upscreen == -1){
     484:	80 91 02 01 	lds	r24, 0x0102
     488:	90 91 03 01 	lds	r25, 0x0103
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	8f 3f       	cpi	r24, 0xFF	; 255
     490:	92 07       	cpc	r25, r18
     492:	61 f4       	brne	.+24     	; 0x4ac <ScrollUp+0x4c>
		upscreen = SCH_Add_Task(upScreen, 5, 100);
     494:	83 e4       	ldi	r24, 0x43	; 67
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	65 e0       	ldi	r22, 0x05	; 5
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	44 e6       	ldi	r20, 0x64	; 100
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     4a4:	80 93 02 01 	sts	0x0102, r24
     4a8:	10 92 03 01 	sts	0x0103, r1
		}
		if(checkdistance == -1){	
     4ac:	80 91 00 01 	lds	r24, 0x0100
     4b0:	90 91 01 01 	lds	r25, 0x0101
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	8f 3f       	cpi	r24, 0xFF	; 255
     4b8:	92 07       	cpc	r25, r18
     4ba:	61 f4       	brne	.+24     	; 0x4d4 <ScrollUp+0x74>
		checkdistance = SCH_Add_Task(checkDistance, 7, 100);
     4bc:	81 e5       	ldi	r24, 0x51	; 81
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	67 e0       	ldi	r22, 0x07	; 7
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	44 e6       	ldi	r20, 0x64	; 100
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     4cc:	80 93 00 01 	sts	0x0100, r24
     4d0:	10 92 01 01 	sts	0x0101, r1
		}
		if(yellowon == -1){		
     4d4:	80 91 0e 01 	lds	r24, 0x010E
     4d8:	90 91 0f 01 	lds	r25, 0x010F
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	8f 3f       	cpi	r24, 0xFF	; 255
     4e0:	92 07       	cpc	r25, r18
     4e2:	61 f4       	brne	.+24     	; 0x4fc <ScrollUp+0x9c>
		yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
     4e4:	85 e3       	ldi	r24, 0x35	; 53
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	66 e0       	ldi	r22, 0x06	; 6
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	44 e6       	ldi	r20, 0x64	; 100
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     4f4:	80 93 0e 01 	sts	0x010E, r24
     4f8:	10 92 0f 01 	sts	0x010F, r1
		}
		if(yellowoff == -1){		
     4fc:	80 91 0a 01 	lds	r24, 0x010A
     500:	90 91 0b 01 	lds	r25, 0x010B
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	8f 3f       	cpi	r24, 0xFF	; 255
     508:	92 07       	cpc	r25, r18
     50a:	61 f4       	brne	.+24     	; 0x524 <ScrollUp+0xc4>
		yellowoff = SCH_Add_Task(turnOffYELLOW, 57, 100);
     50c:	87 e3       	ldi	r24, 0x37	; 55
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	69 e3       	ldi	r22, 0x39	; 57
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	44 e6       	ldi	r20, 0x64	; 100
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     51c:	80 93 0a 01 	sts	0x010A, r24
     520:	10 92 0b 01 	sts	0x010B, r1
		}		
		turnOnGREEN();
     524:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
		send_blinds_status(2);
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
     52e:	08 95       	ret

00000530 <ScrollDown>:
}

//Set instruction to SCROLLDOWN, scroll the screen and light correct leds
void ScrollDown()
{
	if(screen == UP && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll down if it is UP and hasnt received other instruction before
     530:	80 91 1d 01 	lds	r24, 0x011D
     534:	88 23       	and	r24, r24
     536:	09 f0       	breq	.+2      	; 0x53a <ScrollDown+0xa>
     538:	60 c0       	rjmp	.+192    	; 0x5fa <ScrollDown+0xca>
     53a:	80 91 12 01 	lds	r24, 0x0112
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	09 f0       	breq	.+2      	; 0x544 <ScrollDown+0x14>
     542:	5b c0       	rjmp	.+182    	; 0x5fa <ScrollDown+0xca>
		instruction = SCROLLDOWN;
     544:	10 92 12 01 	sts	0x0112, r1
		screen = SCROLLING;
     548:	80 93 1d 01 	sts	0x011D, r24
		turnOffAll();
     54c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		if(lowerscreen == -1){
     550:	80 91 04 01 	lds	r24, 0x0104
     554:	90 91 05 01 	lds	r25, 0x0105
     558:	2f ef       	ldi	r18, 0xFF	; 255
     55a:	8f 3f       	cpi	r24, 0xFF	; 255
     55c:	92 07       	cpc	r25, r18
     55e:	61 f4       	brne	.+24     	; 0x578 <ScrollDown+0x48>
			lowerscreen = SCH_Add_Task(lowerScreen, 5, 100);
     560:	89 e3       	ldi	r24, 0x39	; 57
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	65 e0       	ldi	r22, 0x05	; 5
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	44 e6       	ldi	r20, 0x64	; 100
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     570:	80 93 04 01 	sts	0x0104, r24
     574:	10 92 05 01 	sts	0x0105, r1
		}
		if(checkdistance == -1){
     578:	80 91 00 01 	lds	r24, 0x0100
     57c:	90 91 01 01 	lds	r25, 0x0101
     580:	2f ef       	ldi	r18, 0xFF	; 255
     582:	8f 3f       	cpi	r24, 0xFF	; 255
     584:	92 07       	cpc	r25, r18
     586:	61 f4       	brne	.+24     	; 0x5a0 <ScrollDown+0x70>
			checkdistance = SCH_Add_Task(checkDistance, 7, 100);
     588:	81 e5       	ldi	r24, 0x51	; 81
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	44 e6       	ldi	r20, 0x64	; 100
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     598:	80 93 00 01 	sts	0x0100, r24
     59c:	10 92 01 01 	sts	0x0101, r1
		}
		if(yellowon == -1){
     5a0:	80 91 0e 01 	lds	r24, 0x010E
     5a4:	90 91 0f 01 	lds	r25, 0x010F
     5a8:	2f ef       	ldi	r18, 0xFF	; 255
     5aa:	8f 3f       	cpi	r24, 0xFF	; 255
     5ac:	92 07       	cpc	r25, r18
     5ae:	61 f4       	brne	.+24     	; 0x5c8 <ScrollDown+0x98>
			yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
     5b0:	85 e3       	ldi	r24, 0x35	; 53
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	66 e0       	ldi	r22, 0x06	; 6
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	44 e6       	ldi	r20, 0x64	; 100
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     5c0:	80 93 0e 01 	sts	0x010E, r24
     5c4:	10 92 0f 01 	sts	0x010F, r1
		}
		if(yellowoff == -1){
     5c8:	80 91 0a 01 	lds	r24, 0x010A
     5cc:	90 91 0b 01 	lds	r25, 0x010B
     5d0:	2f ef       	ldi	r18, 0xFF	; 255
     5d2:	8f 3f       	cpi	r24, 0xFF	; 255
     5d4:	92 07       	cpc	r25, r18
     5d6:	61 f4       	brne	.+24     	; 0x5f0 <ScrollDown+0xc0>
			yellowoff = SCH_Add_Task(turnOffYELLOW, 57, 100);
     5d8:	87 e3       	ldi	r24, 0x37	; 55
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	69 e3       	ldi	r22, 0x39	; 57
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	44 e6       	ldi	r20, 0x64	; 100
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
     5e8:	80 93 0a 01 	sts	0x010A, r24
     5ec:	10 92 0b 01 	sts	0x010B, r1
		}
		turnOnRED();
     5f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
		send_blinds_status(2);
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
     5fa:	08 95       	ret

000005fc <calculateAverageLight>:


//This function is used to calculate the average temperature.
void calculateAverageLight()
{
	averageLight /= 5; //calculate average from 5 measured values
     5fc:	80 91 1e 01 	lds	r24, 0x011E
     600:	90 91 1f 01 	lds	r25, 0x011F
     604:	65 e0       	ldi	r22, 0x05	; 5
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 14 08 	call	0x1028	; 0x1028 <__udivmodhi4>
     60c:	86 2f       	mov	r24, r22
     60e:	97 2f       	mov	r25, r23
     610:	60 93 1e 01 	sts	0x011E, r22
     614:	70 93 1f 01 	sts	0x011F, r23
	if(averageLight >= MAX_LIGHT){
     618:	20 91 17 01 	lds	r18, 0x0117
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	18 f0       	brcs	.+6      	; 0x62a <calculateAverageLight+0x2e>
		ScrollDown();
     624:	0e 94 98 02 	call	0x530	; 0x530 <ScrollDown>
     628:	08 c0       	rjmp	.+16     	; 0x63a <calculateAverageLight+0x3e>
	} else if (averageLight <= MIN_LIGHT){
     62a:	20 91 18 01 	lds	r18, 0x0118
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	28 17       	cp	r18, r24
     632:	39 07       	cpc	r19, r25
     634:	10 f0       	brcs	.+4      	; 0x63a <calculateAverageLight+0x3e>
		ScrollUp();
     636:	0e 94 30 02 	call	0x460	; 0x460 <ScrollUp>
	}
	send_light((uint8_t)averageLight);
     63a:	80 91 1e 01 	lds	r24, 0x011E
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 9c 01 	call	0x338	; 0x338 <send_light>
	averageLight = 0;
     644:	10 92 1f 01 	sts	0x011F, r1
     648:	10 92 1e 01 	sts	0x011E, r1
}
     64c:	08 95       	ret

0000064e <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 5; //calculate average from 5 values
     64e:	80 91 20 01 	lds	r24, 0x0120
     652:	90 91 21 01 	lds	r25, 0x0121
     656:	65 e0       	ldi	r22, 0x05	; 5
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 14 08 	call	0x1028	; 0x1028 <__udivmodhi4>
     65e:	86 2f       	mov	r24, r22
     660:	97 2f       	mov	r25, r23
     662:	60 93 20 01 	sts	0x0120, r22
     666:	70 93 21 01 	sts	0x0121, r23
	if(averageTemperature >= MAX_TEMP){
     66a:	20 91 15 01 	lds	r18, 0x0115
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	82 17       	cp	r24, r18
     672:	93 07       	cpc	r25, r19
     674:	18 f0       	brcs	.+6      	; 0x67c <calculateAverageTemperature+0x2e>
		ScrollDown();
     676:	0e 94 98 02 	call	0x530	; 0x530 <ScrollDown>
     67a:	08 c0       	rjmp	.+16     	; 0x68c <calculateAverageTemperature+0x3e>
	} else if (averageTemperature <= MIN_TEMP){
     67c:	20 91 16 01 	lds	r18, 0x0116
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	28 17       	cp	r18, r24
     684:	39 07       	cpc	r19, r25
     686:	10 f0       	brcs	.+4      	; 0x68c <calculateAverageTemperature+0x3e>
		ScrollUp();
     688:	0e 94 30 02 	call	0x460	; 0x460 <ScrollUp>
	}
	send_temperature(averageTemperature);
     68c:	80 91 20 01 	lds	r24, 0x0120
     690:	90 91 21 01 	lds	r25, 0x0121
     694:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_temperature>
	averageTemperature = 0;
     698:	10 92 21 01 	sts	0x0121, r1
     69c:	10 92 20 01 	sts	0x0120, r1
}
     6a0:	08 95       	ret

000006a2 <checkDistance>:
void upScreen(){
	distance -= SCROLLSPEED;
}

//Check to see if we are finished scrolling
void checkDistance(){
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	if(distance <= OPEN_DISTANCE && instruction == SCROLLUP && screen == SCROLLING){
     6a6:	80 91 1b 01 	lds	r24, 0x011B
     6aa:	90 91 1c 01 	lds	r25, 0x011C
     6ae:	20 91 13 01 	lds	r18, 0x0113
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	28 17       	cp	r18, r24
     6b6:	39 07       	cpc	r19, r25
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <checkDistance+0x1a>
     6ba:	41 c0       	rjmp	.+130    	; 0x73e <checkDistance+0x9c>
     6bc:	20 91 12 01 	lds	r18, 0x0112
     6c0:	22 30       	cpi	r18, 0x02	; 2
     6c2:	e9 f5       	brne	.+122    	; 0x73e <checkDistance+0x9c>
     6c4:	20 91 1d 01 	lds	r18, 0x011D
     6c8:	21 30       	cpi	r18, 0x01	; 1
     6ca:	c9 f5       	brne	.+114    	; 0x73e <checkDistance+0x9c>
		screen = UP;
     6cc:	10 92 1d 01 	sts	0x011D, r1
		instruction = NEUTRAL;
     6d0:	c1 e0       	ldi	r28, 0x01	; 1
     6d2:	c0 93 12 01 	sts	0x0112, r28
		SCH_Delete_Task(upscreen);
     6d6:	80 91 02 01 	lds	r24, 0x0102
     6da:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(checkdistance);
     6de:	80 91 00 01 	lds	r24, 0x0100
     6e2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
     6e6:	80 91 0e 01 	lds	r24, 0x010E
     6ea:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
     6ee:	80 91 0a 01 	lds	r24, 0x010A
     6f2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		upscreen = -1;
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	90 93 03 01 	sts	0x0103, r25
     6fe:	80 93 02 01 	sts	0x0102, r24
		checkdistance = -1;
     702:	90 93 01 01 	sts	0x0101, r25
     706:	80 93 00 01 	sts	0x0100, r24
		yellowon = -1;
     70a:	90 93 0f 01 	sts	0x010F, r25
     70e:	80 93 0e 01 	sts	0x010E, r24
		yellowoff = -1;
     712:	90 93 0b 01 	sts	0x010B, r25
     716:	80 93 0a 01 	sts	0x010A, r24
		distance = OPEN_DISTANCE;
     71a:	80 91 13 01 	lds	r24, 0x0113
     71e:	80 93 1b 01 	sts	0x011B, r24
     722:	10 92 1c 01 	sts	0x011C, r1
		screen = UP;
     726:	10 92 1d 01 	sts	0x011D, r1
		instruction = NEUTRAL;
     72a:	c0 93 12 01 	sts	0x0112, r28
		turnOffAll();
     72e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnGREEN();
     732:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
		send_blinds_status(1);
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
     73c:	48 c0       	rjmp	.+144    	; 0x7ce <checkDistance+0x12c>
	} else if(distance >= CLOSED_DISTANCE && instruction == SCROLLDOWN && screen == SCROLLING){
     73e:	20 91 14 01 	lds	r18, 0x0114
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	08 f4       	brcc	.+2      	; 0x74c <checkDistance+0xaa>
     74a:	41 c0       	rjmp	.+130    	; 0x7ce <checkDistance+0x12c>
     74c:	80 91 12 01 	lds	r24, 0x0112
     750:	88 23       	and	r24, r24
     752:	e9 f5       	brne	.+122    	; 0x7ce <checkDistance+0x12c>
     754:	80 91 1d 01 	lds	r24, 0x011D
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	c9 f5       	brne	.+114    	; 0x7ce <checkDistance+0x12c>
		screen = DOWN;
     75c:	d2 e0       	ldi	r29, 0x02	; 2
     75e:	d0 93 1d 01 	sts	0x011D, r29
		instruction = NEUTRAL;
     762:	c1 e0       	ldi	r28, 0x01	; 1
     764:	c0 93 12 01 	sts	0x0112, r28
		SCH_Delete_Task(lowerscreen);
     768:	80 91 04 01 	lds	r24, 0x0104
     76c:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(checkdistance);
     770:	80 91 00 01 	lds	r24, 0x0100
     774:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
     778:	80 91 0e 01 	lds	r24, 0x010E
     77c:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
     780:	80 91 0a 01 	lds	r24, 0x010A
     784:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		lowerscreen = -1;
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	9f ef       	ldi	r25, 0xFF	; 255
     78c:	90 93 05 01 	sts	0x0105, r25
     790:	80 93 04 01 	sts	0x0104, r24
		checkdistance = -1;
     794:	90 93 01 01 	sts	0x0101, r25
     798:	80 93 00 01 	sts	0x0100, r24
		yellowon = -1;
     79c:	90 93 0f 01 	sts	0x010F, r25
     7a0:	80 93 0e 01 	sts	0x010E, r24
		yellowoff = -1;
     7a4:	90 93 0b 01 	sts	0x010B, r25
     7a8:	80 93 0a 01 	sts	0x010A, r24
		distance = CLOSED_DISTANCE;
     7ac:	80 91 14 01 	lds	r24, 0x0114
     7b0:	80 93 1b 01 	sts	0x011B, r24
     7b4:	10 92 1c 01 	sts	0x011C, r1
		screen = DOWN;
     7b8:	d0 93 1d 01 	sts	0x011D, r29
		instruction = NEUTRAL;
     7bc:	c0 93 12 01 	sts	0x0112, r28
		turnOffAll();
     7c0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnRED();
     7c4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
		send_blinds_status(0);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
	}
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <reset_buffer>:
}

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
     7d4:	eb e8       	ldi	r30, 0x8B	; 139
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	2b ed       	ldi	r18, 0xDB	; 219
     7da:	31 e0       	ldi	r19, 0x01	; 1

	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	81 93       	st	Z+, r24
     7e2:	91 93       	st	Z+, r25
// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {

	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
     7e4:	e2 17       	cp	r30, r18
     7e6:	f3 07       	cpc	r31, r19
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
     7ea:	08 95       	ret

000007ec <add_to_buffer>:

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
     7ec:	20 91 8b 01 	lds	r18, 0x018B
     7f0:	30 91 8c 01 	lds	r19, 0x018C
     7f4:	9f ef       	ldi	r25, 0xFF	; 255
     7f6:	2f 3f       	cpi	r18, 0xFF	; 255
     7f8:	39 07       	cpc	r19, r25
     7fa:	91 f0       	breq	.+36     	; 0x820 <add_to_buffer+0x34>
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
     7fc:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
     7fe:	4b e8       	ldi	r20, 0x8B	; 139
     800:	51 e0       	ldi	r21, 0x01	; 1
		i++;
     802:	9f 5f       	subi	r25, 0xFF	; 255
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
     804:	29 2f       	mov	r18, r25
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	f9 01       	movw	r30, r18
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e4 0f       	add	r30, r20
     810:	f5 1f       	adc	r31, r21
     812:	60 81       	ld	r22, Z
     814:	71 81       	ldd	r23, Z+1	; 0x01
     816:	ef ef       	ldi	r30, 0xFF	; 255
     818:	6f 3f       	cpi	r22, 0xFF	; 255
     81a:	7e 07       	cpc	r23, r30
     81c:	91 f7       	brne	.-28     	; 0x802 <add_to_buffer+0x16>
     81e:	02 c0       	rjmp	.+4      	; 0x824 <add_to_buffer+0x38>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
     824:	f9 01       	movw	r30, r18
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e5 57       	subi	r30, 0x75	; 117
     82c:	fe 4f       	sbci	r31, 0xFE	; 254
     82e:	80 83       	st	Z, r24
     830:	11 82       	std	Z+1, r1	; 0x01
}
     832:	08 95       	ret

00000834 <receiveMessages>:

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	if (buffer_reset != 123) {
     834:	80 91 1a 01 	lds	r24, 0x011A
     838:	8b 37       	cpi	r24, 0x7B	; 123
     83a:	29 f0       	breq	.+10     	; 0x846 <receiveMessages+0x12>
		reset_buffer();
     83c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
		buffer_reset = 123;
     840:	8b e7       	ldi	r24, 0x7B	; 123
     842:	80 93 1a 01 	sts	0x011A, r24
	}
	int b = receive_non_blocking();
     846:	0e 94 91 01 	call	0x322	; 0x322 <receive_non_blocking>
	if (b != -1) { // If no messages were received at all there's no need to check everything again
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	8f 3f       	cpi	r24, 0xFF	; 255
     84e:	92 07       	cpc	r25, r18
     850:	09 f4       	brne	.+2      	; 0x854 <receiveMessages+0x20>
     852:	ba c0       	rjmp	.+372    	; 0x9c8 <__stack+0xc9>
		while (b != -1) {
			add_to_buffer((uint8_t) b);
     854:	0e 94 f6 03 	call	0x7ec	; 0x7ec <add_to_buffer>
			b = receive_non_blocking();
     858:	0e 94 91 01 	call	0x322	; 0x322 <receive_non_blocking>
		reset_buffer();
		buffer_reset = 123;
	}
	int b = receive_non_blocking();
	if (b != -1) { // If no messages were received at all there's no need to check everything again
		while (b != -1) {
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	8f 3f       	cpi	r24, 0xFF	; 255
     860:	92 07       	cpc	r25, r18
     862:	c1 f7       	brne	.-16     	; 0x854 <receiveMessages+0x20>
			add_to_buffer((uint8_t) b);
			b = receive_non_blocking();
		}

		int c = receive_buffer[0];
     864:	20 91 8b 01 	lds	r18, 0x018B
     868:	30 91 8c 01 	lds	r19, 0x018C
		int p1 = receive_buffer[1];
     86c:	40 91 8d 01 	lds	r20, 0x018D
     870:	50 91 8e 01 	lds	r21, 0x018E
		int p2 = receive_buffer[2];
     874:	80 91 8f 01 	lds	r24, 0x018F
     878:	90 91 90 01 	lds	r25, 0x0190
		int p3 = receive_buffer[3];

		if (c == 10) { // Open blinds
     87c:	2a 30       	cpi	r18, 0x0A	; 10
     87e:	31 05       	cpc	r19, r1
     880:	81 f4       	brne	.+32     	; 0x8a2 <receiveMessages+0x6e>
			if (p1 == 1) {
     882:	41 30       	cpi	r20, 0x01	; 1
     884:	51 05       	cpc	r21, r1
     886:	29 f4       	brne	.+10     	; 0x892 <receiveMessages+0x5e>
				// OPEN THE BLINDS
				// Do stuff here
				ScrollUp();
     888:	0e 94 30 02 	call	0x460	; 0x460 <ScrollUp>
				// End do stuff
				reset_buffer();
     88c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     890:	08 95       	ret
			}
			else if (p1 != -1) {
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	4f 3f       	cpi	r20, 0xFF	; 255
     896:	58 07       	cpc	r21, r24
     898:	09 f4       	brne	.+2      	; 0x89c <receiveMessages+0x68>
     89a:	96 c0       	rjmp	.+300    	; 0x9c8 <__stack+0xc9>
				reset_buffer();
     89c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     8a0:	08 95       	ret
			}
		}
		else if (c == 11) { // Close blinds
     8a2:	2b 30       	cpi	r18, 0x0B	; 11
     8a4:	31 05       	cpc	r19, r1
     8a6:	81 f4       	brne	.+32     	; 0x8c8 <receiveMessages+0x94>
			if (p1 == 1) {
     8a8:	41 30       	cpi	r20, 0x01	; 1
     8aa:	51 05       	cpc	r21, r1
     8ac:	29 f4       	brne	.+10     	; 0x8b8 <receiveMessages+0x84>
				// CLOSE THE BLINDS
				// Do stuff here
				ScrollDown();
     8ae:	0e 94 98 02 	call	0x530	; 0x530 <ScrollDown>
				// End do stuff
				reset_buffer();
     8b2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     8b6:	08 95       	ret
			}
			else if (p1 != -1) {
     8b8:	2f ef       	ldi	r18, 0xFF	; 255
     8ba:	4f 3f       	cpi	r20, 0xFF	; 255
     8bc:	52 07       	cpc	r21, r18
     8be:	09 f4       	brne	.+2      	; 0x8c2 <receiveMessages+0x8e>
     8c0:	83 c0       	rjmp	.+262    	; 0x9c8 <__stack+0xc9>
				reset_buffer();
     8c2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     8c6:	08 95       	ret
			}
		}
		else if (c == 20) { // Set blinds open distance
     8c8:	24 31       	cpi	r18, 0x14	; 20
     8ca:	31 05       	cpc	r19, r1
     8cc:	e1 f4       	brne	.+56     	; 0x906 <__stack+0x7>
			if (p1 != -1 && p2 != -1) {
     8ce:	2f ef       	ldi	r18, 0xFF	; 255
     8d0:	4f 3f       	cpi	r20, 0xFF	; 255
     8d2:	52 07       	cpc	r21, r18
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <receiveMessages+0xa4>
     8d6:	78 c0       	rjmp	.+240    	; 0x9c8 <__stack+0xc9>
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	8f 3f       	cpi	r24, 0xFF	; 255
     8dc:	92 07       	cpc	r25, r18
     8de:	09 f4       	brne	.+2      	; 0x8e2 <receiveMessages+0xae>
     8e0:	73 c0       	rjmp	.+230    	; 0x9c8 <__stack+0xc9>
				int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
     8e2:	54 2f       	mov	r21, r20
     8e4:	44 27       	eor	r20, r20
     8e6:	84 0f       	add	r24, r20
     8e8:	95 1f       	adc	r25, r21
				// Do stuff here
				OPEN_DISTANCE = blinds_open_distance;
     8ea:	98 2f       	mov	r25, r24
     8ec:	80 93 13 01 	sts	0x0113, r24
				if(screen == UP){
     8f0:	80 91 1d 01 	lds	r24, 0x011D
     8f4:	88 23       	and	r24, r24
     8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0x1>
					distance = OPEN_DISTANCE;
     8f8:	90 93 1b 01 	sts	0x011B, r25
     8fc:	10 92 1c 01 	sts	0x011C, r1
				}
				// End do stuff
				reset_buffer();
     900:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     904:	08 95       	ret
			}
		}
		else if (c == 21) { // Set blinds closed distance
     906:	25 31       	cpi	r18, 0x15	; 21
     908:	31 05       	cpc	r19, r1
     90a:	e1 f4       	brne	.+56     	; 0x944 <__stack+0x45>
			if (p1 != -1 && p2 != -1) {
     90c:	2f ef       	ldi	r18, 0xFF	; 255
     90e:	4f 3f       	cpi	r20, 0xFF	; 255
     910:	52 07       	cpc	r21, r18
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x17>
     914:	59 c0       	rjmp	.+178    	; 0x9c8 <__stack+0xc9>
     916:	2f ef       	ldi	r18, 0xFF	; 255
     918:	8f 3f       	cpi	r24, 0xFF	; 255
     91a:	92 07       	cpc	r25, r18
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	54 c0       	rjmp	.+168    	; 0x9c8 <__stack+0xc9>
				int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
     920:	54 2f       	mov	r21, r20
     922:	44 27       	eor	r20, r20
     924:	84 0f       	add	r24, r20
     926:	95 1f       	adc	r25, r21
				// Do stuff here
				CLOSED_DISTANCE = blinds_closed_distance;
     928:	98 2f       	mov	r25, r24
     92a:	80 93 14 01 	sts	0x0114, r24
				if(screen == DOWN){
     92e:	80 91 1d 01 	lds	r24, 0x011D
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	21 f4       	brne	.+8      	; 0x93e <__stack+0x3f>
					distance = CLOSED_DISTANCE;
     936:	90 93 1b 01 	sts	0x011B, r25
     93a:	10 92 1c 01 	sts	0x011C, r1
				}
				// End do stuff
				reset_buffer();
     93e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     942:	08 95       	ret
			}
		}
		else if (c == 30) { // Set temperature to close
     944:	2e 31       	cpi	r18, 0x1E	; 30
     946:	31 05       	cpc	r19, r1
     948:	59 f4       	brne	.+22     	; 0x960 <__stack+0x61>
			if (p1 != -1) {
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	4f 3f       	cpi	r20, 0xFF	; 255
     94e:	58 07       	cpc	r21, r24
     950:	d9 f1       	breq	.+118    	; 0x9c8 <__stack+0xc9>
				int temperature_to_close = p1 - 128; // The new temperature threshold to close the blinds at
     952:	40 58       	subi	r20, 0x80	; 128
     954:	50 40       	sbci	r21, 0x00	; 0
				// Do stuff here
				MAX_TEMP = temperature_to_close;
     956:	40 93 15 01 	sts	0x0115, r20
				// End do stuff
				reset_buffer();
     95a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     95e:	08 95       	ret
			}
		}
		else if (c == 31) { // Set temperature to open
     960:	2f 31       	cpi	r18, 0x1F	; 31
     962:	31 05       	cpc	r19, r1
     964:	59 f4       	brne	.+22     	; 0x97c <__stack+0x7d>
			if (p1 != -1) {
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	4f 3f       	cpi	r20, 0xFF	; 255
     96a:	52 07       	cpc	r21, r18
     96c:	69 f1       	breq	.+90     	; 0x9c8 <__stack+0xc9>
				int temperature_to_open = p1 - 128; // The new temperature threshold to open the blinds at
     96e:	40 58       	subi	r20, 0x80	; 128
     970:	50 40       	sbci	r21, 0x00	; 0
				// Do stuff here
				MIN_TEMP = temperature_to_open;
     972:	40 93 16 01 	sts	0x0116, r20
				// End do stuff
				reset_buffer();
     976:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     97a:	08 95       	ret
			}
		}
		else if (c == 32) { // Set light to close
     97c:	20 32       	cpi	r18, 0x20	; 32
     97e:	31 05       	cpc	r19, r1
     980:	69 f4       	brne	.+26     	; 0x99c <__stack+0x9d>
			if (p1 != -1 && p2 != -1) {
     982:	2f ef       	ldi	r18, 0xFF	; 255
     984:	4f 3f       	cpi	r20, 0xFF	; 255
     986:	52 07       	cpc	r21, r18
     988:	f9 f0       	breq	.+62     	; 0x9c8 <__stack+0xc9>
     98a:	2f ef       	ldi	r18, 0xFF	; 255
     98c:	8f 3f       	cpi	r24, 0xFF	; 255
     98e:	92 07       	cpc	r25, r18
     990:	d9 f0       	breq	.+54     	; 0x9c8 <__stack+0xc9>
				int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
				// Do stuff here
				MAX_LIGHT = light_to_close;
     992:	80 93 17 01 	sts	0x0117, r24
				// End do stuff
				reset_buffer();
     996:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     99a:	08 95       	ret
			}
		}
		else if (c == 33) { // Set light to open
     99c:	21 32       	cpi	r18, 0x21	; 33
     99e:	31 05       	cpc	r19, r1
     9a0:	69 f4       	brne	.+26     	; 0x9bc <__stack+0xbd>
			if (p1 != -1 && p2 != -1) {
     9a2:	2f ef       	ldi	r18, 0xFF	; 255
     9a4:	4f 3f       	cpi	r20, 0xFF	; 255
     9a6:	52 07       	cpc	r21, r18
     9a8:	79 f0       	breq	.+30     	; 0x9c8 <__stack+0xc9>
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	92 07       	cpc	r25, r18
     9b0:	59 f0       	breq	.+22     	; 0x9c8 <__stack+0xc9>
				int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
				// Do stuff here
				MIN_LIGHT = light_to_open;
     9b2:	80 93 18 01 	sts	0x0118, r24
				// End do stuff
				reset_buffer();
     9b6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     9ba:	08 95       	ret
			}
		}
		else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	2f 3f       	cpi	r18, 0xFF	; 255
     9c0:	38 07       	cpc	r19, r24
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <__stack+0xc9>
			reset_buffer();
     9c4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <reset_buffer>
     9c8:	08 95       	ret

000009ca <setChannelZero>:


//***********FUNCTIONS FOR THE ADC****************

void setChannelZero(){
	ADMUX &= ~(1 << MUX0); //Set channel to 0
     9ca:	ec e7       	ldi	r30, 0x7C	; 124
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	80 83       	st	Z, r24
}
     9d4:	08 95       	ret

000009d6 <setChannelOne>:

void setChannelOne(){
	ADMUX |= (1 << MUX0); // set channel to 1
     9d6:	ec e7       	ldi	r30, 0x7C	; 124
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	81 60       	ori	r24, 0x01	; 1
     9de:	80 83       	st	Z, r24
}
     9e0:	08 95       	ret

000009e2 <setupADC>:

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setupADC()
{
	//Channel = 0 as of now
	ADMUX |= (1 << REFS0); //set reference voltage
     9e2:	ec e7       	ldi	r30, 0x7C	; 124
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	80 64       	ori	r24, 0x40	; 64
     9ea:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
     9ec:	ea e7       	ldi	r30, 0x7A	; 122
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	87 60       	ori	r24, 0x07	; 7
     9f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
     9f6:	80 81       	ld	r24, Z
     9f8:	80 68       	ori	r24, 0x80	; 128
     9fa:	80 83       	st	Z, r24
}
     9fc:	08 95       	ret

000009fe <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     9fe:	ec e7       	ldi	r30, 0x7C	; 124
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	90 81       	ld	r25, Z
	ADCSRA |= (1 << ADEN); //enable the ADC
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
     a04:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     a06:	98 7f       	andi	r25, 0xF8	; 248
     a08:	98 2b       	or	r25, r24
     a0a:	90 83       	st	Z, r25

	// start the conversion
	ADCSRA |= (1<<ADSC);
     a0c:	ea e7       	ldi	r30, 0x7A	; 122
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	80 64       	ori	r24, 0x40	; 64
     a14:	80 83       	st	Z, r24

	// wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
     a16:	80 81       	ld	r24, Z
     a18:	86 fd       	sbrc	r24, 6
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <adc_read+0x18>

	return (ADC);
     a1c:	80 91 78 00 	lds	r24, 0x0078
     a20:	90 91 79 00 	lds	r25, 0x0079
}
     a24:	08 95       	ret

00000a26 <calculateLight>:
	averageTemperature = 0;
}

//**********FUNCTIONS FOR LIGHTSENSOR**************
void calculateLight(){
	setChannelOne();
     a26:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <setChannelOne>
	uint16_t reading = adc_read(1);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <adc_read>
	float temp = (reading/4);
     a30:	bc 01       	movw	r22, r24
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	76 95       	lsr	r23
     a38:	67 95       	ror	r22
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__floatunsisf>
	float light = 100 - ((temp/(float)255)*100); //Light is a percentage. 0 = dark. 100 = bright
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	4f e7       	ldi	r20, 0x7F	; 127
     a48:	53 e4       	ldi	r21, 0x43	; 67
     a4a:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divsf3>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	48 ec       	ldi	r20, 0xC8	; 200
     a54:	52 e4       	ldi	r21, 0x42	; 66
     a56:	0e 94 b1 07 	call	0xf62	; 0xf62 <__mulsf3>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 ec       	ldi	r24, 0xC8	; 200
     a64:	92 e4       	ldi	r25, 0x42	; 66
     a66:	0e 94 d7 05 	call	0xbae	; 0xbae <__subsf3>

	averageLight += (uint8_t)light;
     a6a:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fixunssfsi>
     a6e:	80 91 1e 01 	lds	r24, 0x011E
     a72:	90 91 1f 01 	lds	r25, 0x011F
     a76:	86 0f       	add	r24, r22
     a78:	91 1d       	adc	r25, r1
     a7a:	90 93 1f 01 	sts	0x011F, r25
     a7e:	80 93 1e 01 	sts	0x011E, r24
}
     a82:	08 95       	ret

00000a84 <calculateTemperature>:
//**********FUNCTIONS FOR TEMPSENSOR****************

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
	setChannelZero(); //Channel 0 is used to measure temperature
     a84:	0e 94 e5 04 	call	0x9ca	; 0x9ca <setChannelZero>
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC. (0 - 1023)
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <adc_read>

	//Formula to calculate the temperature
	float voltage = (float)reading/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V.
     a8e:	bc 01       	movw	r22, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 d0 06 	call	0xda0	; 0xda0 <__floatunsisf>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	5a e3       	ldi	r21, 0x3A	; 58
     aa0:	0e 94 b1 07 	call	0xf62	; 0xf62 <__mulsf3>
	voltage *= 5; //Multiply by 5V
     aa4:	46 2f       	mov	r20, r22
     aa6:	57 2f       	mov	r21, r23
     aa8:	68 2f       	mov	r22, r24
     aaa:	79 2f       	mov	r23, r25
     aac:	cb 01       	movw	r24, r22
     aae:	ba 01       	movw	r22, r20
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 ea       	ldi	r20, 0xA0	; 160
     ab6:	50 e4       	ldi	r21, 0x40	; 64
     ab8:	0e 94 b1 07 	call	0xf62	; 0xf62 <__mulsf3>
	voltage -= 0.5; //Deduct the offset ( Offset is 0.5 )
     abc:	46 2f       	mov	r20, r22
     abe:	57 2f       	mov	r21, r23
     ac0:	68 2f       	mov	r22, r24
     ac2:	79 2f       	mov	r23, r25
     ac4:	cb 01       	movw	r24, r22
     ac6:	ba 01       	movw	r22, r20
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	5f e3       	ldi	r21, 0x3F	; 63
     ad0:	0e 94 d7 05 	call	0xbae	; 0xbae <__subsf3>
	float temperature = (float)100*voltage;
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	48 ec       	ldi	r20, 0xC8	; 200
     ada:	52 e4       	ldi	r21, 0x42	; 66
     adc:	0e 94 b1 07 	call	0xf62	; 0xf62 <__mulsf3>

	averageTemperature += (uint8_t)temperature;
     ae0:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fixunssfsi>
     ae4:	80 91 20 01 	lds	r24, 0x0120
     ae8:	90 91 21 01 	lds	r25, 0x0121
     aec:	86 0f       	add	r24, r22
     aee:	91 1d       	adc	r25, r1
     af0:	90 93 21 01 	sts	0x0121, r25
     af4:	80 93 20 01 	sts	0x0120, r24
}
     af8:	08 95       	ret

00000afa <transmitDistance>:
	}
}

//Used for debugging. Sends value of distance to UART.
void transmitDistance(){
	send_temperature(distance);
     afa:	80 91 1b 01 	lds	r24, 0x011B
     afe:	90 91 1c 01 	lds	r25, 0x011C
     b02:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_temperature>
}
     b06:	08 95       	ret

00000b08 <setStartingPosition>:
	averageLight = 0;
}

//Sets starting position of the screen and turns on the corresponding led
void setStartingPosition(){
	if(screen == UP){
     b08:	80 91 1d 01 	lds	r24, 0x011D
     b0c:	88 23       	and	r24, r24
     b0e:	61 f4       	brne	.+24     	; 0xb28 <setStartingPosition+0x20>
		distance = OPEN_DISTANCE;
     b10:	80 91 13 01 	lds	r24, 0x0113
     b14:	80 93 1b 01 	sts	0x011B, r24
     b18:	10 92 1c 01 	sts	0x011C, r1
		turnOnGREEN();
     b1c:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
		send_blinds_status(1);
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
     b26:	08 95       	ret
	} else {
		distance = CLOSED_DISTANCE;
     b28:	80 91 14 01 	lds	r24, 0x0114
     b2c:	80 93 1b 01 	sts	0x011B, r24
     b30:	10 92 1c 01 	sts	0x011C, r1
		turnOnRED();
     b34:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
		send_blinds_status(0);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
     b3e:	08 95       	ret

00000b40 <main>:

//******MAIN********

int main()
{
	setupADC();
     b40:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <setupADC>
	setupLeds();
     b44:	0e 94 4d 01 	call	0x29a	; 0x29a <setupLeds>
	uart_init();
     b48:	0e 94 60 01 	call	0x2c0	; 0x2c0 <uart_init>
	SCH_Init_T1();
     b4c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	setStartingPosition();
     b50:	0e 94 84 05 	call	0xb08	; 0xb08 <setStartingPosition>
	First argument of Add_task is the task you want to execute regularly.
	Second argument is how many ticks it should wait before starting doing it for the first time
	Third argument is how often it should be executed in ticks
	One tick = 10ms - So 200 = 2 secs and 1000 = 10 sec etc...
	*/
	SCH_Add_Task(calculateTemperature, 0, 200); //Read temperature every 2 seconds
     b54:	82 e4       	ldi	r24, 0x42	; 66
     b56:	95 e0       	ldi	r25, 0x05	; 5
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	48 ec       	ldi	r20, 0xC8	; 200
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateLight, 100, 200); //Read light every 2 seconds
     b64:	83 e1       	ldi	r24, 0x13	; 19
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	64 e6       	ldi	r22, 0x64	; 100
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	48 ec       	ldi	r20, 0xC8	; 200
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>

	SCH_Add_Task(calculateAverageTemperature, 1010, 1000); //Calculate average every 10 seconds. Delay it by 10.01 seconds to prevent incomplete average measurements.
     b74:	87 e2       	ldi	r24, 0x27	; 39
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	62 ef       	ldi	r22, 0xF2	; 242
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	48 ee       	ldi	r20, 0xE8	; 232
     b7e:	53 e0       	ldi	r21, 0x03	; 3
     b80:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageLight, 1110, 1000); //Calculate average light every 10 seconds.
     b84:	8e ef       	ldi	r24, 0xFE	; 254
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	66 e5       	ldi	r22, 0x56	; 86
     b8a:	74 e0       	ldi	r23, 0x04	; 4
     b8c:	48 ee       	ldi	r20, 0xE8	; 232
     b8e:	53 e0       	ldi	r21, 0x03	; 3
     b90:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>

	SCH_Add_Task(receiveMessages, 1003, 50); // Receive commands/settings from GUI
     b94:	8a e1       	ldi	r24, 0x1A	; 26
     b96:	94 e0       	ldi	r25, 0x04	; 4
     b98:	6b ee       	ldi	r22, 0xEB	; 235
     b9a:	73 e0       	ldi	r23, 0x03	; 3
     b9c:	42 e3       	ldi	r20, 0x32	; 50
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(transmitDistance, 1004, 100); //enable to transmit height of screen to cmd

	SCH_Start();
     ba4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>

	while(1)
	{
		SCH_Dispatch_Tasks();
     ba8:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <main+0x68>

00000bae <__subsf3>:
     bae:	50 58       	subi	r21, 0x80	; 128

00000bb0 <__addsf3>:
     bb0:	bb 27       	eor	r27, r27
     bb2:	aa 27       	eor	r26, r26
     bb4:	0e d0       	rcall	.+28     	; 0xbd2 <__addsf3x>
     bb6:	84 c1       	rjmp	.+776    	; 0xec0 <__fp_round>
     bb8:	75 d1       	rcall	.+746    	; 0xea4 <__fp_pscA>
     bba:	30 f0       	brcs	.+12     	; 0xbc8 <__addsf3+0x18>
     bbc:	7a d1       	rcall	.+756    	; 0xeb2 <__fp_pscB>
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__addsf3+0x18>
     bc0:	31 f4       	brne	.+12     	; 0xbce <__addsf3+0x1e>
     bc2:	9f 3f       	cpi	r25, 0xFF	; 255
     bc4:	11 f4       	brne	.+4      	; 0xbca <__addsf3+0x1a>
     bc6:	1e f4       	brtc	.+6      	; 0xbce <__addsf3+0x1e>
     bc8:	6a c1       	rjmp	.+724    	; 0xe9e <__fp_nan>
     bca:	0e f4       	brtc	.+2      	; 0xbce <__addsf3+0x1e>
     bcc:	e0 95       	com	r30
     bce:	e7 fb       	bst	r30, 7
     bd0:	37 c1       	rjmp	.+622    	; 0xe40 <__fp_inf>

00000bd2 <__addsf3x>:
     bd2:	e9 2f       	mov	r30, r25
     bd4:	86 d1       	rcall	.+780    	; 0xee2 <__fp_split3>
     bd6:	80 f3       	brcs	.-32     	; 0xbb8 <__addsf3+0x8>
     bd8:	ba 17       	cp	r27, r26
     bda:	62 07       	cpc	r22, r18
     bdc:	73 07       	cpc	r23, r19
     bde:	84 07       	cpc	r24, r20
     be0:	95 07       	cpc	r25, r21
     be2:	18 f0       	brcs	.+6      	; 0xbea <__addsf3x+0x18>
     be4:	71 f4       	brne	.+28     	; 0xc02 <__addsf3x+0x30>
     be6:	9e f5       	brtc	.+102    	; 0xc4e <__addsf3x+0x7c>
     be8:	b5 c1       	rjmp	.+874    	; 0xf54 <__fp_zero>
     bea:	0e f4       	brtc	.+2      	; 0xbee <__addsf3x+0x1c>
     bec:	e0 95       	com	r30
     bee:	0b 2e       	mov	r0, r27
     bf0:	ba 2f       	mov	r27, r26
     bf2:	a0 2d       	mov	r26, r0
     bf4:	0b 01       	movw	r0, r22
     bf6:	b9 01       	movw	r22, r18
     bf8:	90 01       	movw	r18, r0
     bfa:	0c 01       	movw	r0, r24
     bfc:	ca 01       	movw	r24, r20
     bfe:	a0 01       	movw	r20, r0
     c00:	11 24       	eor	r1, r1
     c02:	ff 27       	eor	r31, r31
     c04:	59 1b       	sub	r21, r25
     c06:	99 f0       	breq	.+38     	; 0xc2e <__addsf3x+0x5c>
     c08:	59 3f       	cpi	r21, 0xF9	; 249
     c0a:	50 f4       	brcc	.+20     	; 0xc20 <__addsf3x+0x4e>
     c0c:	50 3e       	cpi	r21, 0xE0	; 224
     c0e:	68 f1       	brcs	.+90     	; 0xc6a <__addsf3x+0x98>
     c10:	1a 16       	cp	r1, r26
     c12:	f0 40       	sbci	r31, 0x00	; 0
     c14:	a2 2f       	mov	r26, r18
     c16:	23 2f       	mov	r18, r19
     c18:	34 2f       	mov	r19, r20
     c1a:	44 27       	eor	r20, r20
     c1c:	58 5f       	subi	r21, 0xF8	; 248
     c1e:	f3 cf       	rjmp	.-26     	; 0xc06 <__addsf3x+0x34>
     c20:	46 95       	lsr	r20
     c22:	37 95       	ror	r19
     c24:	27 95       	ror	r18
     c26:	a7 95       	ror	r26
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	53 95       	inc	r21
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <__addsf3x+0x4e>
     c2e:	7e f4       	brtc	.+30     	; 0xc4e <__addsf3x+0x7c>
     c30:	1f 16       	cp	r1, r31
     c32:	ba 0b       	sbc	r27, r26
     c34:	62 0b       	sbc	r22, r18
     c36:	73 0b       	sbc	r23, r19
     c38:	84 0b       	sbc	r24, r20
     c3a:	ba f0       	brmi	.+46     	; 0xc6a <__addsf3x+0x98>
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <__addsf3x+0x96>
     c40:	ff 0f       	add	r31, r31
     c42:	bb 1f       	adc	r27, r27
     c44:	66 1f       	adc	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	c2 f7       	brpl	.-16     	; 0xc3c <__addsf3x+0x6a>
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__addsf3x+0x98>
     c4e:	ba 0f       	add	r27, r26
     c50:	62 1f       	adc	r22, r18
     c52:	73 1f       	adc	r23, r19
     c54:	84 1f       	adc	r24, r20
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__addsf3x+0x98>
     c58:	87 95       	ror	r24
     c5a:	77 95       	ror	r23
     c5c:	67 95       	ror	r22
     c5e:	b7 95       	ror	r27
     c60:	f7 95       	ror	r31
     c62:	9e 3f       	cpi	r25, 0xFE	; 254
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0x96>
     c66:	b3 cf       	rjmp	.-154    	; 0xbce <__addsf3+0x1e>
     c68:	93 95       	inc	r25
     c6a:	88 0f       	add	r24, r24
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0x9e>
     c6e:	99 27       	eor	r25, r25
     c70:	ee 0f       	add	r30, r30
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	08 95       	ret

00000c78 <__divsf3>:
     c78:	0c d0       	rcall	.+24     	; 0xc92 <__divsf3x>
     c7a:	22 c1       	rjmp	.+580    	; 0xec0 <__fp_round>
     c7c:	1a d1       	rcall	.+564    	; 0xeb2 <__fp_pscB>
     c7e:	40 f0       	brcs	.+16     	; 0xc90 <__divsf3+0x18>
     c80:	11 d1       	rcall	.+546    	; 0xea4 <__fp_pscA>
     c82:	30 f0       	brcs	.+12     	; 0xc90 <__divsf3+0x18>
     c84:	21 f4       	brne	.+8      	; 0xc8e <__divsf3+0x16>
     c86:	5f 3f       	cpi	r21, 0xFF	; 255
     c88:	19 f0       	breq	.+6      	; 0xc90 <__divsf3+0x18>
     c8a:	da c0       	rjmp	.+436    	; 0xe40 <__fp_inf>
     c8c:	51 11       	cpse	r21, r1
     c8e:	63 c1       	rjmp	.+710    	; 0xf56 <__fp_szero>
     c90:	06 c1       	rjmp	.+524    	; 0xe9e <__fp_nan>

00000c92 <__divsf3x>:
     c92:	27 d1       	rcall	.+590    	; 0xee2 <__fp_split3>
     c94:	98 f3       	brcs	.-26     	; 0xc7c <__divsf3+0x4>

00000c96 <__divsf3_pse>:
     c96:	99 23       	and	r25, r25
     c98:	c9 f3       	breq	.-14     	; 0xc8c <__divsf3+0x14>
     c9a:	55 23       	and	r21, r21
     c9c:	b1 f3       	breq	.-20     	; 0xc8a <__divsf3+0x12>
     c9e:	95 1b       	sub	r25, r21
     ca0:	55 0b       	sbc	r21, r21
     ca2:	bb 27       	eor	r27, r27
     ca4:	aa 27       	eor	r26, r26
     ca6:	62 17       	cp	r22, r18
     ca8:	73 07       	cpc	r23, r19
     caa:	84 07       	cpc	r24, r20
     cac:	38 f0       	brcs	.+14     	; 0xcbc <__divsf3_pse+0x26>
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	22 0f       	add	r18, r18
     cb4:	33 1f       	adc	r19, r19
     cb6:	44 1f       	adc	r20, r20
     cb8:	aa 1f       	adc	r26, r26
     cba:	a9 f3       	breq	.-22     	; 0xca6 <__divsf3_pse+0x10>
     cbc:	33 d0       	rcall	.+102    	; 0xd24 <__divsf3_pse+0x8e>
     cbe:	0e 2e       	mov	r0, r30
     cc0:	3a f0       	brmi	.+14     	; 0xcd0 <__divsf3_pse+0x3a>
     cc2:	e0 e8       	ldi	r30, 0x80	; 128
     cc4:	30 d0       	rcall	.+96     	; 0xd26 <__divsf3_pse+0x90>
     cc6:	91 50       	subi	r25, 0x01	; 1
     cc8:	50 40       	sbci	r21, 0x00	; 0
     cca:	e6 95       	lsr	r30
     ccc:	00 1c       	adc	r0, r0
     cce:	ca f7       	brpl	.-14     	; 0xcc2 <__divsf3_pse+0x2c>
     cd0:	29 d0       	rcall	.+82     	; 0xd24 <__divsf3_pse+0x8e>
     cd2:	fe 2f       	mov	r31, r30
     cd4:	27 d0       	rcall	.+78     	; 0xd24 <__divsf3_pse+0x8e>
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	bb 1f       	adc	r27, r27
     cde:	26 17       	cp	r18, r22
     ce0:	37 07       	cpc	r19, r23
     ce2:	48 07       	cpc	r20, r24
     ce4:	ab 07       	cpc	r26, r27
     ce6:	b0 e8       	ldi	r27, 0x80	; 128
     ce8:	09 f0       	breq	.+2      	; 0xcec <__divsf3_pse+0x56>
     cea:	bb 0b       	sbc	r27, r27
     cec:	80 2d       	mov	r24, r0
     cee:	bf 01       	movw	r22, r30
     cf0:	ff 27       	eor	r31, r31
     cf2:	93 58       	subi	r25, 0x83	; 131
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	2a f0       	brmi	.+10     	; 0xd02 <__divsf3_pse+0x6c>
     cf8:	9e 3f       	cpi	r25, 0xFE	; 254
     cfa:	51 05       	cpc	r21, r1
     cfc:	68 f0       	brcs	.+26     	; 0xd18 <__divsf3_pse+0x82>
     cfe:	a0 c0       	rjmp	.+320    	; 0xe40 <__fp_inf>
     d00:	2a c1       	rjmp	.+596    	; 0xf56 <__fp_szero>
     d02:	5f 3f       	cpi	r21, 0xFF	; 255
     d04:	ec f3       	brlt	.-6      	; 0xd00 <__divsf3_pse+0x6a>
     d06:	98 3e       	cpi	r25, 0xE8	; 232
     d08:	dc f3       	brlt	.-10     	; 0xd00 <__divsf3_pse+0x6a>
     d0a:	86 95       	lsr	r24
     d0c:	77 95       	ror	r23
     d0e:	67 95       	ror	r22
     d10:	b7 95       	ror	r27
     d12:	f7 95       	ror	r31
     d14:	9f 5f       	subi	r25, 0xFF	; 255
     d16:	c9 f7       	brne	.-14     	; 0xd0a <__divsf3_pse+0x74>
     d18:	88 0f       	add	r24, r24
     d1a:	91 1d       	adc	r25, r1
     d1c:	96 95       	lsr	r25
     d1e:	87 95       	ror	r24
     d20:	97 f9       	bld	r25, 7
     d22:	08 95       	ret
     d24:	e1 e0       	ldi	r30, 0x01	; 1
     d26:	66 0f       	add	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	88 1f       	adc	r24, r24
     d2c:	bb 1f       	adc	r27, r27
     d2e:	62 17       	cp	r22, r18
     d30:	73 07       	cpc	r23, r19
     d32:	84 07       	cpc	r24, r20
     d34:	ba 07       	cpc	r27, r26
     d36:	20 f0       	brcs	.+8      	; 0xd40 <__divsf3_pse+0xaa>
     d38:	62 1b       	sub	r22, r18
     d3a:	73 0b       	sbc	r23, r19
     d3c:	84 0b       	sbc	r24, r20
     d3e:	ba 0b       	sbc	r27, r26
     d40:	ee 1f       	adc	r30, r30
     d42:	88 f7       	brcc	.-30     	; 0xd26 <__divsf3_pse+0x90>
     d44:	e0 95       	com	r30
     d46:	08 95       	ret

00000d48 <__fixunssfsi>:
     d48:	d4 d0       	rcall	.+424    	; 0xef2 <__fp_splitA>
     d4a:	88 f0       	brcs	.+34     	; 0xd6e <__fixunssfsi+0x26>
     d4c:	9f 57       	subi	r25, 0x7F	; 127
     d4e:	90 f0       	brcs	.+36     	; 0xd74 <__fixunssfsi+0x2c>
     d50:	b9 2f       	mov	r27, r25
     d52:	99 27       	eor	r25, r25
     d54:	b7 51       	subi	r27, 0x17	; 23
     d56:	a0 f0       	brcs	.+40     	; 0xd80 <__fixunssfsi+0x38>
     d58:	d1 f0       	breq	.+52     	; 0xd8e <__fixunssfsi+0x46>
     d5a:	66 0f       	add	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	88 1f       	adc	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	1a f0       	brmi	.+6      	; 0xd6a <__fixunssfsi+0x22>
     d64:	ba 95       	dec	r27
     d66:	c9 f7       	brne	.-14     	; 0xd5a <__fixunssfsi+0x12>
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <__fixunssfsi+0x46>
     d6a:	b1 30       	cpi	r27, 0x01	; 1
     d6c:	81 f0       	breq	.+32     	; 0xd8e <__fixunssfsi+0x46>
     d6e:	f2 d0       	rcall	.+484    	; 0xf54 <__fp_zero>
     d70:	b1 e0       	ldi	r27, 0x01	; 1
     d72:	08 95       	ret
     d74:	ef c0       	rjmp	.+478    	; 0xf54 <__fp_zero>
     d76:	67 2f       	mov	r22, r23
     d78:	78 2f       	mov	r23, r24
     d7a:	88 27       	eor	r24, r24
     d7c:	b8 5f       	subi	r27, 0xF8	; 248
     d7e:	39 f0       	breq	.+14     	; 0xd8e <__fixunssfsi+0x46>
     d80:	b9 3f       	cpi	r27, 0xF9	; 249
     d82:	cc f3       	brlt	.-14     	; 0xd76 <__fixunssfsi+0x2e>
     d84:	86 95       	lsr	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	b3 95       	inc	r27
     d8c:	d9 f7       	brne	.-10     	; 0xd84 <__fixunssfsi+0x3c>
     d8e:	3e f4       	brtc	.+14     	; 0xd9e <__fixunssfsi+0x56>
     d90:	90 95       	com	r25
     d92:	80 95       	com	r24
     d94:	70 95       	com	r23
     d96:	61 95       	neg	r22
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8f 4f       	sbci	r24, 0xFF	; 255
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	08 95       	ret

00000da0 <__floatunsisf>:
     da0:	e8 94       	clt
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <__floatsisf+0x12>

00000da4 <__floatsisf>:
     da4:	97 fb       	bst	r25, 7
     da6:	3e f4       	brtc	.+14     	; 0xdb6 <__floatsisf+0x12>
     da8:	90 95       	com	r25
     daa:	80 95       	com	r24
     dac:	70 95       	com	r23
     dae:	61 95       	neg	r22
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	8f 4f       	sbci	r24, 0xFF	; 255
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	99 23       	and	r25, r25
     db8:	a9 f0       	breq	.+42     	; 0xde4 <__floatsisf+0x40>
     dba:	f9 2f       	mov	r31, r25
     dbc:	96 e9       	ldi	r25, 0x96	; 150
     dbe:	bb 27       	eor	r27, r27
     dc0:	93 95       	inc	r25
     dc2:	f6 95       	lsr	r31
     dc4:	87 95       	ror	r24
     dc6:	77 95       	ror	r23
     dc8:	67 95       	ror	r22
     dca:	b7 95       	ror	r27
     dcc:	f1 11       	cpse	r31, r1
     dce:	f8 cf       	rjmp	.-16     	; 0xdc0 <__floatsisf+0x1c>
     dd0:	fa f4       	brpl	.+62     	; 0xe10 <__floatsisf+0x6c>
     dd2:	bb 0f       	add	r27, r27
     dd4:	11 f4       	brne	.+4      	; 0xdda <__floatsisf+0x36>
     dd6:	60 ff       	sbrs	r22, 0
     dd8:	1b c0       	rjmp	.+54     	; 0xe10 <__floatsisf+0x6c>
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	16 c0       	rjmp	.+44     	; 0xe10 <__floatsisf+0x6c>
     de4:	88 23       	and	r24, r24
     de6:	11 f0       	breq	.+4      	; 0xdec <__floatsisf+0x48>
     de8:	96 e9       	ldi	r25, 0x96	; 150
     dea:	11 c0       	rjmp	.+34     	; 0xe0e <__floatsisf+0x6a>
     dec:	77 23       	and	r23, r23
     dee:	21 f0       	breq	.+8      	; 0xdf8 <__floatsisf+0x54>
     df0:	9e e8       	ldi	r25, 0x8E	; 142
     df2:	87 2f       	mov	r24, r23
     df4:	76 2f       	mov	r23, r22
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <__floatsisf+0x5e>
     df8:	66 23       	and	r22, r22
     dfa:	71 f0       	breq	.+28     	; 0xe18 <__floatsisf+0x74>
     dfc:	96 e8       	ldi	r25, 0x86	; 134
     dfe:	86 2f       	mov	r24, r22
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	2a f0       	brmi	.+10     	; 0xe10 <__floatsisf+0x6c>
     e06:	9a 95       	dec	r25
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	da f7       	brpl	.-10     	; 0xe06 <__floatsisf+0x62>
     e10:	88 0f       	add	r24, r24
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	97 f9       	bld	r25, 7
     e18:	08 95       	ret

00000e1a <floor>:
     e1a:	85 d0       	rcall	.+266    	; 0xf26 <__fp_trunc>
     e1c:	80 f0       	brcs	.+32     	; 0xe3e <floor+0x24>
     e1e:	9f 37       	cpi	r25, 0x7F	; 127
     e20:	40 f4       	brcc	.+16     	; 0xe32 <floor+0x18>
     e22:	91 11       	cpse	r25, r1
     e24:	0e f0       	brts	.+2      	; 0xe28 <floor+0xe>
     e26:	97 c0       	rjmp	.+302    	; 0xf56 <__fp_szero>
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	9f eb       	ldi	r25, 0xBF	; 191
     e30:	08 95       	ret
     e32:	26 f4       	brtc	.+8      	; 0xe3c <floor+0x22>
     e34:	1b 16       	cp	r1, r27
     e36:	61 1d       	adc	r22, r1
     e38:	71 1d       	adc	r23, r1
     e3a:	81 1d       	adc	r24, r1
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <__fp_mintl>
     e3e:	21 c0       	rjmp	.+66     	; 0xe82 <__fp_mpack>

00000e40 <__fp_inf>:
     e40:	97 f9       	bld	r25, 7
     e42:	9f 67       	ori	r25, 0x7F	; 127
     e44:	80 e8       	ldi	r24, 0x80	; 128
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <__fp_mintl>:
     e4c:	88 23       	and	r24, r24
     e4e:	71 f4       	brne	.+28     	; 0xe6c <__fp_mintl+0x20>
     e50:	77 23       	and	r23, r23
     e52:	21 f0       	breq	.+8      	; 0xe5c <__fp_mintl+0x10>
     e54:	98 50       	subi	r25, 0x08	; 8
     e56:	87 2b       	or	r24, r23
     e58:	76 2f       	mov	r23, r22
     e5a:	07 c0       	rjmp	.+14     	; 0xe6a <__fp_mintl+0x1e>
     e5c:	66 23       	and	r22, r22
     e5e:	11 f4       	brne	.+4      	; 0xe64 <__fp_mintl+0x18>
     e60:	99 27       	eor	r25, r25
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <__fp_mintl+0x32>
     e64:	90 51       	subi	r25, 0x10	; 16
     e66:	86 2b       	or	r24, r22
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	2a f0       	brmi	.+10     	; 0xe78 <__fp_mintl+0x2c>
     e6e:	9a 95       	dec	r25
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	da f7       	brpl	.-10     	; 0xe6e <__fp_mintl+0x22>
     e78:	88 0f       	add	r24, r24
     e7a:	96 95       	lsr	r25
     e7c:	87 95       	ror	r24
     e7e:	97 f9       	bld	r25, 7
     e80:	08 95       	ret

00000e82 <__fp_mpack>:
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	31 f0       	breq	.+12     	; 0xe92 <__fp_mpack_finite+0xc>

00000e86 <__fp_mpack_finite>:
     e86:	91 50       	subi	r25, 0x01	; 1
     e88:	20 f4       	brcc	.+8      	; 0xe92 <__fp_mpack_finite+0xc>
     e8a:	87 95       	ror	r24
     e8c:	77 95       	ror	r23
     e8e:	67 95       	ror	r22
     e90:	b7 95       	ror	r27
     e92:	88 0f       	add	r24, r24
     e94:	91 1d       	adc	r25, r1
     e96:	96 95       	lsr	r25
     e98:	87 95       	ror	r24
     e9a:	97 f9       	bld	r25, 7
     e9c:	08 95       	ret

00000e9e <__fp_nan>:
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	80 ec       	ldi	r24, 0xC0	; 192
     ea2:	08 95       	ret

00000ea4 <__fp_pscA>:
     ea4:	00 24       	eor	r0, r0
     ea6:	0a 94       	dec	r0
     ea8:	16 16       	cp	r1, r22
     eaa:	17 06       	cpc	r1, r23
     eac:	18 06       	cpc	r1, r24
     eae:	09 06       	cpc	r0, r25
     eb0:	08 95       	ret

00000eb2 <__fp_pscB>:
     eb2:	00 24       	eor	r0, r0
     eb4:	0a 94       	dec	r0
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	05 06       	cpc	r0, r21
     ebe:	08 95       	ret

00000ec0 <__fp_round>:
     ec0:	09 2e       	mov	r0, r25
     ec2:	03 94       	inc	r0
     ec4:	00 0c       	add	r0, r0
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_round+0xc>
     ec8:	88 23       	and	r24, r24
     eca:	52 f0       	brmi	.+20     	; 0xee0 <__fp_round+0x20>
     ecc:	bb 0f       	add	r27, r27
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fp_round+0x20>
     ed0:	bf 2b       	or	r27, r31
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__fp_round+0x18>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__fp_round+0x20>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	08 95       	ret

00000ee2 <__fp_split3>:
     ee2:	57 fd       	sbrc	r21, 7
     ee4:	90 58       	subi	r25, 0x80	; 128
     ee6:	44 0f       	add	r20, r20
     ee8:	55 1f       	adc	r21, r21
     eea:	59 f0       	breq	.+22     	; 0xf02 <__fp_splitA+0x10>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	71 f0       	breq	.+28     	; 0xf0c <__fp_splitA+0x1a>
     ef0:	47 95       	ror	r20

00000ef2 <__fp_splitA>:
     ef2:	88 0f       	add	r24, r24
     ef4:	97 fb       	bst	r25, 7
     ef6:	99 1f       	adc	r25, r25
     ef8:	61 f0       	breq	.+24     	; 0xf12 <__fp_splitA+0x20>
     efa:	9f 3f       	cpi	r25, 0xFF	; 255
     efc:	79 f0       	breq	.+30     	; 0xf1c <__fp_splitA+0x2a>
     efe:	87 95       	ror	r24
     f00:	08 95       	ret
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	14 06       	cpc	r1, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	f2 cf       	rjmp	.-28     	; 0xef0 <__fp_split3+0xe>
     f0c:	46 95       	lsr	r20
     f0e:	f1 df       	rcall	.-30     	; 0xef2 <__fp_splitA>
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <__fp_splitA+0x30>
     f12:	16 16       	cp	r1, r22
     f14:	17 06       	cpc	r1, r23
     f16:	18 06       	cpc	r1, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	f1 cf       	rjmp	.-30     	; 0xefe <__fp_splitA+0xc>
     f1c:	86 95       	lsr	r24
     f1e:	71 05       	cpc	r23, r1
     f20:	61 05       	cpc	r22, r1
     f22:	08 94       	sec
     f24:	08 95       	ret

00000f26 <__fp_trunc>:
     f26:	e5 df       	rcall	.-54     	; 0xef2 <__fp_splitA>
     f28:	a0 f0       	brcs	.+40     	; 0xf52 <__fp_trunc+0x2c>
     f2a:	be e7       	ldi	r27, 0x7E	; 126
     f2c:	b9 17       	cp	r27, r25
     f2e:	88 f4       	brcc	.+34     	; 0xf52 <__fp_trunc+0x2c>
     f30:	bb 27       	eor	r27, r27
     f32:	9f 38       	cpi	r25, 0x8F	; 143
     f34:	60 f4       	brcc	.+24     	; 0xf4e <__fp_trunc+0x28>
     f36:	16 16       	cp	r1, r22
     f38:	b1 1d       	adc	r27, r1
     f3a:	67 2f       	mov	r22, r23
     f3c:	78 2f       	mov	r23, r24
     f3e:	88 27       	eor	r24, r24
     f40:	98 5f       	subi	r25, 0xF8	; 248
     f42:	f7 cf       	rjmp	.-18     	; 0xf32 <__fp_trunc+0xc>
     f44:	86 95       	lsr	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	b1 1d       	adc	r27, r1
     f4c:	93 95       	inc	r25
     f4e:	96 39       	cpi	r25, 0x96	; 150
     f50:	c8 f3       	brcs	.-14     	; 0xf44 <__fp_trunc+0x1e>
     f52:	08 95       	ret

00000f54 <__fp_zero>:
     f54:	e8 94       	clt

00000f56 <__fp_szero>:
     f56:	bb 27       	eor	r27, r27
     f58:	66 27       	eor	r22, r22
     f5a:	77 27       	eor	r23, r23
     f5c:	cb 01       	movw	r24, r22
     f5e:	97 f9       	bld	r25, 7
     f60:	08 95       	ret

00000f62 <__mulsf3>:
     f62:	0b d0       	rcall	.+22     	; 0xf7a <__mulsf3x>
     f64:	ad cf       	rjmp	.-166    	; 0xec0 <__fp_round>
     f66:	9e df       	rcall	.-196    	; 0xea4 <__fp_pscA>
     f68:	28 f0       	brcs	.+10     	; 0xf74 <__mulsf3+0x12>
     f6a:	a3 df       	rcall	.-186    	; 0xeb2 <__fp_pscB>
     f6c:	18 f0       	brcs	.+6      	; 0xf74 <__mulsf3+0x12>
     f6e:	95 23       	and	r25, r21
     f70:	09 f0       	breq	.+2      	; 0xf74 <__mulsf3+0x12>
     f72:	66 cf       	rjmp	.-308    	; 0xe40 <__fp_inf>
     f74:	94 cf       	rjmp	.-216    	; 0xe9e <__fp_nan>
     f76:	11 24       	eor	r1, r1
     f78:	ee cf       	rjmp	.-36     	; 0xf56 <__fp_szero>

00000f7a <__mulsf3x>:
     f7a:	b3 df       	rcall	.-154    	; 0xee2 <__fp_split3>
     f7c:	a0 f3       	brcs	.-24     	; 0xf66 <__mulsf3+0x4>

00000f7e <__mulsf3_pse>:
     f7e:	95 9f       	mul	r25, r21
     f80:	d1 f3       	breq	.-12     	; 0xf76 <__mulsf3+0x14>
     f82:	95 0f       	add	r25, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	55 1f       	adc	r21, r21
     f88:	62 9f       	mul	r22, r18
     f8a:	f0 01       	movw	r30, r0
     f8c:	72 9f       	mul	r23, r18
     f8e:	bb 27       	eor	r27, r27
     f90:	f0 0d       	add	r31, r0
     f92:	b1 1d       	adc	r27, r1
     f94:	63 9f       	mul	r22, r19
     f96:	aa 27       	eor	r26, r26
     f98:	f0 0d       	add	r31, r0
     f9a:	b1 1d       	adc	r27, r1
     f9c:	aa 1f       	adc	r26, r26
     f9e:	64 9f       	mul	r22, r20
     fa0:	66 27       	eor	r22, r22
     fa2:	b0 0d       	add	r27, r0
     fa4:	a1 1d       	adc	r26, r1
     fa6:	66 1f       	adc	r22, r22
     fa8:	82 9f       	mul	r24, r18
     faa:	22 27       	eor	r18, r18
     fac:	b0 0d       	add	r27, r0
     fae:	a1 1d       	adc	r26, r1
     fb0:	62 1f       	adc	r22, r18
     fb2:	73 9f       	mul	r23, r19
     fb4:	b0 0d       	add	r27, r0
     fb6:	a1 1d       	adc	r26, r1
     fb8:	62 1f       	adc	r22, r18
     fba:	83 9f       	mul	r24, r19
     fbc:	a0 0d       	add	r26, r0
     fbe:	61 1d       	adc	r22, r1
     fc0:	22 1f       	adc	r18, r18
     fc2:	74 9f       	mul	r23, r20
     fc4:	33 27       	eor	r19, r19
     fc6:	a0 0d       	add	r26, r0
     fc8:	61 1d       	adc	r22, r1
     fca:	23 1f       	adc	r18, r19
     fcc:	84 9f       	mul	r24, r20
     fce:	60 0d       	add	r22, r0
     fd0:	21 1d       	adc	r18, r1
     fd2:	82 2f       	mov	r24, r18
     fd4:	76 2f       	mov	r23, r22
     fd6:	6a 2f       	mov	r22, r26
     fd8:	11 24       	eor	r1, r1
     fda:	9f 57       	subi	r25, 0x7F	; 127
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	8a f0       	brmi	.+34     	; 0x1002 <__mulsf3_pse+0x84>
     fe0:	e1 f0       	breq	.+56     	; 0x101a <__mulsf3_pse+0x9c>
     fe2:	88 23       	and	r24, r24
     fe4:	4a f0       	brmi	.+18     	; 0xff8 <__mulsf3_pse+0x7a>
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	bb 1f       	adc	r27, r27
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <__mulsf3_pse+0x64>
     ff8:	9e 3f       	cpi	r25, 0xFE	; 254
     ffa:	51 05       	cpc	r21, r1
     ffc:	70 f0       	brcs	.+28     	; 0x101a <__mulsf3_pse+0x9c>
     ffe:	20 cf       	rjmp	.-448    	; 0xe40 <__fp_inf>
    1000:	aa cf       	rjmp	.-172    	; 0xf56 <__fp_szero>
    1002:	5f 3f       	cpi	r21, 0xFF	; 255
    1004:	ec f3       	brlt	.-6      	; 0x1000 <__mulsf3_pse+0x82>
    1006:	98 3e       	cpi	r25, 0xE8	; 232
    1008:	dc f3       	brlt	.-10     	; 0x1000 <__mulsf3_pse+0x82>
    100a:	86 95       	lsr	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f7 95       	ror	r31
    1014:	e7 95       	ror	r30
    1016:	9f 5f       	subi	r25, 0xFF	; 255
    1018:	c1 f7       	brne	.-16     	; 0x100a <__mulsf3_pse+0x8c>
    101a:	fe 2b       	or	r31, r30
    101c:	88 0f       	add	r24, r24
    101e:	91 1d       	adc	r25, r1
    1020:	96 95       	lsr	r25
    1022:	87 95       	ror	r24
    1024:	97 f9       	bld	r25, 7
    1026:	08 95       	ret

00001028 <__udivmodhi4>:
    1028:	aa 1b       	sub	r26, r26
    102a:	bb 1b       	sub	r27, r27
    102c:	51 e1       	ldi	r21, 0x11	; 17
    102e:	07 c0       	rjmp	.+14     	; 0x103e <__udivmodhi4_ep>

00001030 <__udivmodhi4_loop>:
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	a6 17       	cp	r26, r22
    1036:	b7 07       	cpc	r27, r23
    1038:	10 f0       	brcs	.+4      	; 0x103e <__udivmodhi4_ep>
    103a:	a6 1b       	sub	r26, r22
    103c:	b7 0b       	sbc	r27, r23

0000103e <__udivmodhi4_ep>:
    103e:	88 1f       	adc	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	5a 95       	dec	r21
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__udivmodhi4_loop>
    1046:	80 95       	com	r24
    1048:	90 95       	com	r25
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	08 95       	ret

00001050 <__divmodhi4>:
    1050:	97 fb       	bst	r25, 7
    1052:	09 2e       	mov	r0, r25
    1054:	07 26       	eor	r0, r23
    1056:	0a d0       	rcall	.+20     	; 0x106c <__divmodhi4_neg1>
    1058:	77 fd       	sbrc	r23, 7
    105a:	04 d0       	rcall	.+8      	; 0x1064 <__divmodhi4_neg2>
    105c:	e5 df       	rcall	.-54     	; 0x1028 <__udivmodhi4>
    105e:	06 d0       	rcall	.+12     	; 0x106c <__divmodhi4_neg1>
    1060:	00 20       	and	r0, r0
    1062:	1a f4       	brpl	.+6      	; 0x106a <__divmodhi4_exit>

00001064 <__divmodhi4_neg2>:
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255

0000106a <__divmodhi4_exit>:
    106a:	08 95       	ret

0000106c <__divmodhi4_neg1>:
    106c:	f6 f7       	brtc	.-4      	; 0x106a <__divmodhi4_exit>
    106e:	90 95       	com	r25
    1070:	81 95       	neg	r24
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	08 95       	ret

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
