
testsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         0000000a  00800100  00000ef4  00000f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  0080010a  0080010a  00000f92  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007cf  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f25  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fa  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069a  00000000  00000000  00005117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000057b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bf  00000000  00000000  0000603d  2**0
=======
  0 .data         0000000a  00800100  00000f74  00001008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080010a  0080010a  00001012  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007cf  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003d98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fba  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000409  00000000  00000000  00004e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c2  00000000  00000000  0000523b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00005900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  00005cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bf  00000000  00000000  000062c1  2**0
>>>>>>> origin/Roy
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	fe e0       	ldi	r31, 0x0E	; 14
=======
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	ff e0       	ldi	r31, 0x0F	; 15
>>>>>>> origin/Roy
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
<<<<<<< HEAD
  8a:	11 e0       	ldi	r17, 0x01	; 1
=======
  8a:	12 e0       	ldi	r17, 0x02	; 2
>>>>>>> origin/Roy
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
<<<<<<< HEAD
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <main>
  9e:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_exit>
=======
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 04 	call	0x9de	; 0x9de <main>
  9e:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <_exit>
>>>>>>> origin/Roy

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	dc 01       	movw	r26, r24
  b0:	eb 01       	movw	r28, r22
  b2:	8a 01       	movw	r16, r20
<<<<<<< HEAD
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b4:	80 91 11 01 	lds	r24, 0x0111
  b8:	90 91 12 01 	lds	r25, 0x0112
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e8 e1       	ldi	r30, 0x18	; 24
=======
  b4:	80 91 0f 01 	lds	r24, 0x010F
  b8:	90 91 10 01 	lds	r25, 0x0110
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e6 e1       	ldi	r30, 0x16	; 22
>>>>>>> origin/Roy
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c8:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	2b 30       	cpi	r18, 0x0B	; 11
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
   {
      Index++;
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  f0:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
<<<<<<< HEAD
 106:	ef 5e       	subi	r30, 0xEF	; 239
=======
 106:	e1 5f       	subi	r30, 0xF1	; 241
>>>>>>> origin/Roy
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	b1 83       	std	Z+1, r27	; 0x01
 10c:	a0 83       	st	Z, r26
   SCH_tasks_G[Index].Delay =DELAY;
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 116:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
 118:	84 2f       	mov	r24, r20
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
<<<<<<< HEAD
 138:	ef 5e       	subi	r30, 0xEF	; 239
=======
 138:	e1 5f       	subi	r30, 0xF1	; 241
>>>>>>> origin/Roy
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 148:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
<<<<<<< HEAD
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 15c:	c7 e1       	ldi	r28, 0x17	; 23
=======
 15c:	c5 e1       	ldi	r28, 0x15	; 21
>>>>>>> origin/Roy
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 184:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	1a 30       	cpi	r17, 0x0A	; 10
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 1bc:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 1be:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
}
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1e8:	78 94       	sei
}
 1ea:	08 95       	ret

000001ec <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
<<<<<<< HEAD
 20a:	e1 e1       	ldi	r30, 0x11	; 17
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
 212:	27 e5       	ldi	r18, 0x57	; 87
=======
 20a:	ef e0       	ldi	r30, 0x0F	; 15
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	21 ee       	ldi	r18, 0xE1	; 225
>>>>>>> origin/Roy
 214:	31 e0       	ldi	r19, 0x01	; 1
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <turnOnYELLOW>:
void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
}

void turnOnYELLOW(){
	PORTB |= _BV(PORTB3);
 26a:	2b 9a       	sbi	0x05, 3	; 5
}
 26c:	08 95       	ret

0000026e <turnOffYELLOW>:

void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
 26e:	2b 98       	cbi	0x05, 3	; 5
}
 270:	08 95       	ret

00000272 <lowerScreen>:

//********FUNCTIONS TO CONTROL THE SCREEN*************

//Actually lowers the screen
void lowerScreen(){
	distance -= SCROLLSPEED;
<<<<<<< HEAD
 272:	80 91 0b 01 	lds	r24, 0x010B
 276:	90 91 0c 01 	lds	r25, 0x010C
 27a:	44 97       	sbiw	r24, 0x14	; 20
 27c:	90 93 0c 01 	sts	0x010C, r25
 280:	80 93 0b 01 	sts	0x010B, r24
}
 284:	08 95       	ret

00000286 <upScreen>:
=======
 272:	80 91 0a 02 	lds	r24, 0x020A
 276:	90 91 08 01 	lds	r25, 0x0108
 27a:	89 1b       	sub	r24, r25
 27c:	80 93 0a 02 	sts	0x020A, r24
}
 280:	08 95       	ret

00000282 <upScreen>:
>>>>>>> origin/Roy

//Actually rises the screen
void upScreen(){
	distance += SCROLLSPEED;
<<<<<<< HEAD
 286:	80 91 0b 01 	lds	r24, 0x010B
 28a:	90 91 0c 01 	lds	r25, 0x010C
 28e:	44 96       	adiw	r24, 0x14	; 20
 290:	90 93 0c 01 	sts	0x010C, r25
 294:	80 93 0b 01 	sts	0x010B, r24
}
 298:	08 95       	ret

0000029a <setupLeds>:
=======
 282:	90 91 0a 02 	lds	r25, 0x020A
 286:	80 91 08 01 	lds	r24, 0x0108
 28a:	89 0f       	add	r24, r25
 28c:	80 93 0a 02 	sts	0x020A, r24
}
 290:	08 95       	ret

00000292 <scrollDown>:

//Scroll screen down if it is UP. Set instruction to SCROLLDOWN to tell CheckCommand() and CheckDistance() what they should do.
void scrollDown()
{
	if(screen == UP){
 292:	80 91 01 01 	lds	r24, 0x0101
 296:	88 23       	and	r24, r24
 298:	11 f4       	brne	.+4      	; 0x29e <scrollDown+0xc>
		instruction = SCROLLDOWN;
 29a:	10 92 00 01 	sts	0x0100, r1
 29e:	08 95       	ret

000002a0 <scrollUp>:
}

//Scroll screen up if it is DOWN. Set instruction to SCROLLUP to tell CheckCommand() and CheckDistance() what they should do.
void scrollUp()
{
	if(screen == DOWN){
 2a0:	80 91 01 01 	lds	r24, 0x0101
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	11 f4       	brne	.+4      	; 0x2ac <scrollUp+0xc>
		instruction = SCROLLUP;
 2a8:	80 93 00 01 	sts	0x0100, r24
 2ac:	08 95       	ret

000002ae <resetAverageTemperature>:
	send_temperature(averageTemperature);
}

//reset average temperature back to 0 so next measurement can begin
void resetAverageTemperature(){
	averageTemperature = 0; //reset average temperature.
 2ae:	10 92 0e 01 	sts	0x010E, r1
 2b2:	10 92 0d 01 	sts	0x010D, r1
}
 2b6:	08 95       	ret

000002b8 <resetAverageLight>:

	averageLight += (uint8_t)light;
}

void resetAverageLight(){
	averageLight = 0; //reset average temperature.
 2b8:	10 92 0c 01 	sts	0x010C, r1
 2bc:	10 92 0b 01 	sts	0x010B, r1
}
 2c0:	08 95       	ret

000002c2 <temperatureCheck>:


//***********FUNCTIONS TO CHECK VALUES**************
//Adjusts the screen based on the measured temperature value. Either scroll up or down if possible
void temperatureCheck(){
	if(averageTemperature >= MAX_TEMP){
 2c2:	80 91 0d 01 	lds	r24, 0x010D
 2c6:	90 91 0e 01 	lds	r25, 0x010E
 2ca:	20 91 02 01 	lds	r18, 0x0102
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	82 17       	cp	r24, r18
 2d2:	93 07       	cpc	r25, r19
 2d4:	18 f0       	brcs	.+6      	; 0x2dc <temperatureCheck+0x1a>
		scrollDown();
 2d6:	0e 94 49 01 	call	0x292	; 0x292 <scrollDown>
 2da:	08 95       	ret
	} else if (averageTemperature <= MIN_TEMP){
 2dc:	20 91 05 01 	lds	r18, 0x0105
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <temperatureCheck+0x2a>
		scrollUp();
 2e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <scrollUp>
 2ec:	08 95       	ret

000002ee <lightCheck>:
	}
}

//Adjusts the screen based on the measured light value. Either scroll up or down if possible
void lightCheck(){
	if(averageLight >= MAX_LIGHT){
 2ee:	80 91 0b 01 	lds	r24, 0x010B
 2f2:	90 91 0c 01 	lds	r25, 0x010C
 2f6:	20 91 06 01 	lds	r18, 0x0106
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	82 17       	cp	r24, r18
 2fe:	93 07       	cpc	r25, r19
 300:	18 f0       	brcs	.+6      	; 0x308 <lightCheck+0x1a>
		scrollDown();
 302:	0e 94 49 01 	call	0x292	; 0x292 <scrollDown>
 306:	08 95       	ret
	} else if (averageLight <= MIN_LIGHT){
 308:	20 91 07 01 	lds	r18, 0x0107
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	10 f0       	brcs	.+4      	; 0x318 <lightCheck+0x2a>
		scrollUp();
 314:	0e 94 50 01 	call	0x2a0	; 0x2a0 <scrollUp>
 318:	08 95       	ret

0000031a <setupLeds>:
unsigned char upscreen;
>>>>>>> origin/Roy

uint8_t ready = 1;

//**********FUNCTIONS TO CONTROL LEDS*****************
void setupLeds(){
	DDRB |= _BV(DDB5); //red led pin 5
<<<<<<< HEAD
 29a:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB3); //yellow led pin 3
 29c:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB1); //green led pin 1
 29e:	21 9a       	sbi	0x04, 1	; 4
}
 2a0:	08 95       	ret

000002a2 <turnOnRED>:

void turnOnRED(){
	 PORTB |= _BV(PORTB5);
 2a2:	2d 9a       	sbi	0x05, 5	; 5
}
 2a4:	08 95       	ret

000002a6 <turnOffRED>:

void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
 2a6:	2d 98       	cbi	0x05, 5	; 5
}
 2a8:	08 95       	ret

000002aa <turnOnGREEN>:
=======
 31a:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB3); //yellow led pin 3
 31c:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB1); //green led pin 1
 31e:	21 9a       	sbi	0x04, 1	; 4
}
 320:	08 95       	ret

00000322 <turnOnRED>:

void turnOnRED(){
	 PORTB |= _BV(PORTB5);
 322:	2d 9a       	sbi	0x05, 5	; 5
}
 324:	08 95       	ret

00000326 <turnOffRED>:

void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
 326:	2d 98       	cbi	0x05, 5	; 5
}
 328:	08 95       	ret

0000032a <turnOnGREEN>:
>>>>>>> origin/Roy
void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
}

void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
<<<<<<< HEAD
 2aa:	29 9a       	sbi	0x05, 1	; 5
=======
 32a:	29 9a       	sbi	0x05, 1	; 5
}
 32c:	08 95       	ret

0000032e <setStartingPosition>:
	}
>>>>>>> origin/Roy
}
 2ac:	08 95       	ret

<<<<<<< HEAD
000002ae <turnOffGREEN>:

void turnOffGREEN(){
	PORTB &= ~_BV(PORTB1);
 2ae:	29 98       	cbi	0x05, 1	; 5
}
 2b0:	08 95       	ret

000002b2 <turnOffAll>:

void turnOffAll(){
	turnOffYELLOW();
 2b2:	0e 94 37 01 	call	0x26e	; 0x26e <turnOffYELLOW>
	turnOffRED();
 2b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOffRED>
	turnOffGREEN();
 2ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOffGREEN>
}
 2be:	08 95       	ret

000002c0 <uart_init>:
=======
//Sets starting position of the screen and turns on the corresponding led
void setStartingPosition(){
	if(screen == UP){
 32e:	80 91 01 01 	lds	r24, 0x0101
 332:	88 23       	and	r24, r24
 334:	39 f4       	brne	.+14     	; 0x344 <setStartingPosition+0x16>
		distance = MAX_DISTANCE;
 336:	80 91 03 01 	lds	r24, 0x0103
 33a:	80 93 0a 02 	sts	0x020A, r24
		turnOnGREEN();
 33e:	0e 94 95 01 	call	0x32a	; 0x32a <turnOnGREEN>
 342:	08 95       	ret
	} else {
		distance = MIN_DISTANCE;
 344:	80 91 04 01 	lds	r24, 0x0104
 348:	80 93 0a 02 	sts	0x020A, r24
		turnOnRED();
 34c:	0e 94 91 01 	call	0x322	; 0x322 <turnOnRED>
 350:	08 95       	ret

00000352 <turnOffGREEN>:
void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
}

void turnOffGREEN(){
	PORTB &= ~_BV(PORTB1);
 352:	29 98       	cbi	0x05, 1	; 5
}
 354:	08 95       	ret

00000356 <turnOffAll>:

void turnOffAll(){
	turnOffYELLOW();
 356:	0e 94 37 01 	call	0x26e	; 0x26e <turnOffYELLOW>
	turnOffRED();
 35a:	0e 94 93 01 	call	0x326	; 0x326 <turnOffRED>
	turnOffGREEN();
 35e:	0e 94 a9 01 	call	0x352	; 0x352 <turnOffGREEN>
}
 362:	08 95       	ret

00000364 <uart_init>:
>>>>>>> origin/Roy

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
<<<<<<< HEAD
 2c0:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 2c4:	83 e3       	ldi	r24, 0x33	; 51
 2c6:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 2ca:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter and receiver
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	80 93 c2 00 	sts	0x00C2, r24
}
 2da:	08 95       	ret

000002dc <transmit>:
=======
 364:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 368:	83 e3       	ldi	r24, 0x33	; 51
 36a:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 36e:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter and receiver
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 372:	88 e1       	ldi	r24, 0x18	; 24
 374:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	80 93 c2 00 	sts	0x00C2, r24
}
 37e:	08 95       	ret

00000380 <transmit>:
>>>>>>> origin/Roy
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
<<<<<<< HEAD
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <transmit+0x4>
	UDR0 = data;
 2e6:	80 93 c6 00 	sts	0x00C6, r24
}
 2ea:	08 95       	ret

000002ec <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
	while (*c != -1) {
 2f2:	88 81       	ld	r24, Y
 2f4:	99 81       	ldd	r25, Y+1	; 0x01
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	8f 3f       	cpi	r24, 0xFF	; 255
 2fa:	92 07       	cpc	r25, r18
 2fc:	49 f0       	breq	.+18     	; 0x310 <transmit_string+0x24>
=======
 380:	e0 ec       	ldi	r30, 0xC0	; 192
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	90 81       	ld	r25, Z
 386:	95 ff       	sbrs	r25, 5
 388:	fd cf       	rjmp	.-6      	; 0x384 <transmit+0x4>
	UDR0 = data;
 38a:	80 93 c6 00 	sts	0x00C6, r24
}
 38e:	08 95       	ret

00000390 <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
	while (*c != -1) {
 396:	88 81       	ld	r24, Y
 398:	99 81       	ldd	r25, Y+1	; 0x01
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	8f 3f       	cpi	r24, 0xFF	; 255
 39e:	92 07       	cpc	r25, r18
 3a0:	49 f0       	breq	.+18     	; 0x3b4 <transmit_string+0x24>
>>>>>>> origin/Roy
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
<<<<<<< HEAD
 2fe:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 300:	0e 94 6e 01 	call	0x2dc	; 0x2dc <transmit>
=======
 3a2:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 3a4:	0e 94 c0 01 	call	0x380	; 0x380 <transmit>
>>>>>>> origin/Roy
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
<<<<<<< HEAD
 304:	89 91       	ld	r24, Y+
 306:	99 91       	ld	r25, Y+
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	8f 3f       	cpi	r24, 0xFF	; 255
 30c:	92 07       	cpc	r25, r18
 30e:	c1 f7       	brne	.-16     	; 0x300 <transmit_string+0x14>
=======
 3a8:	89 91       	ld	r24, Y+
 3aa:	99 91       	ld	r25, Y+
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	8f 3f       	cpi	r24, 0xFF	; 255
 3b0:	92 07       	cpc	r25, r18
 3b2:	c1 f7       	brne	.-16     	; 0x3a4 <transmit_string+0x14>
>>>>>>> origin/Roy
		transmit(*c);
		c++;
	}
}
<<<<<<< HEAD
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <receive>:
=======
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <transmit_max_temp>:
>>>>>>> origin/Roy


void transmit_max_temp(){
	transmit_string(MAX_TEMP);
 3ba:	80 91 02 01 	lds	r24, 0x0102
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 c8 01 	call	0x390	; 0x390 <transmit_string>
}
 3c4:	08 95       	ret

000003c6 <receive>:
// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
<<<<<<< HEAD
 316:	e0 ec       	ldi	r30, 0xC0	; 192
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	90 81       	ld	r25, Z
 31c:	99 23       	and	r25, r25
 31e:	ec f7       	brge	.-6      	; 0x31a <receive+0x4>
	return response;
}
 320:	08 95       	ret

00000322 <receive_non_blocking>:
=======
 3c6:	e0 ec       	ldi	r30, 0xC0	; 192
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	90 81       	ld	r25, Z
 3cc:	99 23       	and	r25, r25
 3ce:	ec f7       	brge	.-6      	; 0x3ca <receive+0x4>
	return response;
}
 3d0:	08 95       	ret

000003d2 <receive_non_blocking>:
>>>>>>> origin/Roy

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & (1<<RXC0)) { // is the received data bit set in the UCSR0A register?
<<<<<<< HEAD
 322:	80 91 c0 00 	lds	r24, 0x00C0
 326:	88 23       	and	r24, r24
 328:	24 f4       	brge	.+8      	; 0x332 <receive_non_blocking+0x10>
	return (int) UDR0;
 32a:	80 91 c6 00 	lds	r24, 0x00C6
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 95       	ret
}
return -1;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	9f ef       	ldi	r25, 0xFF	; 255
}
 336:	08 95       	ret

00000338 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	28 97       	sbiw	r28, 0x08	; 8
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	8c 01       	movw	r16, r24
=======
 3d2:	80 91 c0 00 	lds	r24, 0x00C0
 3d6:	88 23       	and	r24, r24
 3d8:	24 f4       	brge	.+8      	; 0x3e2 <receive_non_blocking+0x10>
	return (int) UDR0;
 3da:	80 91 c6 00 	lds	r24, 0x00C6
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	08 95       	ret
}
return -1;
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9f ef       	ldi	r25, 0xFF	; 255
}
 3e6:	08 95       	ret

000003e8 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	28 97       	sbiw	r28, 0x08	; 8
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	8c 01       	movw	r16, r24
>>>>>>> origin/Roy
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
<<<<<<< HEAD
 352:	99 23       	and	r25, r25
 354:	cc f0       	brlt	.+50     	; 0x388 <send_light+0x50>
=======
 402:	99 23       	and	r25, r25
 404:	cc f0       	brlt	.+50     	; 0x438 <send_light+0x50>
>>>>>>> origin/Roy
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
<<<<<<< HEAD
 356:	bc 01       	movw	r22, r24
 358:	99 23       	and	r25, r25
 35a:	14 f4       	brge	.+4      	; 0x360 <send_light+0x28>
 35c:	61 50       	subi	r22, 0x01	; 1
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	67 2f       	mov	r22, r23
 362:	77 0f       	add	r23, r23
 364:	77 0b       	sbc	r23, r23
 366:	88 27       	eor	r24, r24
 368:	77 fd       	sbrc	r23, 7
 36a:	80 95       	com	r24
 36c:	98 2f       	mov	r25, r24
 36e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
 372:	0e 94 4a 06 	call	0xc94	; 0xc94 <floor>
 376:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
 37a:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 37c:	c8 01       	movw	r24, r16
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	71 e0       	ldi	r23, 0x01	; 1
 382:	0e 94 65 07 	call	0xeca	; 0xeca <__divmodhi4>
 386:	02 c0       	rjmp	.+4      	; 0x38c <send_light+0x54>
=======
 406:	bc 01       	movw	r22, r24
 408:	99 23       	and	r25, r25
 40a:	14 f4       	brge	.+4      	; 0x410 <send_light+0x28>
 40c:	61 50       	subi	r22, 0x01	; 1
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	67 2f       	mov	r22, r23
 412:	77 0f       	add	r23, r23
 414:	77 0b       	sbc	r23, r23
 416:	88 27       	eor	r24, r24
 418:	77 fd       	sbrc	r23, 7
 41a:	80 95       	com	r24
 41c:	98 2f       	mov	r25, r24
 41e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__floatsisf>
 422:	0e 94 8a 06 	call	0xd14	; 0xd14 <floor>
 426:	0e 94 21 06 	call	0xc42	; 0xc42 <__fixunssfsi>
 42a:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 42c:	c8 01       	movw	r24, r16
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divmodhi4>
 436:	02 c0       	rjmp	.+4      	; 0x43c <send_light+0x54>
>>>>>>> origin/Roy
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
		val2 = 0;
<<<<<<< HEAD
 388:	80 e0       	ldi	r24, 0x00	; 0
=======
 438:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> origin/Roy
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
<<<<<<< HEAD
 38a:	40 e0       	ldi	r20, 0x00	; 0
=======
 43a:	40 e0       	ldi	r20, 0x00	; 0
>>>>>>> origin/Roy
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
<<<<<<< HEAD
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	3a 83       	std	Y+2, r19	; 0x02
 392:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 394:	4b 83       	std	Y+3, r20	; 0x03
 396:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 398:	8d 83       	std	Y+5, r24	; 0x05
 39a:	1e 82       	std	Y+6, r1	; 0x06
=======
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	3a 83       	std	Y+2, r19	; 0x02
 442:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 444:	4b 83       	std	Y+3, r20	; 0x03
 446:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 448:	8d 83       	std	Y+5, r24	; 0x05
 44a:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	98 87       	std	Y+8, r25	; 0x08
 452:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 c8 01 	call	0x390	; 0x390 <transmit_string>
}
 45c:	28 96       	adiw	r28, 0x08	; 8
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <calculateAverageLight>:
}

//This function is used to calculate the average temperature.
void calculateAverageLight()
{
	averageLight /= 5; //calculate average from 10 measured values
 472:	80 91 0b 01 	lds	r24, 0x010B
 476:	90 91 0c 01 	lds	r25, 0x010C
 47a:	65 e0       	ldi	r22, 0x05	; 5
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	0e 94 91 07 	call	0xf22	; 0xf22 <__udivmodhi4>
 482:	86 2f       	mov	r24, r22
 484:	60 93 0b 01 	sts	0x010B, r22
 488:	70 93 0c 01 	sts	0x010C, r23
	//transmit(averageLight); //Send average to screen.
	send_light((uint8_t)averageLight);
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <send_light>
}
 492:	08 95       	ret

00000494 <send_temperature>:
>>>>>>> origin/Roy
	buffer[3] = -1;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	98 87       	std	Y+8, r25	; 0x08
 3a2:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 3ac:	28 96       	adiw	r28, 0x08	; 8
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <send_temperature>:

// Sends the temperature via UART
void send_temperature(int temp) {
<<<<<<< HEAD
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <send_temperature+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <send_temperature+0x8>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <send_temperature+0xa>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 3d0:	80 58       	subi	r24, 0x80	; 128
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;
	
	if (temp < 0) {
 3d4:	2a f0       	brmi	.+10     	; 0x3e0 <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 3d6:	8f 3f       	cpi	r24, 0xFF	; 255
 3d8:	91 05       	cpc	r25, r1
 3da:	29 f0       	breq	.+10     	; 0x3e6 <send_temperature+0x24>
 3dc:	24 f0       	brlt	.+8      	; 0x3e6 <send_temperature+0x24>
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <send_temperature+0x22>
=======
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <send_temperature+0x6>
 49a:	00 d0       	rcall	.+0      	; 0x49c <send_temperature+0x8>
 49c:	00 d0       	rcall	.+0      	; 0x49e <send_temperature+0xa>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 4a2:	80 58       	subi	r24, 0x80	; 128
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;
	
	if (temp < 0) {
 4a6:	2a f0       	brmi	.+10     	; 0x4b2 <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 4a8:	8f 3f       	cpi	r24, 0xFF	; 255
 4aa:	91 05       	cpc	r25, r1
 4ac:	29 f0       	breq	.+10     	; 0x4b8 <send_temperature+0x24>
 4ae:	24 f0       	brlt	.+8      	; 0x4b8 <send_temperature+0x24>
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <send_temperature+0x22>
>>>>>>> origin/Roy
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;
	
	if (temp < 0) {
		val = 0;
<<<<<<< HEAD
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
=======
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
>>>>>>> origin/Roy
	else {
		val = (uint8_t)temp;
	}
	
	int buffer[3];
	buffer[0] = 2;
<<<<<<< HEAD
 3e6:	22 e0       	ldi	r18, 0x02	; 2
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	3a 83       	std	Y+2, r19	; 0x02
 3ec:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 3ee:	8b 83       	std	Y+3, r24	; 0x03
 3f0:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	9e 83       	std	Y+6, r25	; 0x06
 3f8:	8d 83       	std	Y+5, r24	; 0x05
=======
 4b8:	22 e0       	ldi	r18, 0x02	; 2
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	3a 83       	std	Y+2, r19	; 0x02
 4be:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 4c0:	8b 83       	std	Y+3, r24	; 0x03
 4c2:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	9f ef       	ldi	r25, 0xFF	; 255
 4c8:	9e 83       	std	Y+6, r25	; 0x06
 4ca:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	0e 94 c8 01 	call	0x390	; 0x390 <transmit_string>
}
 4d4:	26 96       	adiw	r28, 0x06	; 6
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 5; //calculate average from 6 measured values with intervals of 10 seconds.
 4e6:	80 91 0d 01 	lds	r24, 0x010D
 4ea:	90 91 0e 01 	lds	r25, 0x010E
 4ee:	65 e0       	ldi	r22, 0x05	; 5
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	0e 94 91 07 	call	0xf22	; 0xf22 <__udivmodhi4>
 4f6:	86 2f       	mov	r24, r22
 4f8:	97 2f       	mov	r25, r23
 4fa:	60 93 0d 01 	sts	0x010D, r22
 4fe:	70 93 0e 01 	sts	0x010E, r23
	//transmit(averageTemperature); //Send average temperature to screen.
	send_temperature(averageTemperature);
 502:	0e 94 4a 02 	call	0x494	; 0x494 <send_temperature>
}
 506:	08 95       	ret

00000508 <send_blinds_status>:
>>>>>>> origin/Roy
	transmit_string(buffer);
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 402:	26 96       	adiw	r28, 0x06	; 6
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <send_blinds_status>:

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t status) {
<<<<<<< HEAD
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	28 97       	sbiw	r28, 0x08	; 8
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
=======
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	28 97       	sbiw	r28, 0x08	; 8
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
>>>>>>> origin/Roy
	if (status > 2) {
		status = 2;
	}
	int buffer[4];
	buffer[0] = 3;
<<<<<<< HEAD
 428:	23 e0       	ldi	r18, 0x03	; 3
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	3a 83       	std	Y+2, r19	; 0x02
 42e:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 430:	1c 82       	std	Y+4, r1	; 0x04
 432:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
 434:	83 30       	cpi	r24, 0x03	; 3
 436:	08 f0       	brcs	.+2      	; 0x43a <send_blinds_status+0x26>
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	8d 83       	std	Y+5, r24	; 0x05
 43c:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	98 87       	std	Y+8, r25	; 0x08
 444:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_string>
}
 44e:	28 96       	adiw	r28, 0x08	; 8
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <checkDistance>:
	averageLight = 0;
}

//Check to see if we are finished scrolling
void checkDistance(){
	if(distance <= MIN_DISTANCE && instruction == SCROLLDOWN && screen == SCROLLING){ //we finished scrolling down
 460:	80 91 0b 01 	lds	r24, 0x010B
 464:	90 91 0c 01 	lds	r25, 0x010C
 468:	20 91 04 01 	lds	r18, 0x0104
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	28 17       	cp	r18, r24
 470:	39 07       	cpc	r19, r25
 472:	40 f1       	brcs	.+80     	; 0x4c4 <checkDistance+0x64>
 474:	20 91 01 01 	lds	r18, 0x0101
 478:	22 23       	and	r18, r18
 47a:	21 f5       	brne	.+72     	; 0x4c4 <checkDistance+0x64>
 47c:	20 91 02 01 	lds	r18, 0x0102
 480:	21 30       	cpi	r18, 0x01	; 1
 482:	01 f5       	brne	.+64     	; 0x4c4 <checkDistance+0x64>
		SCH_Delete_Task(lowerscreen);
 484:	80 91 83 01 	lds	r24, 0x0183
 488:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 48c:	80 91 81 01 	lds	r24, 0x0181
 490:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 494:	80 91 86 01 	lds	r24, 0x0186
 498:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		distance = MIN_DISTANCE;
 49c:	80 91 04 01 	lds	r24, 0x0104
 4a0:	80 93 0b 01 	sts	0x010B, r24
 4a4:	10 92 0c 01 	sts	0x010C, r1
		screen = DOWN;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 02 01 	sts	0x0102, r24
		instruction = NEUTRAL;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 01 01 	sts	0x0101, r24
		turnOffAll();
 4b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnRED();
 4b8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
		send_blinds_status(0);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
 4c2:	08 95       	ret
	} else if(distance >= MAX_DISTANCE && instruction == SCROLLUP && screen == SCROLLING){ //we finished scrolling up
 4c4:	20 91 03 01 	lds	r18, 0x0103
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	82 17       	cp	r24, r18
 4cc:	93 07       	cpc	r25, r19
 4ce:	30 f1       	brcs	.+76     	; 0x51c <checkDistance+0xbc>
 4d0:	80 91 01 01 	lds	r24, 0x0101
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	11 f5       	brne	.+68     	; 0x51c <checkDistance+0xbc>
 4d8:	80 91 02 01 	lds	r24, 0x0102
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	f1 f4       	brne	.+60     	; 0x51c <checkDistance+0xbc>
		SCH_Delete_Task(upscreen);
 4e0:	80 91 80 01 	lds	r24, 0x0180
 4e4:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 4e8:	80 91 81 01 	lds	r24, 0x0181
 4ec:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 4f0:	80 91 86 01 	lds	r24, 0x0186
 4f4:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		distance = MAX_DISTANCE;
 4f8:	80 91 03 01 	lds	r24, 0x0103
 4fc:	80 93 0b 01 	sts	0x010B, r24
 500:	10 92 0c 01 	sts	0x010C, r1
		screen = UP;
 504:	10 92 02 01 	sts	0x0102, r1
		instruction = NEUTRAL;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	80 93 01 01 	sts	0x0101, r24
		turnOffAll();
 50e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		turnOnGREEN();
 512:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
		send_blinds_status(1);
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
 51c:	08 95       	ret

0000051e <ScrollUp>:
}

//Set instruction to SCROLLUP, scroll the screen, and light correct leds
void ScrollUp()
{
	if(screen == DOWN && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll up if it is DOWN and hasnt received other instruction before
 51e:	80 91 02 01 	lds	r24, 0x0102
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	79 f5       	brne	.+94     	; 0x584 <ScrollUp+0x66>
 526:	80 91 01 01 	lds	r24, 0x0101
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	59 f5       	brne	.+86     	; 0x584 <ScrollUp+0x66>
		instruction = SCROLLUP;
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	80 93 01 01 	sts	0x0101, r24
		screen = SCROLLING;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 02 01 	sts	0x0102, r24
		send_blinds_status(2);
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
		turnOffAll();
 540:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		upscreen = SCH_Add_Task(upScreen, 5, 100);
 544:	83 e4       	ldi	r24, 0x43	; 67
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	65 e0       	ldi	r22, 0x05	; 5
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	44 e6       	ldi	r20, 0x64	; 100
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 554:	80 93 80 01 	sts	0x0180, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
 558:	85 e3       	ldi	r24, 0x35	; 53
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	66 e0       	ldi	r22, 0x06	; 6
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	44 e6       	ldi	r20, 0x64	; 100
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 568:	80 93 81 01 	sts	0x0181, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 56, 100);
 56c:	87 e3       	ldi	r24, 0x37	; 55
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	68 e3       	ldi	r22, 0x38	; 56
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	44 e6       	ldi	r20, 0x64	; 100
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 57c:	80 93 86 01 	sts	0x0186, r24
		turnOnGREEN();
 580:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
 584:	08 95       	ret

00000586 <ScrollDown>:
}

//Set instruction to SCROLLDOWN, scroll the screen and light correct leds
void ScrollDown()
{
	if(screen == UP && instruction == NEUTRAL && screen != SCROLLING){ // Only scroll down if it is UP and hasnt received other instruction before
 586:	80 91 02 01 	lds	r24, 0x0102
 58a:	88 23       	and	r24, r24
 58c:	69 f5       	brne	.+90     	; 0x5e8 <ScrollDown+0x62>
 58e:	80 91 01 01 	lds	r24, 0x0101
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	49 f5       	brne	.+82     	; 0x5e8 <ScrollDown+0x62>
		instruction = SCROLLDOWN;
 596:	10 92 01 01 	sts	0x0101, r1
		screen = SCROLLING;
 59a:	80 93 02 01 	sts	0x0102, r24
		send_blinds_status(2);
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	0e 94 0a 02 	call	0x414	; 0x414 <send_blinds_status>
		turnOffAll();
 5a4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <turnOffAll>
		lowerscreen = SCH_Add_Task(lowerScreen, 5, 100);
 5a8:	89 e3       	ldi	r24, 0x39	; 57
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	65 e0       	ldi	r22, 0x05	; 5
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	44 e6       	ldi	r20, 0x64	; 100
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5b8:	80 93 83 01 	sts	0x0183, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 6, 100);
 5bc:	85 e3       	ldi	r24, 0x35	; 53
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	66 e0       	ldi	r22, 0x06	; 6
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	44 e6       	ldi	r20, 0x64	; 100
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5cc:	80 93 81 01 	sts	0x0181, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 56, 100);
 5d0:	87 e3       	ldi	r24, 0x37	; 55
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	68 e3       	ldi	r22, 0x38	; 56
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	44 e6       	ldi	r20, 0x64	; 100
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5e0:	80 93 86 01 	sts	0x0186, r24
		turnOnRED();
 5e4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
 5e8:	08 95       	ret

000005ea <calculateAverageLight>:


//This function is used to calculate the average temperature.
void calculateAverageLight()
{
	averageLight /= 5; //calculate average from 5 measured values
 5ea:	80 91 0d 01 	lds	r24, 0x010D
 5ee:	90 91 0e 01 	lds	r25, 0x010E
 5f2:	65 e0       	ldi	r22, 0x05	; 5
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	0e 94 51 07 	call	0xea2	; 0xea2 <__udivmodhi4>
 5fa:	86 2f       	mov	r24, r22
 5fc:	97 2f       	mov	r25, r23
 5fe:	60 93 0d 01 	sts	0x010D, r22
 602:	70 93 0e 01 	sts	0x010E, r23
	if(averageLight >= MAX_LIGHT){
 606:	20 91 07 01 	lds	r18, 0x0107
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	82 17       	cp	r24, r18
 60e:	93 07       	cpc	r25, r19
 610:	18 f0       	brcs	.+6      	; 0x618 <calculateAverageLight+0x2e>
		ScrollDown();
 612:	0e 94 c3 02 	call	0x586	; 0x586 <ScrollDown>
 616:	08 c0       	rjmp	.+16     	; 0x628 <calculateAverageLight+0x3e>
	} else if (averageLight <= MIN_LIGHT){
 618:	20 91 08 01 	lds	r18, 0x0108
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	28 17       	cp	r18, r24
 620:	39 07       	cpc	r19, r25
 622:	10 f0       	brcs	.+4      	; 0x628 <calculateAverageLight+0x3e>
		ScrollUp();
 624:	0e 94 8f 02 	call	0x51e	; 0x51e <ScrollUp>
	}
	send_light((uint8_t)averageLight);
 628:	80 91 0d 01 	lds	r24, 0x010D
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 9c 01 	call	0x338	; 0x338 <send_light>
	averageLight = 0;
 632:	10 92 0e 01 	sts	0x010E, r1
 636:	10 92 0d 01 	sts	0x010D, r1
}
 63a:	08 95       	ret

0000063c <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 5; //calculate average from 5 values
 63c:	80 91 0f 01 	lds	r24, 0x010F
 640:	90 91 10 01 	lds	r25, 0x0110
 644:	65 e0       	ldi	r22, 0x05	; 5
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	0e 94 51 07 	call	0xea2	; 0xea2 <__udivmodhi4>
 64c:	86 2f       	mov	r24, r22
 64e:	97 2f       	mov	r25, r23
 650:	60 93 0f 01 	sts	0x010F, r22
 654:	70 93 10 01 	sts	0x0110, r23
	if(averageTemperature >= MAX_TEMP){
 658:	20 91 05 01 	lds	r18, 0x0105
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	82 17       	cp	r24, r18
 660:	93 07       	cpc	r25, r19
 662:	18 f0       	brcs	.+6      	; 0x66a <calculateAverageTemperature+0x2e>
		ScrollDown();
 664:	0e 94 c3 02 	call	0x586	; 0x586 <ScrollDown>
 668:	08 c0       	rjmp	.+16     	; 0x67a <calculateAverageTemperature+0x3e>
	} else if (averageTemperature <= MIN_TEMP){
 66a:	20 91 06 01 	lds	r18, 0x0106
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	10 f0       	brcs	.+4      	; 0x67a <calculateAverageTemperature+0x3e>
		ScrollUp();
 676:	0e 94 8f 02 	call	0x51e	; 0x51e <ScrollUp>
	}
	send_temperature(averageTemperature);
 67a:	80 91 0f 01 	lds	r24, 0x010F
 67e:	90 91 10 01 	lds	r25, 0x0110
 682:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_temperature>
	averageTemperature = 0;
 686:	10 92 10 01 	sts	0x0110, r1
 68a:	10 92 0f 01 	sts	0x010F, r1
}
 68e:	08 95       	ret

00000690 <reset_buffer>:
=======
 51c:	23 e0       	ldi	r18, 0x03	; 3
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	3a 83       	std	Y+2, r19	; 0x02
 522:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 524:	1c 82       	std	Y+4, r1	; 0x04
 526:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	08 f0       	brcs	.+2      	; 0x52e <send_blinds_status+0x26>
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	8d 83       	std	Y+5, r24	; 0x05
 530:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	98 87       	std	Y+8, r25	; 0x08
 538:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	0e 94 c8 01 	call	0x390	; 0x390 <transmit_string>
}
 542:	28 96       	adiw	r28, 0x08	; 8
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <checkCommand>:
	}
}

//This function uses the instruction from the ScrollDown/Up functions to flash the leds and scroll the screen.
void checkCommand(){
	if(instruction == SCROLLDOWN && screen != SCROLLING){
 554:	80 91 00 01 	lds	r24, 0x0100
 558:	88 23       	and	r24, r24
 55a:	69 f5       	brne	.+90     	; 0x5b6 <checkCommand+0x62>
 55c:	90 91 01 01 	lds	r25, 0x0101
 560:	91 30       	cpi	r25, 0x01	; 1
 562:	49 f1       	breq	.+82     	; 0x5b6 <checkCommand+0x62>
		screen = SCROLLING;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 01 01 	sts	0x0101, r24
		send_blinds_status(2);
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	0e 94 84 02 	call	0x508	; 0x508 <send_blinds_status>
		turnOffAll();
 570:	0e 94 ab 01 	call	0x356	; 0x356 <turnOffAll>
		lowerscreen = SCH_Add_Task(lowerScreen, 0, 50);
 574:	89 e3       	ldi	r24, 0x39	; 57
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	42 e3       	ldi	r20, 0x32	; 50
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 584:	80 93 0e 02 	sts	0x020E, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 0, 100);
 588:	85 e3       	ldi	r24, 0x35	; 53
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	44 e6       	ldi	r20, 0x64	; 100
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 598:	80 93 0c 02 	sts	0x020C, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 50, 100);
 59c:	87 e3       	ldi	r24, 0x37	; 55
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	62 e3       	ldi	r22, 0x32	; 50
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	44 e6       	ldi	r20, 0x64	; 100
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5ac:	80 93 11 02 	sts	0x0211, r24
		turnOnRED();
 5b0:	0e 94 91 01 	call	0x322	; 0x322 <turnOnRED>
 5b4:	2e c0       	rjmp	.+92     	; 0x612 <checkCommand+0xbe>
	} else if(instruction == SCROLLUP && screen != SCROLLING){
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	61 f5       	brne	.+88     	; 0x612 <checkCommand+0xbe>
 5ba:	80 91 01 01 	lds	r24, 0x0101
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	41 f1       	breq	.+80     	; 0x612 <checkCommand+0xbe>
		screen = SCROLLING;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 01 01 	sts	0x0101, r24
		send_blinds_status(2);
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	0e 94 84 02 	call	0x508	; 0x508 <send_blinds_status>
		turnOffAll();
 5ce:	0e 94 ab 01 	call	0x356	; 0x356 <turnOffAll>
		upscreen = SCH_Add_Task(upScreen, 0, 50);
 5d2:	81 e4       	ldi	r24, 0x41	; 65
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	42 e3       	ldi	r20, 0x32	; 50
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5e2:	80 93 0b 02 	sts	0x020B, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 0, 100);
 5e6:	85 e3       	ldi	r24, 0x35	; 53
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	44 e6       	ldi	r20, 0x64	; 100
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5f6:	80 93 0c 02 	sts	0x020C, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 50, 100);
 5fa:	87 e3       	ldi	r24, 0x37	; 55
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	62 e3       	ldi	r22, 0x32	; 50
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	44 e6       	ldi	r20, 0x64	; 100
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 60a:	80 93 11 02 	sts	0x0211, r24
		turnOnGREEN();
 60e:	0e 94 95 01 	call	0x32a	; 0x32a <turnOnGREEN>
	}

	if(distance == MIN_DISTANCE && instruction == SCROLLDOWN && screen == SCROLLING){
 612:	80 91 0a 02 	lds	r24, 0x020A
 616:	90 91 04 01 	lds	r25, 0x0104
 61a:	89 17       	cp	r24, r25
 61c:	11 f5       	brne	.+68     	; 0x662 <checkCommand+0x10e>
 61e:	90 91 00 01 	lds	r25, 0x0100
 622:	99 23       	and	r25, r25
 624:	f1 f4       	brne	.+60     	; 0x662 <checkCommand+0x10e>
 626:	90 91 01 01 	lds	r25, 0x0101
 62a:	91 30       	cpi	r25, 0x01	; 1
 62c:	d1 f4       	brne	.+52     	; 0x662 <checkCommand+0x10e>
		screen = DOWN;
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	80 93 01 01 	sts	0x0101, r24
		instruction = NEUTRAL;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 63a:	0e 94 ab 01 	call	0x356	; 0x356 <turnOffAll>
		SCH_Delete_Task(lowerscreen);
 63e:	80 91 0e 02 	lds	r24, 0x020E
 642:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 646:	80 91 0c 02 	lds	r24, 0x020C
 64a:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 64e:	80 91 11 02 	lds	r24, 0x0211
 652:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		turnOnRED();
 656:	0e 94 91 01 	call	0x322	; 0x322 <turnOnRED>
		send_blinds_status(0);
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 84 02 	call	0x508	; 0x508 <send_blinds_status>
 660:	08 95       	ret

	} else if(distance == MAX_DISTANCE && instruction == SCROLLUP && screen == SCROLLING){
 662:	90 91 03 01 	lds	r25, 0x0103
 666:	89 17       	cp	r24, r25
 668:	f9 f4       	brne	.+62     	; 0x6a8 <checkCommand+0x154>
 66a:	80 91 00 01 	lds	r24, 0x0100
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	d9 f4       	brne	.+54     	; 0x6a8 <checkCommand+0x154>
 672:	80 91 01 01 	lds	r24, 0x0101
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	b9 f4       	brne	.+46     	; 0x6a8 <checkCommand+0x154>
		screen = UP;
 67a:	10 92 01 01 	sts	0x0101, r1
		instruction = NEUTRAL;
 67e:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 682:	0e 94 ab 01 	call	0x356	; 0x356 <turnOffAll>
		SCH_Delete_Task(upscreen);
 686:	80 91 0b 02 	lds	r24, 0x020B
 68a:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 68e:	80 91 0c 02 	lds	r24, 0x020C
 692:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 696:	80 91 11 02 	lds	r24, 0x0211
 69a:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		turnOnGREEN();
 69e:	0e 94 95 01 	call	0x32a	; 0x32a <turnOnGREEN>
		send_blinds_status(1);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	0e 94 84 02 	call	0x508	; 0x508 <send_blinds_status>
 6a8:	08 95       	ret

000006aa <reset_buffer>:
>>>>>>> origin/Roy
}

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
<<<<<<< HEAD
 690:	e8 e5       	ldi	r30, 0x58	; 88
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	28 ea       	ldi	r18, 0xA8	; 168
 696:	31 e0       	ldi	r19, 0x01	; 1
	
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	81 93       	st	Z+, r24
 69e:	91 93       	st	Z+, r25
=======
 6aa:	e2 ee       	ldi	r30, 0xE2	; 226
 6ac:	f1 e0       	ldi	r31, 0x01	; 1
 6ae:	22 e3       	ldi	r18, 0x32	; 50
 6b0:	32 e0       	ldi	r19, 0x02	; 2
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	9f ef       	ldi	r25, 0xFF	; 255
 6b6:	81 93       	st	Z+, r24
 6b8:	91 93       	st	Z+, r25

>>>>>>> origin/Roy
// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
	
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
<<<<<<< HEAD
 6a0:	e2 17       	cp	r30, r18
 6a2:	f3 07       	cpc	r31, r19
 6a4:	d9 f7       	brne	.-10     	; 0x69c <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 6a6:	08 95       	ret

000006a8 <add_to_buffer>:
=======
 6ba:	e2 17       	cp	r30, r18
 6bc:	f3 07       	cpc	r31, r19
 6be:	d9 f7       	brne	.-10     	; 0x6b6 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 6c0:	08 95       	ret

000006c2 <add_to_buffer>:
>>>>>>> origin/Roy

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
<<<<<<< HEAD
 6a8:	20 91 58 01 	lds	r18, 0x0158
 6ac:	30 91 59 01 	lds	r19, 0x0159
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	2f 3f       	cpi	r18, 0xFF	; 255
 6b4:	39 07       	cpc	r19, r25
 6b6:	91 f0       	breq	.+36     	; 0x6dc <add_to_buffer+0x34>
=======
 6c2:	20 91 e2 01 	lds	r18, 0x01E2
 6c6:	30 91 e3 01 	lds	r19, 0x01E3
 6ca:	9f ef       	ldi	r25, 0xFF	; 255
 6cc:	2f 3f       	cpi	r18, 0xFF	; 255
 6ce:	39 07       	cpc	r19, r25
 6d0:	91 f0       	breq	.+36     	; 0x6f6 <add_to_buffer+0x34>
>>>>>>> origin/Roy
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
<<<<<<< HEAD
 6b8:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 6ba:	48 e5       	ldi	r20, 0x58	; 88
 6bc:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 6be:	9f 5f       	subi	r25, 0xFF	; 255
=======
 6d2:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 6d4:	42 ee       	ldi	r20, 0xE2	; 226
 6d6:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 6d8:	9f 5f       	subi	r25, 0xFF	; 255
>>>>>>> origin/Roy
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
<<<<<<< HEAD
 6c0:	29 2f       	mov	r18, r25
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e4 0f       	add	r30, r20
 6cc:	f5 1f       	adc	r31, r21
 6ce:	60 81       	ld	r22, Z
 6d0:	71 81       	ldd	r23, Z+1	; 0x01
 6d2:	ef ef       	ldi	r30, 0xFF	; 255
 6d4:	6f 3f       	cpi	r22, 0xFF	; 255
 6d6:	7e 07       	cpc	r23, r30
 6d8:	91 f7       	brne	.-28     	; 0x6be <add_to_buffer+0x16>
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <add_to_buffer+0x38>
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 6e0:	f9 01       	movw	r30, r18
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	e8 5a       	subi	r30, 0xA8	; 168
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	80 83       	st	Z, r24
 6ec:	11 82       	std	Z+1, r1	; 0x01
}
 6ee:	08 95       	ret

000006f0 <receiveMessages>:
=======
 6da:	29 2f       	mov	r18, r25
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	f9 01       	movw	r30, r18
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	e4 0f       	add	r30, r20
 6e6:	f5 1f       	adc	r31, r21
 6e8:	60 81       	ld	r22, Z
 6ea:	71 81       	ldd	r23, Z+1	; 0x01
 6ec:	ef ef       	ldi	r30, 0xFF	; 255
 6ee:	6f 3f       	cpi	r22, 0xFF	; 255
 6f0:	7e 07       	cpc	r23, r30
 6f2:	91 f7       	brne	.-28     	; 0x6d8 <add_to_buffer+0x16>
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <add_to_buffer+0x38>
 6f6:	20 e0       	ldi	r18, 0x00	; 0
 6f8:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 6fa:	f9 01       	movw	r30, r18
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	ee 51       	subi	r30, 0x1E	; 30
 702:	fe 4f       	sbci	r31, 0xFE	; 254
 704:	80 83       	st	Z, r24
 706:	11 82       	std	Z+1, r1	; 0x01
}
 708:	08 95       	ret

0000070a <receiveMessages>:
>>>>>>> origin/Roy

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	if (buffer_reset != 123) {
<<<<<<< HEAD
 6f0:	80 91 0a 01 	lds	r24, 0x010A
 6f4:	8b 37       	cpi	r24, 0x7B	; 123
 6f6:	29 f0       	breq	.+10     	; 0x702 <receiveMessages+0x12>
		reset_buffer();
 6f8:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
		buffer_reset = 123;
 6fc:	8b e7       	ldi	r24, 0x7B	; 123
 6fe:	80 93 0a 01 	sts	0x010A, r24
	}
	int b = receive_non_blocking();
 702:	0e 94 91 01 	call	0x322	; 0x322 <receive_non_blocking>
	while (b != -1) {
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	8f 3f       	cpi	r24, 0xFF	; 255
 70a:	92 07       	cpc	r25, r18
 70c:	41 f0       	breq	.+16     	; 0x71e <receiveMessages+0x2e>
		add_to_buffer((uint8_t) b);
 70e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <add_to_buffer>
		b = receive_non_blocking();
 712:	0e 94 91 01 	call	0x322	; 0x322 <receive_non_blocking>
=======
 70a:	80 91 0a 01 	lds	r24, 0x010A
 70e:	8b 37       	cpi	r24, 0x7B	; 123
 710:	29 f0       	breq	.+10     	; 0x71c <receiveMessages+0x12>
		reset_buffer();
 712:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
		buffer_reset = 123;
 716:	8b e7       	ldi	r24, 0x7B	; 123
 718:	80 93 0a 01 	sts	0x010A, r24
	}
	int b = receive_non_blocking();
 71c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <receive_non_blocking>
	while (b != -1) {
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	8f 3f       	cpi	r24, 0xFF	; 255
 724:	92 07       	cpc	r25, r18
 726:	41 f0       	breq	.+16     	; 0x738 <receiveMessages+0x2e>
		add_to_buffer((uint8_t) b);
 728:	0e 94 61 03 	call	0x6c2	; 0x6c2 <add_to_buffer>
		b = receive_non_blocking();
 72c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <receive_non_blocking>
>>>>>>> origin/Roy
	if (buffer_reset != 123) {
		reset_buffer();
		buffer_reset = 123;
	}
	int b = receive_non_blocking();
	while (b != -1) {
<<<<<<< HEAD
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	8f 3f       	cpi	r24, 0xFF	; 255
 71a:	92 07       	cpc	r25, r18
 71c:	c1 f7       	brne	.-16     	; 0x70e <receiveMessages+0x1e>
=======
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	8f 3f       	cpi	r24, 0xFF	; 255
 734:	92 07       	cpc	r25, r18
 736:	c1 f7       	brne	.-16     	; 0x728 <receiveMessages+0x1e>
>>>>>>> origin/Roy
		add_to_buffer((uint8_t) b);
		b = receive_non_blocking();
	}
	
	int c = receive_buffer[0];
<<<<<<< HEAD
 71e:	80 91 58 01 	lds	r24, 0x0158
 722:	90 91 59 01 	lds	r25, 0x0159
	int p1 = receive_buffer[1];
 726:	20 91 5a 01 	lds	r18, 0x015A
 72a:	30 91 5b 01 	lds	r19, 0x015B
	int p2 = receive_buffer[2];
 72e:	40 91 5c 01 	lds	r20, 0x015C
 732:	50 91 5d 01 	lds	r21, 0x015D
	int p3 = receive_buffer[3];
	
	if (c == 10) { // Open blinds
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	91 05       	cpc	r25, r1
 73a:	81 f4       	brne	.+32     	; 0x75c <receiveMessages+0x6c>
		if (p1 == 1) {
 73c:	21 30       	cpi	r18, 0x01	; 1
 73e:	31 05       	cpc	r19, r1
 740:	29 f4       	brne	.+10     	; 0x74c <receiveMessages+0x5c>
			// OPEN THE BLINDS
			// Do stuff here
			ScrollUp();
 742:	0e 94 8f 02 	call	0x51e	; 0x51e <ScrollUp>
			
			// End do stuff
			reset_buffer();
 746:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 74a:	08 95       	ret
		}
		else if (p1 != -1) {
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	2f 3f       	cpi	r18, 0xFF	; 255
 750:	38 07       	cpc	r19, r24
 752:	09 f4       	brne	.+2      	; 0x756 <receiveMessages+0x66>
 754:	7c c0       	rjmp	.+248    	; 0x84e <receiveMessages+0x15e>
			reset_buffer();
 756:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 75a:	08 95       	ret
		}
	}
	else if (c == 11) { // Close blinds
 75c:	8b 30       	cpi	r24, 0x0B	; 11
 75e:	91 05       	cpc	r25, r1
 760:	81 f4       	brne	.+32     	; 0x782 <receiveMessages+0x92>
		if (p1 == 1) {
 762:	21 30       	cpi	r18, 0x01	; 1
 764:	31 05       	cpc	r19, r1
 766:	29 f4       	brne	.+10     	; 0x772 <receiveMessages+0x82>
			// CLOSE THE BLINDS
			// Do stuff here
			ScrollDown();
 768:	0e 94 c3 02 	call	0x586	; 0x586 <ScrollDown>
			// End do stuff
			reset_buffer();
 76c:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 770:	08 95       	ret
		}
		else if (p1 != -1) {
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	2f 3f       	cpi	r18, 0xFF	; 255
 776:	38 07       	cpc	r19, r24
 778:	09 f4       	brne	.+2      	; 0x77c <receiveMessages+0x8c>
 77a:	69 c0       	rjmp	.+210    	; 0x84e <receiveMessages+0x15e>
			reset_buffer();
 77c:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 780:	08 95       	ret
		}
	}
	else if (c == 20) { // Set blinds open distance
 782:	84 31       	cpi	r24, 0x14	; 20
 784:	91 05       	cpc	r25, r1
 786:	79 f4       	brne	.+30     	; 0x7a6 <receiveMessages+0xb6>
		if (p1 != -1 && p2 != -1) {
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	2f 3f       	cpi	r18, 0xFF	; 255
 78c:	38 07       	cpc	r19, r24
 78e:	09 f4       	brne	.+2      	; 0x792 <receiveMessages+0xa2>
 790:	5e c0       	rjmp	.+188    	; 0x84e <receiveMessages+0x15e>
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	4f 3f       	cpi	r20, 0xFF	; 255
 796:	52 07       	cpc	r21, r18
 798:	09 f4       	brne	.+2      	; 0x79c <receiveMessages+0xac>
 79a:	59 c0       	rjmp	.+178    	; 0x84e <receiveMessages+0x15e>
			int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
			// Do stuff here
			MAX_DISTANCE = blinds_open_distance;
 79c:	40 93 03 01 	sts	0x0103, r20
			// End do stuff
			reset_buffer();
 7a0:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 7a4:	08 95       	ret
		}
	}
	else if (c == 21) { // Set blinds closed distance
 7a6:	85 31       	cpi	r24, 0x15	; 21
 7a8:	91 05       	cpc	r25, r1
 7aa:	79 f4       	brne	.+30     	; 0x7ca <receiveMessages+0xda>
		if (p1 != -1 && p2 != -1) {
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	2f 3f       	cpi	r18, 0xFF	; 255
 7b0:	38 07       	cpc	r19, r24
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <receiveMessages+0xc6>
 7b4:	4c c0       	rjmp	.+152    	; 0x84e <receiveMessages+0x15e>
 7b6:	2f ef       	ldi	r18, 0xFF	; 255
 7b8:	4f 3f       	cpi	r20, 0xFF	; 255
 7ba:	52 07       	cpc	r21, r18
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <receiveMessages+0xd0>
 7be:	47 c0       	rjmp	.+142    	; 0x84e <receiveMessages+0x15e>
			int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
			// Do stuff here
			MIN_DISTANCE = blinds_closed_distance;
 7c0:	40 93 04 01 	sts	0x0104, r20
			// End do stuff
			reset_buffer();
 7c4:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 7c8:	08 95       	ret
		}			
	}
	else if (c == 30) { // Set temperature to close
 7ca:	8e 31       	cpi	r24, 0x1E	; 30
 7cc:	91 05       	cpc	r25, r1
 7ce:	59 f4       	brne	.+22     	; 0x7e6 <receiveMessages+0xf6>
		if (p1 != -1) {
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	2f 3f       	cpi	r18, 0xFF	; 255
 7d4:	38 07       	cpc	r19, r24
 7d6:	d9 f1       	breq	.+118    	; 0x84e <receiveMessages+0x15e>
			int temperature_to_close = p1 - 128; // The new temperature threshold to close the blinds at
 7d8:	20 58       	subi	r18, 0x80	; 128
 7da:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MAX_TEMP = temperature_to_close;
 7dc:	20 93 05 01 	sts	0x0105, r18
			// End do stuff
			reset_buffer();
 7e0:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 7e4:	08 95       	ret
		}
	}
	else if (c == 31) { // Set temperature to open
 7e6:	8f 31       	cpi	r24, 0x1F	; 31
 7e8:	91 05       	cpc	r25, r1
 7ea:	59 f4       	brne	.+22     	; 0x802 <receiveMessages+0x112>
		if (p1 != -1) {
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	2f 3f       	cpi	r18, 0xFF	; 255
 7f0:	38 07       	cpc	r19, r24
 7f2:	69 f1       	breq	.+90     	; 0x84e <receiveMessages+0x15e>
			int temperature_to_open = p1 - 128; // The new temperature threshold to open the blinds at
 7f4:	20 58       	subi	r18, 0x80	; 128
 7f6:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MIN_TEMP = temperature_to_open;
 7f8:	20 93 06 01 	sts	0x0106, r18
			// End do stuff
			reset_buffer();
 7fc:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 800:	08 95       	ret
		}
	}
	else if (c == 32) { // Set light to close
 802:	80 32       	cpi	r24, 0x20	; 32
 804:	91 05       	cpc	r25, r1
 806:	69 f4       	brne	.+26     	; 0x822 <receiveMessages+0x132>
		if (p1 != -1 && p2 != -1) {
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	2f 3f       	cpi	r18, 0xFF	; 255
 80c:	38 07       	cpc	r19, r24
 80e:	f9 f0       	breq	.+62     	; 0x84e <receiveMessages+0x15e>
 810:	2f ef       	ldi	r18, 0xFF	; 255
 812:	4f 3f       	cpi	r20, 0xFF	; 255
 814:	52 07       	cpc	r21, r18
 816:	d9 f0       	breq	.+54     	; 0x84e <receiveMessages+0x15e>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			MAX_LIGHT = light_to_close;
 818:	40 93 07 01 	sts	0x0107, r20
			// End do stuff
			reset_buffer();
 81c:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 820:	08 95       	ret
		}
	}
	else if (c == 33) { // Set light to open
 822:	81 32       	cpi	r24, 0x21	; 33
 824:	91 05       	cpc	r25, r1
 826:	69 f4       	brne	.+26     	; 0x842 <receiveMessages+0x152>
		if (p1 != -1 && p2 != -1) {
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	2f 3f       	cpi	r18, 0xFF	; 255
 82c:	38 07       	cpc	r19, r24
 82e:	79 f0       	breq	.+30     	; 0x84e <receiveMessages+0x15e>
 830:	2f ef       	ldi	r18, 0xFF	; 255
 832:	4f 3f       	cpi	r20, 0xFF	; 255
 834:	52 07       	cpc	r21, r18
 836:	59 f0       	breq	.+22     	; 0x84e <receiveMessages+0x15e>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			MIN_LIGHT = light_to_open;
 838:	40 93 08 01 	sts	0x0108, r20
			// End do stuff
			reset_buffer();
 83c:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 840:	08 95       	ret
		}
	}
	else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	8f 3f       	cpi	r24, 0xFF	; 255
 846:	92 07       	cpc	r25, r18
 848:	11 f0       	breq	.+4      	; 0x84e <receiveMessages+0x15e>
		reset_buffer();
 84a:	0e 94 48 03 	call	0x690	; 0x690 <reset_buffer>
 84e:	08 95       	ret

00000850 <setChannelZero>:
=======
 738:	80 91 e2 01 	lds	r24, 0x01E2
 73c:	90 91 e3 01 	lds	r25, 0x01E3
	int p1 = receive_buffer[1];
 740:	20 91 e4 01 	lds	r18, 0x01E4
 744:	30 91 e5 01 	lds	r19, 0x01E5
	int p2 = receive_buffer[2];
 748:	40 91 e6 01 	lds	r20, 0x01E6
 74c:	50 91 e7 01 	lds	r21, 0x01E7
	int p3 = receive_buffer[3];
	
	if (c == 10) { // Open blinds
 750:	8a 30       	cpi	r24, 0x0A	; 10
 752:	91 05       	cpc	r25, r1
 754:	81 f4       	brne	.+32     	; 0x776 <receiveMessages+0x6c>
		if (p1 == 1) {
 756:	21 30       	cpi	r18, 0x01	; 1
 758:	31 05       	cpc	r19, r1
 75a:	29 f4       	brne	.+10     	; 0x766 <receiveMessages+0x5c>
			// OPEN THE BLINDS
			// Do stuff here
			scrollUp();
 75c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <scrollUp>
			// End do stuff
			reset_buffer();
 760:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 764:	08 95       	ret
		}
		else if (p1 != -1) {
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	2f 3f       	cpi	r18, 0xFF	; 255
 76a:	38 07       	cpc	r19, r24
 76c:	09 f4       	brne	.+2      	; 0x770 <receiveMessages+0x66>
 76e:	7c c0       	rjmp	.+248    	; 0x868 <receiveMessages+0x15e>
			reset_buffer();
 770:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 774:	08 95       	ret
		}
	}
	else if (c == 11) { // Close blinds
 776:	8b 30       	cpi	r24, 0x0B	; 11
 778:	91 05       	cpc	r25, r1
 77a:	81 f4       	brne	.+32     	; 0x79c <receiveMessages+0x92>
		if (p1 == 1) {
 77c:	21 30       	cpi	r18, 0x01	; 1
 77e:	31 05       	cpc	r19, r1
 780:	29 f4       	brne	.+10     	; 0x78c <receiveMessages+0x82>
			// CLOSE THE BLINDS
			// Do stuff here
			scrollDown();
 782:	0e 94 49 01 	call	0x292	; 0x292 <scrollDown>
			// End do stuff
			reset_buffer();
 786:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 78a:	08 95       	ret
		}
		else if (p1 != -1) {
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	2f 3f       	cpi	r18, 0xFF	; 255
 790:	38 07       	cpc	r19, r24
 792:	09 f4       	brne	.+2      	; 0x796 <receiveMessages+0x8c>
 794:	69 c0       	rjmp	.+210    	; 0x868 <receiveMessages+0x15e>
			reset_buffer();
 796:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 79a:	08 95       	ret
		}
	}
	else if (c == 20) { // Set blinds open distance
 79c:	84 31       	cpi	r24, 0x14	; 20
 79e:	91 05       	cpc	r25, r1
 7a0:	79 f4       	brne	.+30     	; 0x7c0 <receiveMessages+0xb6>
		if (p1 != -1 && p2 != -1) {
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	2f 3f       	cpi	r18, 0xFF	; 255
 7a6:	38 07       	cpc	r19, r24
 7a8:	09 f4       	brne	.+2      	; 0x7ac <receiveMessages+0xa2>
 7aa:	5e c0       	rjmp	.+188    	; 0x868 <receiveMessages+0x15e>
 7ac:	2f ef       	ldi	r18, 0xFF	; 255
 7ae:	4f 3f       	cpi	r20, 0xFF	; 255
 7b0:	52 07       	cpc	r21, r18
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <receiveMessages+0xac>
 7b4:	59 c0       	rjmp	.+178    	; 0x868 <receiveMessages+0x15e>
			int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
			// Do stuff here
			MAX_DISTANCE = blinds_open_distance;
 7b6:	40 93 03 01 	sts	0x0103, r20
			// End do stuff
			reset_buffer();
 7ba:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 7be:	08 95       	ret
		}
	}
	else if (c == 21) { // Set blinds closed distance
 7c0:	85 31       	cpi	r24, 0x15	; 21
 7c2:	91 05       	cpc	r25, r1
 7c4:	79 f4       	brne	.+30     	; 0x7e4 <receiveMessages+0xda>
		if (p1 != -1 && p2 != -1) {
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	2f 3f       	cpi	r18, 0xFF	; 255
 7ca:	38 07       	cpc	r19, r24
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <receiveMessages+0xc6>
 7ce:	4c c0       	rjmp	.+152    	; 0x868 <receiveMessages+0x15e>
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	4f 3f       	cpi	r20, 0xFF	; 255
 7d4:	52 07       	cpc	r21, r18
 7d6:	09 f4       	brne	.+2      	; 0x7da <receiveMessages+0xd0>
 7d8:	47 c0       	rjmp	.+142    	; 0x868 <receiveMessages+0x15e>
			int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
			// Do stuff here
			MIN_DISTANCE = blinds_closed_distance;
 7da:	40 93 04 01 	sts	0x0104, r20
			// End do stuff
			reset_buffer();
 7de:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 7e2:	08 95       	ret
		}			
	}
	else if (c == 30) { // Set temperature to close
 7e4:	8e 31       	cpi	r24, 0x1E	; 30
 7e6:	91 05       	cpc	r25, r1
 7e8:	59 f4       	brne	.+22     	; 0x800 <receiveMessages+0xf6>
		if (p1 != -1) {
 7ea:	8f ef       	ldi	r24, 0xFF	; 255
 7ec:	2f 3f       	cpi	r18, 0xFF	; 255
 7ee:	38 07       	cpc	r19, r24
 7f0:	d9 f1       	breq	.+118    	; 0x868 <receiveMessages+0x15e>
			int temperature_to_close = p1 - 128; // The new temperature threshold to close the blinds at
 7f2:	20 58       	subi	r18, 0x80	; 128
 7f4:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MAX_TEMP = temperature_to_close;
 7f6:	20 93 02 01 	sts	0x0102, r18
			// End do stuff
			reset_buffer();
 7fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 7fe:	08 95       	ret
		}
	}
	else if (c == 31) { // Set temperature to open
 800:	8f 31       	cpi	r24, 0x1F	; 31
 802:	91 05       	cpc	r25, r1
 804:	59 f4       	brne	.+22     	; 0x81c <receiveMessages+0x112>
		if (p1 != -1) {
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	2f 3f       	cpi	r18, 0xFF	; 255
 80a:	38 07       	cpc	r19, r24
 80c:	69 f1       	breq	.+90     	; 0x868 <receiveMessages+0x15e>
			int temperature_to_open = p1 - 128; // The new temperature threshold to open the blinds at
 80e:	20 58       	subi	r18, 0x80	; 128
 810:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MIN_TEMP = temperature_to_open;
 812:	20 93 05 01 	sts	0x0105, r18
			// End do stuff
			reset_buffer();
 816:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 81a:	08 95       	ret
		}
	}
	else if (c == 32) { // Set light to close
 81c:	80 32       	cpi	r24, 0x20	; 32
 81e:	91 05       	cpc	r25, r1
 820:	69 f4       	brne	.+26     	; 0x83c <receiveMessages+0x132>
		if (p1 != -1 && p2 != -1) {
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	2f 3f       	cpi	r18, 0xFF	; 255
 826:	38 07       	cpc	r19, r24
 828:	f9 f0       	breq	.+62     	; 0x868 <receiveMessages+0x15e>
 82a:	2f ef       	ldi	r18, 0xFF	; 255
 82c:	4f 3f       	cpi	r20, 0xFF	; 255
 82e:	52 07       	cpc	r21, r18
 830:	d9 f0       	breq	.+54     	; 0x868 <receiveMessages+0x15e>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			MAX_LIGHT = light_to_close;
 832:	40 93 06 01 	sts	0x0106, r20
			// End do stuff
			reset_buffer();
 836:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 83a:	08 95       	ret
		}
	}
	else if (c == 33) { // Set light to open
 83c:	81 32       	cpi	r24, 0x21	; 33
 83e:	91 05       	cpc	r25, r1
 840:	69 f4       	brne	.+26     	; 0x85c <receiveMessages+0x152>
		if (p1 != -1 && p2 != -1) {
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	2f 3f       	cpi	r18, 0xFF	; 255
 846:	38 07       	cpc	r19, r24
 848:	79 f0       	breq	.+30     	; 0x868 <receiveMessages+0x15e>
 84a:	2f ef       	ldi	r18, 0xFF	; 255
 84c:	4f 3f       	cpi	r20, 0xFF	; 255
 84e:	52 07       	cpc	r21, r18
 850:	59 f0       	breq	.+22     	; 0x868 <receiveMessages+0x15e>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			MIN_LIGHT = light_to_open;
 852:	40 93 07 01 	sts	0x0107, r20
			// End do stuff
			reset_buffer();
 856:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 85a:	08 95       	ret
		}
	}
	else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	8f 3f       	cpi	r24, 0xFF	; 255
 860:	92 07       	cpc	r25, r18
 862:	11 f0       	breq	.+4      	; 0x868 <receiveMessages+0x15e>
		reset_buffer();
 864:	0e 94 55 03 	call	0x6aa	; 0x6aa <reset_buffer>
 868:	08 95       	ret

0000086a <setChannelZero>:
>>>>>>> origin/Roy


//***********FUNCTIONS FOR THE ADC****************

void setChannelZero(){
	ADMUX &= ~(1 << MUX0); //Set channel to 0
<<<<<<< HEAD
 850:	ec e7       	ldi	r30, 0x7C	; 124
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	8e 7f       	andi	r24, 0xFE	; 254
 858:	80 83       	st	Z, r24
}
 85a:	08 95       	ret

0000085c <setChannelOne>:

void setChannelOne(){
	ADMUX |= (1 << MUX0); // set channel to 1
 85c:	ec e7       	ldi	r30, 0x7C	; 124
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	81 60       	ori	r24, 0x01	; 1
 864:	80 83       	st	Z, r24
}
 866:	08 95       	ret

00000868 <setupADC>:
=======
 86a:	ec e7       	ldi	r30, 0x7C	; 124
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	8e 7f       	andi	r24, 0xFE	; 254
 872:	80 83       	st	Z, r24
}
 874:	08 95       	ret

00000876 <setChannelOne>:

void setChannelOne(){
	ADMUX |= (1 << MUX0); // set channel to 1
 876:	ec e7       	ldi	r30, 0x7C	; 124
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	80 83       	st	Z, r24
}
 880:	08 95       	ret
>>>>>>> origin/Roy

00000882 <setupADC>:
//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setupADC()
{
	//Channel = 0 as of now
	//ADMUX |= (1 << MUX0); // set channel to 1
	ADMUX |= (1 << REFS0); //set reference voltage
<<<<<<< HEAD
 868:	ec e7       	ldi	r30, 0x7C	; 124
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	80 64       	ori	r24, 0x40	; 64
 870:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 872:	ea e7       	ldi	r30, 0x7A	; 122
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	87 60       	ori	r24, 0x07	; 7
 87a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 87c:	80 81       	ld	r24, Z
 87e:	80 68       	ori	r24, 0x80	; 128
 880:	80 83       	st	Z, r24
}
 882:	08 95       	ret

00000884 <adc_read>:
=======
 882:	ec e7       	ldi	r30, 0x7C	; 124
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	80 64       	ori	r24, 0x40	; 64
 88a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 88c:	ea e7       	ldi	r30, 0x7A	; 122
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	87 60       	ori	r24, 0x07	; 7
 894:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 896:	80 81       	ld	r24, Z
 898:	80 68       	ori	r24, 0x80	; 128
 89a:	80 83       	st	Z, r24
}
 89c:	08 95       	ret
>>>>>>> origin/Roy

0000089e <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
<<<<<<< HEAD
 884:	ec e7       	ldi	r30, 0x7C	; 124
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	90 81       	ld	r25, Z
	ADCSRA |= (1 << ADEN); //enable the ADC
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
 88a:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 88c:	98 7f       	andi	r25, 0xF8	; 248
 88e:	98 2b       	or	r25, r24
 890:	90 83       	st	Z, r25

	// start the conversion
	ADCSRA |= (1<<ADSC);
 892:	ea e7       	ldi	r30, 0x7A	; 122
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	80 64       	ori	r24, 0x40	; 64
 89a:	80 83       	st	Z, r24
=======
 89e:	ec e7       	ldi	r30, 0x7C	; 124
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 8a4:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 8a6:	98 7f       	andi	r25, 0xF8	; 248
 8a8:	98 2b       	or	r25, r24
 8aa:	90 83       	st	Z, r25

	// start the conversion
	ADCSRA |= (1<<ADSC);
 8ac:	ea e7       	ldi	r30, 0x7A	; 122
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 64       	ori	r24, 0x40	; 64
 8b4:	80 83       	st	Z, r24
>>>>>>> origin/Roy

	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
<<<<<<< HEAD
 89c:	80 81       	ld	r24, Z
 89e:	86 fd       	sbrc	r24, 6
 8a0:	fd cf       	rjmp	.-6      	; 0x89c <adc_read+0x18>

	return (ADC);
 8a2:	80 91 78 00 	lds	r24, 0x0078
 8a6:	90 91 79 00 	lds	r25, 0x0079
}
 8aa:	08 95       	ret

000008ac <calculateLight>:
	averageTemperature = 0;
=======
 8b6:	80 81       	ld	r24, Z
 8b8:	86 fd       	sbrc	r24, 6
 8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <adc_read+0x18>

	return (ADC);
 8bc:	80 91 78 00 	lds	r24, 0x0078
 8c0:	90 91 79 00 	lds	r25, 0x0079
}
 8c4:	08 95       	ret

000008c6 <calculateLight>:
>>>>>>> origin/Roy
}

//**********FUNCTIONS FOR LIGHTSENSOR**************
void calculateLight(){
	setChannelOne();
<<<<<<< HEAD
 8ac:	0e 94 2e 04 	call	0x85c	; 0x85c <setChannelOne>
	uint16_t reading = adc_read(1);
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 42 04 	call	0x884	; 0x884 <adc_read>
	float temp = (reading/4);
 8b6:	bc 01       	movw	r22, r24
 8b8:	76 95       	lsr	r23
 8ba:	67 95       	ror	r22
 8bc:	76 95       	lsr	r23
 8be:	67 95       	ror	r22
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
	float light = 100 - ((temp/(float)255)*100); //Light is a percentage. 0 = dark. 100 = bright
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	4f e7       	ldi	r20, 0x7F	; 127
 8ce:	53 e4       	ldi	r21, 0x43	; 67
 8d0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
 8d4:	20 e0       	ldi	r18, 0x00	; 0
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	48 ec       	ldi	r20, 0xC8	; 200
 8da:	52 e4       	ldi	r21, 0x42	; 66
 8dc:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3>
 8e0:	9b 01       	movw	r18, r22
 8e2:	ac 01       	movw	r20, r24
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	88 ec       	ldi	r24, 0xC8	; 200
 8ea:	92 e4       	ldi	r25, 0x42	; 66
 8ec:	0e 94 14 05 	call	0xa28	; 0xa28 <__subsf3>

	averageLight += (uint8_t)light;
 8f0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
 8f4:	80 91 0d 01 	lds	r24, 0x010D
 8f8:	90 91 0e 01 	lds	r25, 0x010E
 8fc:	86 0f       	add	r24, r22
 8fe:	91 1d       	adc	r25, r1
 900:	90 93 0e 01 	sts	0x010E, r25
 904:	80 93 0d 01 	sts	0x010D, r24
}
 908:	08 95       	ret

0000090a <calculateTemperature>:
=======
 8c6:	0e 94 3b 04 	call	0x876	; 0x876 <setChannelOne>
	uint16_t reading = adc_read(1);
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	0e 94 4f 04 	call	0x89e	; 0x89e <adc_read>
	float temp = (reading/4);
 8d0:	bc 01       	movw	r22, r24
 8d2:	76 95       	lsr	r23
 8d4:	67 95       	ror	r22
 8d6:	76 95       	lsr	r23
 8d8:	67 95       	ror	r22
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatunsisf>
	//uint8_t high_byte = (reading >> 8);
	//uint8_t low_byte = reading & 0x00FF;
	//uint16_t number = (high_byte << 8) + low_byte;
	float light = 100 - ((temp/(float)255)*100); //Light is a percentage. 0 = dark. 100 = bright
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	4f e7       	ldi	r20, 0x7F	; 127
 8e8:	53 e4       	ldi	r21, 0x43	; 67
 8ea:	0e 94 b9 05 	call	0xb72	; 0xb72 <__divsf3>
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	48 ec       	ldi	r20, 0xC8	; 200
 8f4:	52 e4       	ldi	r21, 0x42	; 66
 8f6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
 8fa:	9b 01       	movw	r18, r22
 8fc:	ac 01       	movw	r20, r24
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	88 ec       	ldi	r24, 0xC8	; 200
 904:	92 e4       	ldi	r25, 0x42	; 66
 906:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__subsf3>
	//transmit(light);

	averageLight += (uint8_t)light;
 90a:	0e 94 21 06 	call	0xc42	; 0xc42 <__fixunssfsi>
 90e:	80 91 0b 01 	lds	r24, 0x010B
 912:	90 91 0c 01 	lds	r25, 0x010C
 916:	86 0f       	add	r24, r22
 918:	91 1d       	adc	r25, r1
 91a:	90 93 0c 01 	sts	0x010C, r25
 91e:	80 93 0b 01 	sts	0x010B, r24
}
 922:	08 95       	ret

00000924 <calculateTemperature>:
>>>>>>> origin/Roy
//**********FUNCTIONS FOR TEMPSENSOR****************

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
	setChannelZero(); //Channel 0 is used to measure temperature
<<<<<<< HEAD
 90a:	0e 94 28 04 	call	0x850	; 0x850 <setChannelZero>
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC. (0 - 1023)
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	0e 94 42 04 	call	0x884	; 0x884 <adc_read>

	//Formula to calculate the temperature
	float voltage = (float)reading/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V.
 914:	bc 01       	movw	r22, r24
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	40 e8       	ldi	r20, 0x80	; 128
 924:	5a e3       	ldi	r21, 0x3A	; 58
 926:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3>
	voltage *= 5; //Multiply by 5V
 92a:	46 2f       	mov	r20, r22
 92c:	57 2f       	mov	r21, r23
 92e:	68 2f       	mov	r22, r24
 930:	79 2f       	mov	r23, r25
 932:	cb 01       	movw	r24, r22
 934:	ba 01       	movw	r22, r20
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	40 ea       	ldi	r20, 0xA0	; 160
 93c:	50 e4       	ldi	r21, 0x40	; 64
 93e:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3>
	voltage -= 0.5; //Deduct the offset ( Offset is 0.5 )
 942:	46 2f       	mov	r20, r22
 944:	57 2f       	mov	r21, r23
 946:	68 2f       	mov	r22, r24
 948:	79 2f       	mov	r23, r25
 94a:	cb 01       	movw	r24, r22
 94c:	ba 01       	movw	r22, r20
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	40 e0       	ldi	r20, 0x00	; 0
 954:	5f e3       	ldi	r21, 0x3F	; 63
 956:	0e 94 14 05 	call	0xa28	; 0xa28 <__subsf3>
	float temperature = (float)100*voltage;
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	48 ec       	ldi	r20, 0xC8	; 200
 960:	52 e4       	ldi	r21, 0x42	; 66
 962:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3>
=======
 924:	0e 94 35 04 	call	0x86a	; 0x86a <setChannelZero>
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC. (0 - 1023)
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	0e 94 4f 04 	call	0x89e	; 0x89e <adc_read>

	//Formula to calculate the temperature
	float voltage = (float)reading/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V.
 92e:	bc 01       	movw	r22, r24
 930:	80 e0       	ldi	r24, 0x00	; 0
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatunsisf>
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	40 e8       	ldi	r20, 0x80	; 128
 93e:	5a e3       	ldi	r21, 0x3A	; 58
 940:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
	voltage *= 5; //Multiply by 5V
 944:	46 2f       	mov	r20, r22
 946:	57 2f       	mov	r21, r23
 948:	68 2f       	mov	r22, r24
 94a:	79 2f       	mov	r23, r25
 94c:	cb 01       	movw	r24, r22
 94e:	ba 01       	movw	r22, r20
 950:	20 e0       	ldi	r18, 0x00	; 0
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	40 ea       	ldi	r20, 0xA0	; 160
 956:	50 e4       	ldi	r21, 0x40	; 64
 958:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
	voltage -= 0.5; //Deduct the offset ( Offset is 0.5 )
 95c:	46 2f       	mov	r20, r22
 95e:	57 2f       	mov	r21, r23
 960:	68 2f       	mov	r22, r24
 962:	79 2f       	mov	r23, r25
 964:	cb 01       	movw	r24, r22
 966:	ba 01       	movw	r22, r20
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	5f e3       	ldi	r21, 0x3F	; 63
 970:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__subsf3>
	float temperature = (float)100*voltage;
 974:	20 e0       	ldi	r18, 0x00	; 0
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	48 ec       	ldi	r20, 0xC8	; 200
 97a:	52 e4       	ldi	r21, 0x42	; 66
 97c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
>>>>>>> origin/Roy

	averageTemperature += (uint8_t)temperature;
<<<<<<< HEAD
 966:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
 96a:	80 91 0f 01 	lds	r24, 0x010F
 96e:	90 91 10 01 	lds	r25, 0x0110
 972:	86 0f       	add	r24, r22
 974:	91 1d       	adc	r25, r1
 976:	90 93 10 01 	sts	0x0110, r25
 97a:	80 93 0f 01 	sts	0x010F, r24
}
 97e:	08 95       	ret

00000980 <transmitDistance>:
=======
 980:	0e 94 21 06 	call	0xc42	; 0xc42 <__fixunssfsi>
 984:	80 91 0d 01 	lds	r24, 0x010D
 988:	90 91 0e 01 	lds	r25, 0x010E
 98c:	86 0f       	add	r24, r22
 98e:	91 1d       	adc	r25, r1
 990:	90 93 0e 01 	sts	0x010E, r25
 994:	80 93 0d 01 	sts	0x010D, r24
}
 998:	08 95       	ret

0000099a <transmitDistance>:
>>>>>>> origin/Roy
	}
}

//Used for debugging. Sends value of distance to UART.
void transmitDistance(){
<<<<<<< HEAD
	send_temperature(distance);
 980:	80 91 0b 01 	lds	r24, 0x010B
 984:	90 91 0c 01 	lds	r25, 0x010C
 988:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_temperature>
}
 98c:	08 95       	ret

0000098e <setStartingPosition>:
	}
}

//Sets starting position of the screen and turns on the corresponding led
void setStartingPosition(){
	if(screen == UP){
 98e:	80 91 02 01 	lds	r24, 0x0102
 992:	88 23       	and	r24, r24
 994:	49 f4       	brne	.+18     	; 0x9a8 <setStartingPosition+0x1a>
		distance = MAX_DISTANCE;
 996:	80 91 03 01 	lds	r24, 0x0103
 99a:	80 93 0b 01 	sts	0x010B, r24
 99e:	10 92 0c 01 	sts	0x010C, r1
		turnOnGREEN();
 9a2:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOnGREEN>
 9a6:	08 95       	ret
	} else {
		distance = MIN_DISTANCE;
 9a8:	80 91 04 01 	lds	r24, 0x0104
 9ac:	80 93 0b 01 	sts	0x010B, r24
 9b0:	10 92 0c 01 	sts	0x010C, r1
		turnOnRED();
 9b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <turnOnRED>
 9b8:	08 95       	ret

000009ba <main>:
=======
	transmit(distance);
 99a:	80 91 0a 02 	lds	r24, 0x020A
 99e:	0e 94 c0 01 	call	0x380	; 0x380 <transmit>
}
 9a2:	08 95       	ret

000009a4 <scrollSpeedCheck>:
	}
}

//Makes sure all settings are valid and will not mess with the program. If settings are invalid, use the default settings.
void scrollSpeedCheck(){
	if((MAX_DISTANCE - MIN_DISTANCE)%SCROLLSPEED != 0 || MAX_DISTANCE > 255 || MIN_DISTANCE < 5 || MIN_DISTANCE >= MAX_DISTANCE){
 9a4:	30 91 03 01 	lds	r19, 0x0103
 9a8:	20 91 04 01 	lds	r18, 0x0104
 9ac:	83 2f       	mov	r24, r19
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	82 1b       	sub	r24, r18
 9b2:	91 09       	sbc	r25, r1
 9b4:	60 91 08 01 	lds	r22, 0x0108
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divmodhi4>
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	21 f4       	brne	.+8      	; 0x9ca <scrollSpeedCheck+0x26>
 9c2:	25 30       	cpi	r18, 0x05	; 5
 9c4:	10 f0       	brcs	.+4      	; 0x9ca <scrollSpeedCheck+0x26>
 9c6:	23 17       	cp	r18, r19
 9c8:	48 f0       	brcs	.+18     	; 0x9dc <scrollSpeedCheck+0x38>
		MAX_DISTANCE = DEFAULT_MAX_DISTANCE;
 9ca:	80 ea       	ldi	r24, 0xA0	; 160
 9cc:	80 93 03 01 	sts	0x0103, r24
		MIN_DISTANCE = DEFAULT_MIN_DISTANCE;
 9d0:	8a e0       	ldi	r24, 0x0A	; 10
 9d2:	80 93 04 01 	sts	0x0104, r24
		SCROLLSPEED = DEFAULT_SCROLLSPEED;
 9d6:	85 e0       	ldi	r24, 0x05	; 5
 9d8:	80 93 08 01 	sts	0x0108, r24
 9dc:	08 95       	ret

000009de <main>:
>>>>>>> origin/Roy

//******MAIN********

int main()
{
	setupADC();
<<<<<<< HEAD
 9ba:	0e 94 34 04 	call	0x868	; 0x868 <setupADC>
	setupLeds();
 9be:	0e 94 4d 01 	call	0x29a	; 0x29a <setupLeds>
	uart_init();
 9c2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <uart_init>
	SCH_Init_T1();
 9c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	setStartingPosition();
 9ca:	0e 94 c7 04 	call	0x98e	; 0x98e <setStartingPosition>
	First argument of Add_task is the task you want to execute regularly. 
	Second argument is how many ticks it should wait before starting doing it (so only for the first time)
	Third argument is how often it should be executed in ticks
	One tick = 10ms - So 200 = 2 secs and 1000 = 10 sec etc...
	*/
	SCH_Add_Task(calculateTemperature, 0, 200); //Read temperature every 2 seconds
 9ce:	85 e8       	ldi	r24, 0x85	; 133
 9d0:	94 e0       	ldi	r25, 0x04	; 4
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	48 ec       	ldi	r20, 0xC8	; 200
 9d8:	50 e0       	ldi	r21, 0x00	; 0
 9da:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateLight, 100, 200); //Read light every 2 seconds
 9de:	86 e5       	ldi	r24, 0x56	; 86
 9e0:	94 e0       	ldi	r25, 0x04	; 4
 9e2:	64 e6       	ldi	r22, 0x64	; 100
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	48 ec       	ldi	r20, 0xC8	; 200
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(calculateAverageTemperature, 1010, 1000); //Calculate average every 10 seconds. Delay it by 10.01 seconds to prevent incomplete average measurements.
 9ee:	8e e1       	ldi	r24, 0x1E	; 30
 9f0:	93 e0       	ldi	r25, 0x03	; 3
 9f2:	62 ef       	ldi	r22, 0xF2	; 242
 9f4:	73 e0       	ldi	r23, 0x03	; 3
 9f6:	48 ee       	ldi	r20, 0xE8	; 232
 9f8:	53 e0       	ldi	r21, 0x03	; 3
 9fa:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageLight, 1110, 1000); //Calculate average light every 10 seconds.
 9fe:	85 ef       	ldi	r24, 0xF5	; 245
 a00:	92 e0       	ldi	r25, 0x02	; 2
 a02:	66 e5       	ldi	r22, 0x56	; 86
 a04:	74 e0       	ldi	r23, 0x04	; 4
 a06:	48 ee       	ldi	r20, 0xE8	; 232
 a08:	53 e0       	ldi	r21, 0x03	; 3
 a0a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(checkDistance, 1002, 50); //Check if we are finished scrolling
 a0e:	80 e3       	ldi	r24, 0x30	; 48
 a10:	92 e0       	ldi	r25, 0x02	; 2
 a12:	6a ee       	ldi	r22, 0xEA	; 234
 a14:	73 e0       	ldi	r23, 0x03	; 3
 a16:	42 e3       	ldi	r20, 0x32	; 50
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(receiveMessages, 1003, 50); // Receive commands/settings from GUI 
	//SCH_Add_Task(transmitDistance, 1004, 100); //enable to transmit height of screen to cmd
	
	SCH_Start();
 a1e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
=======
 9de:	0e 94 41 04 	call	0x882	; 0x882 <setupADC>
	setupLeds();
 9e2:	0e 94 8d 01 	call	0x31a	; 0x31a <setupLeds>
	uart_init();
 9e6:	0e 94 b2 01 	call	0x364	; 0x364 <uart_init>
	SCH_Init_T1();
 9ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	//SCH_Add_Task(scrollSpeedCheck, 0, 1); //Make sure settings are valid and correct at all times
	SCH_Add_Task(setStartingPosition, 500, 0); //Set starting pos of screen and light starting led
 9ee:	87 e9       	ldi	r24, 0x97	; 151
 9f0:	91 e0       	ldi	r25, 0x01	; 1
 9f2:	64 ef       	ldi	r22, 0xF4	; 244
 9f4:	71 e0       	ldi	r23, 0x01	; 1
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(receiveMessages, 1000, 50); // Receive every half second, is more than enough
 9fe:	85 e8       	ldi	r24, 0x85	; 133
 a00:	93 e0       	ldi	r25, 0x03	; 3
 a02:	68 ee       	ldi	r22, 0xE8	; 232
 a04:	73 e0       	ldi	r23, 0x03	; 3
 a06:	42 e3       	ldi	r20, 0x32	; 50
 a08:	50 e0       	ldi	r21, 0x00	; 0
 a0a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateTemperature, 0, 200); //Read temperature every second
 a0e:	82 e9       	ldi	r24, 0x92	; 146
 a10:	94 e0       	ldi	r25, 0x04	; 4
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	48 ec       	ldi	r20, 0xC8	; 200
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateLight, 100, 200); //Read light every second
 a1e:	83 e6       	ldi	r24, 0x63	; 99
 a20:	94 e0       	ldi	r25, 0x04	; 4
 a22:	64 e6       	ldi	r22, 0x64	; 100
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	48 ec       	ldi	r20, 0xC8	; 200
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageTemperature, 1000, 1000); //Calculate average every 10 seconds. Delay it by 10 seconds to prevent incomplete average measurements.
 a2e:	83 e7       	ldi	r24, 0x73	; 115
 a30:	92 e0       	ldi	r25, 0x02	; 2
 a32:	68 ee       	ldi	r22, 0xE8	; 232
 a34:	73 e0       	ldi	r23, 0x03	; 3
 a36:	48 ee       	ldi	r20, 0xE8	; 232
 a38:	53 e0       	ldi	r21, 0x03	; 3
 a3a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageLight, 1100, 1000); //Calculate average light every 10 seconds.
 a3e:	89 e3       	ldi	r24, 0x39	; 57
 a40:	92 e0       	ldi	r25, 0x02	; 2
 a42:	6c e4       	ldi	r22, 0x4C	; 76
 a44:	74 e0       	ldi	r23, 0x04	; 4
 a46:	48 ee       	ldi	r20, 0xE8	; 232
 a48:	53 e0       	ldi	r21, 0x03	; 3
 a4a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(temperatureCheck, 1001, 1000); //What instruction should we send to screen?
 a4e:	81 e6       	ldi	r24, 0x61	; 97
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	69 ee       	ldi	r22, 0xE9	; 233
 a54:	73 e0       	ldi	r23, 0x03	; 3
 a56:	48 ee       	ldi	r20, 0xE8	; 232
 a58:	53 e0       	ldi	r21, 0x03	; 3
 a5a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(lightCheck, 1101, 1000);
 a5e:	87 e7       	ldi	r24, 0x77	; 119
 a60:	91 e0       	ldi	r25, 0x01	; 1
 a62:	6d e4       	ldi	r22, 0x4D	; 77
 a64:	74 e0       	ldi	r23, 0x04	; 4
 a66:	48 ee       	ldi	r20, 0xE8	; 232
 a68:	53 e0       	ldi	r21, 0x03	; 3
 a6a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(resetAverageTemperature, 1002, 1000); //reset average temperature
 a6e:	87 e5       	ldi	r24, 0x57	; 87
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	6a ee       	ldi	r22, 0xEA	; 234
 a74:	73 e0       	ldi	r23, 0x03	; 3
 a76:	48 ee       	ldi	r20, 0xE8	; 232
 a78:	53 e0       	ldi	r21, 0x03	; 3
 a7a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(resetAverageLight, 1102, 1000);
 a7e:	8c e5       	ldi	r24, 0x5C	; 92
 a80:	91 e0       	ldi	r25, 0x01	; 1
 a82:	6e e4       	ldi	r22, 0x4E	; 78
 a84:	74 e0       	ldi	r23, 0x04	; 4
 a86:	48 ee       	ldi	r20, 0xE8	; 232
 a88:	53 e0       	ldi	r21, 0x03	; 3
 a8a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	//SCH_Add_Task(transmitDistance, 1000, 100); //Used for debugging
	SCH_Add_Task(checkCommand, 1000, 10); //What leds should be flashing and what should the screen do?
 a8e:	8a ea       	ldi	r24, 0xAA	; 170
 a90:	92 e0       	ldi	r25, 0x02	; 2
 a92:	68 ee       	ldi	r22, 0xE8	; 232
 a94:	73 e0       	ldi	r23, 0x03	; 3
 a96:	4a e0       	ldi	r20, 0x0A	; 10
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 a9e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
>>>>>>> origin/Roy
	
	while(1)
	{
		SCH_Dispatch_Tasks();
<<<<<<< HEAD
 a22:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 a26:	fd cf       	rjmp	.-6      	; 0xa22 <main+0x68>

00000a28 <__subsf3>:
 a28:	50 58       	subi	r21, 0x80	; 128

00000a2a <__addsf3>:
 a2a:	bb 27       	eor	r27, r27
 a2c:	aa 27       	eor	r26, r26
 a2e:	0e d0       	rcall	.+28     	; 0xa4c <__addsf3x>
 a30:	84 c1       	rjmp	.+776    	; 0xd3a <__fp_round>
 a32:	75 d1       	rcall	.+746    	; 0xd1e <__fp_pscA>
 a34:	30 f0       	brcs	.+12     	; 0xa42 <__addsf3+0x18>
 a36:	7a d1       	rcall	.+756    	; 0xd2c <__fp_pscB>
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__addsf3+0x18>
 a3a:	31 f4       	brne	.+12     	; 0xa48 <__addsf3+0x1e>
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__addsf3+0x1a>
 a40:	1e f4       	brtc	.+6      	; 0xa48 <__addsf3+0x1e>
 a42:	6a c1       	rjmp	.+724    	; 0xd18 <__fp_nan>
 a44:	0e f4       	brtc	.+2      	; 0xa48 <__addsf3+0x1e>
 a46:	e0 95       	com	r30
 a48:	e7 fb       	bst	r30, 7
 a4a:	37 c1       	rjmp	.+622    	; 0xcba <__fp_inf>

00000a4c <__addsf3x>:
 a4c:	e9 2f       	mov	r30, r25
 a4e:	86 d1       	rcall	.+780    	; 0xd5c <__fp_split3>
 a50:	80 f3       	brcs	.-32     	; 0xa32 <__addsf3+0x8>
 a52:	ba 17       	cp	r27, r26
 a54:	62 07       	cpc	r22, r18
 a56:	73 07       	cpc	r23, r19
 a58:	84 07       	cpc	r24, r20
 a5a:	95 07       	cpc	r25, r21
 a5c:	18 f0       	brcs	.+6      	; 0xa64 <__addsf3x+0x18>
 a5e:	71 f4       	brne	.+28     	; 0xa7c <__addsf3x+0x30>
 a60:	9e f5       	brtc	.+102    	; 0xac8 <__addsf3x+0x7c>
 a62:	b5 c1       	rjmp	.+874    	; 0xdce <__fp_zero>
 a64:	0e f4       	brtc	.+2      	; 0xa68 <__addsf3x+0x1c>
 a66:	e0 95       	com	r30
 a68:	0b 2e       	mov	r0, r27
 a6a:	ba 2f       	mov	r27, r26
 a6c:	a0 2d       	mov	r26, r0
 a6e:	0b 01       	movw	r0, r22
 a70:	b9 01       	movw	r22, r18
 a72:	90 01       	movw	r18, r0
 a74:	0c 01       	movw	r0, r24
 a76:	ca 01       	movw	r24, r20
 a78:	a0 01       	movw	r20, r0
 a7a:	11 24       	eor	r1, r1
 a7c:	ff 27       	eor	r31, r31
 a7e:	59 1b       	sub	r21, r25
 a80:	99 f0       	breq	.+38     	; 0xaa8 <__addsf3x+0x5c>
 a82:	59 3f       	cpi	r21, 0xF9	; 249
 a84:	50 f4       	brcc	.+20     	; 0xa9a <__addsf3x+0x4e>
 a86:	50 3e       	cpi	r21, 0xE0	; 224
 a88:	68 f1       	brcs	.+90     	; 0xae4 <__addsf3x+0x98>
 a8a:	1a 16       	cp	r1, r26
 a8c:	f0 40       	sbci	r31, 0x00	; 0
 a8e:	a2 2f       	mov	r26, r18
 a90:	23 2f       	mov	r18, r19
 a92:	34 2f       	mov	r19, r20
 a94:	44 27       	eor	r20, r20
 a96:	58 5f       	subi	r21, 0xF8	; 248
 a98:	f3 cf       	rjmp	.-26     	; 0xa80 <__addsf3x+0x34>
 a9a:	46 95       	lsr	r20
 a9c:	37 95       	ror	r19
 a9e:	27 95       	ror	r18
 aa0:	a7 95       	ror	r26
 aa2:	f0 40       	sbci	r31, 0x00	; 0
 aa4:	53 95       	inc	r21
 aa6:	c9 f7       	brne	.-14     	; 0xa9a <__addsf3x+0x4e>
 aa8:	7e f4       	brtc	.+30     	; 0xac8 <__addsf3x+0x7c>
 aaa:	1f 16       	cp	r1, r31
 aac:	ba 0b       	sbc	r27, r26
 aae:	62 0b       	sbc	r22, r18
 ab0:	73 0b       	sbc	r23, r19
 ab2:	84 0b       	sbc	r24, r20
 ab4:	ba f0       	brmi	.+46     	; 0xae4 <__addsf3x+0x98>
 ab6:	91 50       	subi	r25, 0x01	; 1
 ab8:	a1 f0       	breq	.+40     	; 0xae2 <__addsf3x+0x96>
 aba:	ff 0f       	add	r31, r31
 abc:	bb 1f       	adc	r27, r27
 abe:	66 1f       	adc	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	c2 f7       	brpl	.-16     	; 0xab6 <__addsf3x+0x6a>
 ac6:	0e c0       	rjmp	.+28     	; 0xae4 <__addsf3x+0x98>
 ac8:	ba 0f       	add	r27, r26
 aca:	62 1f       	adc	r22, r18
 acc:	73 1f       	adc	r23, r19
 ace:	84 1f       	adc	r24, r20
 ad0:	48 f4       	brcc	.+18     	; 0xae4 <__addsf3x+0x98>
 ad2:	87 95       	ror	r24
 ad4:	77 95       	ror	r23
 ad6:	67 95       	ror	r22
 ad8:	b7 95       	ror	r27
 ada:	f7 95       	ror	r31
 adc:	9e 3f       	cpi	r25, 0xFE	; 254
 ade:	08 f0       	brcs	.+2      	; 0xae2 <__addsf3x+0x96>
 ae0:	b3 cf       	rjmp	.-154    	; 0xa48 <__addsf3+0x1e>
 ae2:	93 95       	inc	r25
 ae4:	88 0f       	add	r24, r24
 ae6:	08 f0       	brcs	.+2      	; 0xaea <__addsf3x+0x9e>
 ae8:	99 27       	eor	r25, r25
 aea:	ee 0f       	add	r30, r30
 aec:	97 95       	ror	r25
 aee:	87 95       	ror	r24
 af0:	08 95       	ret

00000af2 <__divsf3>:
 af2:	0c d0       	rcall	.+24     	; 0xb0c <__divsf3x>
 af4:	22 c1       	rjmp	.+580    	; 0xd3a <__fp_round>
 af6:	1a d1       	rcall	.+564    	; 0xd2c <__fp_pscB>
 af8:	40 f0       	brcs	.+16     	; 0xb0a <__divsf3+0x18>
 afa:	11 d1       	rcall	.+546    	; 0xd1e <__fp_pscA>
 afc:	30 f0       	brcs	.+12     	; 0xb0a <__divsf3+0x18>
 afe:	21 f4       	brne	.+8      	; 0xb08 <__divsf3+0x16>
 b00:	5f 3f       	cpi	r21, 0xFF	; 255
 b02:	19 f0       	breq	.+6      	; 0xb0a <__divsf3+0x18>
 b04:	da c0       	rjmp	.+436    	; 0xcba <__fp_inf>
 b06:	51 11       	cpse	r21, r1
 b08:	63 c1       	rjmp	.+710    	; 0xdd0 <__fp_szero>
 b0a:	06 c1       	rjmp	.+524    	; 0xd18 <__fp_nan>

00000b0c <__divsf3x>:
 b0c:	27 d1       	rcall	.+590    	; 0xd5c <__fp_split3>
 b0e:	98 f3       	brcs	.-26     	; 0xaf6 <__divsf3+0x4>

00000b10 <__divsf3_pse>:
 b10:	99 23       	and	r25, r25
 b12:	c9 f3       	breq	.-14     	; 0xb06 <__divsf3+0x14>
 b14:	55 23       	and	r21, r21
 b16:	b1 f3       	breq	.-20     	; 0xb04 <__divsf3+0x12>
 b18:	95 1b       	sub	r25, r21
 b1a:	55 0b       	sbc	r21, r21
 b1c:	bb 27       	eor	r27, r27
 b1e:	aa 27       	eor	r26, r26
 b20:	62 17       	cp	r22, r18
 b22:	73 07       	cpc	r23, r19
 b24:	84 07       	cpc	r24, r20
 b26:	38 f0       	brcs	.+14     	; 0xb36 <__divsf3_pse+0x26>
 b28:	9f 5f       	subi	r25, 0xFF	; 255
 b2a:	5f 4f       	sbci	r21, 0xFF	; 255
 b2c:	22 0f       	add	r18, r18
 b2e:	33 1f       	adc	r19, r19
 b30:	44 1f       	adc	r20, r20
 b32:	aa 1f       	adc	r26, r26
 b34:	a9 f3       	breq	.-22     	; 0xb20 <__divsf3_pse+0x10>
 b36:	33 d0       	rcall	.+102    	; 0xb9e <__divsf3_pse+0x8e>
 b38:	0e 2e       	mov	r0, r30
 b3a:	3a f0       	brmi	.+14     	; 0xb4a <__divsf3_pse+0x3a>
 b3c:	e0 e8       	ldi	r30, 0x80	; 128
 b3e:	30 d0       	rcall	.+96     	; 0xba0 <__divsf3_pse+0x90>
 b40:	91 50       	subi	r25, 0x01	; 1
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	e6 95       	lsr	r30
 b46:	00 1c       	adc	r0, r0
 b48:	ca f7       	brpl	.-14     	; 0xb3c <__divsf3_pse+0x2c>
 b4a:	29 d0       	rcall	.+82     	; 0xb9e <__divsf3_pse+0x8e>
 b4c:	fe 2f       	mov	r31, r30
 b4e:	27 d0       	rcall	.+78     	; 0xb9e <__divsf3_pse+0x8e>
 b50:	66 0f       	add	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	bb 1f       	adc	r27, r27
 b58:	26 17       	cp	r18, r22
 b5a:	37 07       	cpc	r19, r23
 b5c:	48 07       	cpc	r20, r24
 b5e:	ab 07       	cpc	r26, r27
 b60:	b0 e8       	ldi	r27, 0x80	; 128
 b62:	09 f0       	breq	.+2      	; 0xb66 <__divsf3_pse+0x56>
 b64:	bb 0b       	sbc	r27, r27
 b66:	80 2d       	mov	r24, r0
 b68:	bf 01       	movw	r22, r30
 b6a:	ff 27       	eor	r31, r31
 b6c:	93 58       	subi	r25, 0x83	; 131
 b6e:	5f 4f       	sbci	r21, 0xFF	; 255
 b70:	2a f0       	brmi	.+10     	; 0xb7c <__divsf3_pse+0x6c>
 b72:	9e 3f       	cpi	r25, 0xFE	; 254
 b74:	51 05       	cpc	r21, r1
 b76:	68 f0       	brcs	.+26     	; 0xb92 <__divsf3_pse+0x82>
 b78:	a0 c0       	rjmp	.+320    	; 0xcba <__fp_inf>
 b7a:	2a c1       	rjmp	.+596    	; 0xdd0 <__fp_szero>
 b7c:	5f 3f       	cpi	r21, 0xFF	; 255
 b7e:	ec f3       	brlt	.-6      	; 0xb7a <__divsf3_pse+0x6a>
 b80:	98 3e       	cpi	r25, 0xE8	; 232
 b82:	dc f3       	brlt	.-10     	; 0xb7a <__divsf3_pse+0x6a>
 b84:	86 95       	lsr	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f7 95       	ror	r31
 b8e:	9f 5f       	subi	r25, 0xFF	; 255
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__divsf3_pse+0x74>
 b92:	88 0f       	add	r24, r24
 b94:	91 1d       	adc	r25, r1
 b96:	96 95       	lsr	r25
 b98:	87 95       	ror	r24
 b9a:	97 f9       	bld	r25, 7
 b9c:	08 95       	ret
 b9e:	e1 e0       	ldi	r30, 0x01	; 1
 ba0:	66 0f       	add	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	bb 1f       	adc	r27, r27
 ba8:	62 17       	cp	r22, r18
 baa:	73 07       	cpc	r23, r19
 bac:	84 07       	cpc	r24, r20
 bae:	ba 07       	cpc	r27, r26
 bb0:	20 f0       	brcs	.+8      	; 0xbba <__divsf3_pse+0xaa>
 bb2:	62 1b       	sub	r22, r18
 bb4:	73 0b       	sbc	r23, r19
 bb6:	84 0b       	sbc	r24, r20
 bb8:	ba 0b       	sbc	r27, r26
 bba:	ee 1f       	adc	r30, r30
 bbc:	88 f7       	brcc	.-30     	; 0xba0 <__divsf3_pse+0x90>
 bbe:	e0 95       	com	r30
 bc0:	08 95       	ret

00000bc2 <__fixunssfsi>:
 bc2:	d4 d0       	rcall	.+424    	; 0xd6c <__fp_splitA>
 bc4:	88 f0       	brcs	.+34     	; 0xbe8 <__fixunssfsi+0x26>
 bc6:	9f 57       	subi	r25, 0x7F	; 127
 bc8:	90 f0       	brcs	.+36     	; 0xbee <__fixunssfsi+0x2c>
 bca:	b9 2f       	mov	r27, r25
 bcc:	99 27       	eor	r25, r25
 bce:	b7 51       	subi	r27, 0x17	; 23
 bd0:	a0 f0       	brcs	.+40     	; 0xbfa <__fixunssfsi+0x38>
 bd2:	d1 f0       	breq	.+52     	; 0xc08 <__fixunssfsi+0x46>
 bd4:	66 0f       	add	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	1a f0       	brmi	.+6      	; 0xbe4 <__fixunssfsi+0x22>
 bde:	ba 95       	dec	r27
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__fixunssfsi+0x12>
 be2:	12 c0       	rjmp	.+36     	; 0xc08 <__fixunssfsi+0x46>
 be4:	b1 30       	cpi	r27, 0x01	; 1
 be6:	81 f0       	breq	.+32     	; 0xc08 <__fixunssfsi+0x46>
 be8:	f2 d0       	rcall	.+484    	; 0xdce <__fp_zero>
 bea:	b1 e0       	ldi	r27, 0x01	; 1
 bec:	08 95       	ret
 bee:	ef c0       	rjmp	.+478    	; 0xdce <__fp_zero>
 bf0:	67 2f       	mov	r22, r23
 bf2:	78 2f       	mov	r23, r24
 bf4:	88 27       	eor	r24, r24
 bf6:	b8 5f       	subi	r27, 0xF8	; 248
 bf8:	39 f0       	breq	.+14     	; 0xc08 <__fixunssfsi+0x46>
 bfa:	b9 3f       	cpi	r27, 0xF9	; 249
 bfc:	cc f3       	brlt	.-14     	; 0xbf0 <__fixunssfsi+0x2e>
 bfe:	86 95       	lsr	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b3 95       	inc	r27
 c06:	d9 f7       	brne	.-10     	; 0xbfe <__fixunssfsi+0x3c>
 c08:	3e f4       	brtc	.+14     	; 0xc18 <__fixunssfsi+0x56>
 c0a:	90 95       	com	r25
 c0c:	80 95       	com	r24
 c0e:	70 95       	com	r23
 c10:	61 95       	neg	r22
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	08 95       	ret

00000c1a <__floatunsisf>:
 c1a:	e8 94       	clt
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
 c1e:	97 fb       	bst	r25, 7
 c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
 c22:	90 95       	com	r25
 c24:	80 95       	com	r24
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255
 c2c:	8f 4f       	sbci	r24, 0xFF	; 255
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	99 23       	and	r25, r25
 c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
 c34:	f9 2f       	mov	r31, r25
 c36:	96 e9       	ldi	r25, 0x96	; 150
 c38:	bb 27       	eor	r27, r27
 c3a:	93 95       	inc	r25
 c3c:	f6 95       	lsr	r31
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f1 11       	cpse	r31, r1
 c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
 c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
 c4c:	bb 0f       	add	r27, r27
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
 c50:	60 ff       	sbrs	r22, 0
 c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
 c5e:	88 23       	and	r24, r24
 c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
 c66:	77 23       	and	r23, r23
 c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
 c6a:	9e e8       	ldi	r25, 0x8E	; 142
 c6c:	87 2f       	mov	r24, r23
 c6e:	76 2f       	mov	r23, r22
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
 c72:	66 23       	and	r22, r22
 c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
 c76:	96 e8       	ldi	r25, 0x86	; 134
 c78:	86 2f       	mov	r24, r22
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
 c80:	9a 95       	dec	r25
 c82:	66 0f       	add	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
 c8a:	88 0f       	add	r24, r24
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <floor>:
 c94:	85 d0       	rcall	.+266    	; 0xda0 <__fp_trunc>
 c96:	80 f0       	brcs	.+32     	; 0xcb8 <floor+0x24>
 c98:	9f 37       	cpi	r25, 0x7F	; 127
 c9a:	40 f4       	brcc	.+16     	; 0xcac <floor+0x18>
 c9c:	91 11       	cpse	r25, r1
 c9e:	0e f0       	brts	.+2      	; 0xca2 <floor+0xe>
 ca0:	97 c0       	rjmp	.+302    	; 0xdd0 <__fp_szero>
 ca2:	60 e0       	ldi	r22, 0x00	; 0
 ca4:	70 e0       	ldi	r23, 0x00	; 0
 ca6:	80 e8       	ldi	r24, 0x80	; 128
 ca8:	9f eb       	ldi	r25, 0xBF	; 191
 caa:	08 95       	ret
 cac:	26 f4       	brtc	.+8      	; 0xcb6 <floor+0x22>
 cae:	1b 16       	cp	r1, r27
 cb0:	61 1d       	adc	r22, r1
 cb2:	71 1d       	adc	r23, r1
 cb4:	81 1d       	adc	r24, r1
 cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <__fp_mintl>
 cb8:	21 c0       	rjmp	.+66     	; 0xcfc <__fp_mpack>

00000cba <__fp_inf>:
 cba:	97 f9       	bld	r25, 7
 cbc:	9f 67       	ori	r25, 0x7F	; 127
 cbe:	80 e8       	ldi	r24, 0x80	; 128
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	08 95       	ret

00000cc6 <__fp_mintl>:
 cc6:	88 23       	and	r24, r24
 cc8:	71 f4       	brne	.+28     	; 0xce6 <__fp_mintl+0x20>
 cca:	77 23       	and	r23, r23
 ccc:	21 f0       	breq	.+8      	; 0xcd6 <__fp_mintl+0x10>
 cce:	98 50       	subi	r25, 0x08	; 8
 cd0:	87 2b       	or	r24, r23
 cd2:	76 2f       	mov	r23, r22
 cd4:	07 c0       	rjmp	.+14     	; 0xce4 <__fp_mintl+0x1e>
 cd6:	66 23       	and	r22, r22
 cd8:	11 f4       	brne	.+4      	; 0xcde <__fp_mintl+0x18>
 cda:	99 27       	eor	r25, r25
 cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <__fp_mintl+0x32>
 cde:	90 51       	subi	r25, 0x10	; 16
 ce0:	86 2b       	or	r24, r22
 ce2:	70 e0       	ldi	r23, 0x00	; 0
 ce4:	60 e0       	ldi	r22, 0x00	; 0
 ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__fp_mintl+0x2c>
 ce8:	9a 95       	dec	r25
 cea:	66 0f       	add	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	da f7       	brpl	.-10     	; 0xce8 <__fp_mintl+0x22>
 cf2:	88 0f       	add	r24, r24
 cf4:	96 95       	lsr	r25
 cf6:	87 95       	ror	r24
 cf8:	97 f9       	bld	r25, 7
 cfa:	08 95       	ret

00000cfc <__fp_mpack>:
 cfc:	9f 3f       	cpi	r25, 0xFF	; 255
 cfe:	31 f0       	breq	.+12     	; 0xd0c <__fp_mpack_finite+0xc>

00000d00 <__fp_mpack_finite>:
 d00:	91 50       	subi	r25, 0x01	; 1
 d02:	20 f4       	brcc	.+8      	; 0xd0c <__fp_mpack_finite+0xc>
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	b7 95       	ror	r27
 d0c:	88 0f       	add	r24, r24
 d0e:	91 1d       	adc	r25, r1
 d10:	96 95       	lsr	r25
 d12:	87 95       	ror	r24
 d14:	97 f9       	bld	r25, 7
 d16:	08 95       	ret

00000d18 <__fp_nan>:
 d18:	9f ef       	ldi	r25, 0xFF	; 255
 d1a:	80 ec       	ldi	r24, 0xC0	; 192
 d1c:	08 95       	ret

00000d1e <__fp_pscA>:
 d1e:	00 24       	eor	r0, r0
 d20:	0a 94       	dec	r0
 d22:	16 16       	cp	r1, r22
 d24:	17 06       	cpc	r1, r23
 d26:	18 06       	cpc	r1, r24
 d28:	09 06       	cpc	r0, r25
 d2a:	08 95       	ret

00000d2c <__fp_pscB>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	05 06       	cpc	r0, r21
 d38:	08 95       	ret

00000d3a <__fp_round>:
 d3a:	09 2e       	mov	r0, r25
 d3c:	03 94       	inc	r0
 d3e:	00 0c       	add	r0, r0
 d40:	11 f4       	brne	.+4      	; 0xd46 <__fp_round+0xc>
 d42:	88 23       	and	r24, r24
 d44:	52 f0       	brmi	.+20     	; 0xd5a <__fp_round+0x20>
 d46:	bb 0f       	add	r27, r27
 d48:	40 f4       	brcc	.+16     	; 0xd5a <__fp_round+0x20>
 d4a:	bf 2b       	or	r27, r31
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0x18>
 d4e:	60 ff       	sbrs	r22, 0
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <__fp_round+0x20>
 d52:	6f 5f       	subi	r22, 0xFF	; 255
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	08 95       	ret

00000d5c <__fp_split3>:
 d5c:	57 fd       	sbrc	r21, 7
 d5e:	90 58       	subi	r25, 0x80	; 128
 d60:	44 0f       	add	r20, r20
 d62:	55 1f       	adc	r21, r21
 d64:	59 f0       	breq	.+22     	; 0xd7c <__fp_splitA+0x10>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	71 f0       	breq	.+28     	; 0xd86 <__fp_splitA+0x1a>
 d6a:	47 95       	ror	r20

00000d6c <__fp_splitA>:
 d6c:	88 0f       	add	r24, r24
 d6e:	97 fb       	bst	r25, 7
 d70:	99 1f       	adc	r25, r25
 d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_splitA+0x20>
 d74:	9f 3f       	cpi	r25, 0xFF	; 255
 d76:	79 f0       	breq	.+30     	; 0xd96 <__fp_splitA+0x2a>
 d78:	87 95       	ror	r24
 d7a:	08 95       	ret
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	14 06       	cpc	r1, r20
 d82:	55 1f       	adc	r21, r21
 d84:	f2 cf       	rjmp	.-28     	; 0xd6a <__fp_split3+0xe>
 d86:	46 95       	lsr	r20
 d88:	f1 df       	rcall	.-30     	; 0xd6c <__fp_splitA>
 d8a:	08 c0       	rjmp	.+16     	; 0xd9c <__fp_splitA+0x30>
 d8c:	16 16       	cp	r1, r22
 d8e:	17 06       	cpc	r1, r23
 d90:	18 06       	cpc	r1, r24
 d92:	99 1f       	adc	r25, r25
 d94:	f1 cf       	rjmp	.-30     	; 0xd78 <__fp_splitA+0xc>
 d96:	86 95       	lsr	r24
 d98:	71 05       	cpc	r23, r1
 d9a:	61 05       	cpc	r22, r1
 d9c:	08 94       	sec
 d9e:	08 95       	ret

00000da0 <__fp_trunc>:
 da0:	e5 df       	rcall	.-54     	; 0xd6c <__fp_splitA>
 da2:	a0 f0       	brcs	.+40     	; 0xdcc <__fp_trunc+0x2c>
 da4:	be e7       	ldi	r27, 0x7E	; 126
 da6:	b9 17       	cp	r27, r25
 da8:	88 f4       	brcc	.+34     	; 0xdcc <__fp_trunc+0x2c>
 daa:	bb 27       	eor	r27, r27
 dac:	9f 38       	cpi	r25, 0x8F	; 143
 dae:	60 f4       	brcc	.+24     	; 0xdc8 <__fp_trunc+0x28>
 db0:	16 16       	cp	r1, r22
 db2:	b1 1d       	adc	r27, r1
 db4:	67 2f       	mov	r22, r23
 db6:	78 2f       	mov	r23, r24
 db8:	88 27       	eor	r24, r24
 dba:	98 5f       	subi	r25, 0xF8	; 248
 dbc:	f7 cf       	rjmp	.-18     	; 0xdac <__fp_trunc+0xc>
 dbe:	86 95       	lsr	r24
 dc0:	77 95       	ror	r23
 dc2:	67 95       	ror	r22
 dc4:	b1 1d       	adc	r27, r1
 dc6:	93 95       	inc	r25
 dc8:	96 39       	cpi	r25, 0x96	; 150
 dca:	c8 f3       	brcs	.-14     	; 0xdbe <__fp_trunc+0x1e>
 dcc:	08 95       	ret

00000dce <__fp_zero>:
 dce:	e8 94       	clt

00000dd0 <__fp_szero>:
 dd0:	bb 27       	eor	r27, r27
 dd2:	66 27       	eor	r22, r22
 dd4:	77 27       	eor	r23, r23
 dd6:	cb 01       	movw	r24, r22
 dd8:	97 f9       	bld	r25, 7
 dda:	08 95       	ret

00000ddc <__mulsf3>:
 ddc:	0b d0       	rcall	.+22     	; 0xdf4 <__mulsf3x>
 dde:	ad cf       	rjmp	.-166    	; 0xd3a <__fp_round>
 de0:	9e df       	rcall	.-196    	; 0xd1e <__fp_pscA>
 de2:	28 f0       	brcs	.+10     	; 0xdee <__mulsf3+0x12>
 de4:	a3 df       	rcall	.-186    	; 0xd2c <__fp_pscB>
 de6:	18 f0       	brcs	.+6      	; 0xdee <__mulsf3+0x12>
 de8:	95 23       	and	r25, r21
 dea:	09 f0       	breq	.+2      	; 0xdee <__mulsf3+0x12>
 dec:	66 cf       	rjmp	.-308    	; 0xcba <__fp_inf>
 dee:	94 cf       	rjmp	.-216    	; 0xd18 <__fp_nan>
 df0:	11 24       	eor	r1, r1
 df2:	ee cf       	rjmp	.-36     	; 0xdd0 <__fp_szero>

00000df4 <__mulsf3x>:
 df4:	b3 df       	rcall	.-154    	; 0xd5c <__fp_split3>
 df6:	a0 f3       	brcs	.-24     	; 0xde0 <__mulsf3+0x4>

00000df8 <__mulsf3_pse>:
 df8:	95 9f       	mul	r25, r21
 dfa:	d1 f3       	breq	.-12     	; 0xdf0 <__mulsf3+0x14>
 dfc:	95 0f       	add	r25, r21
 dfe:	50 e0       	ldi	r21, 0x00	; 0
 e00:	55 1f       	adc	r21, r21
 e02:	62 9f       	mul	r22, r18
 e04:	f0 01       	movw	r30, r0
 e06:	72 9f       	mul	r23, r18
 e08:	bb 27       	eor	r27, r27
 e0a:	f0 0d       	add	r31, r0
 e0c:	b1 1d       	adc	r27, r1
 e0e:	63 9f       	mul	r22, r19
 e10:	aa 27       	eor	r26, r26
 e12:	f0 0d       	add	r31, r0
 e14:	b1 1d       	adc	r27, r1
 e16:	aa 1f       	adc	r26, r26
 e18:	64 9f       	mul	r22, r20
 e1a:	66 27       	eor	r22, r22
 e1c:	b0 0d       	add	r27, r0
 e1e:	a1 1d       	adc	r26, r1
 e20:	66 1f       	adc	r22, r22
 e22:	82 9f       	mul	r24, r18
 e24:	22 27       	eor	r18, r18
 e26:	b0 0d       	add	r27, r0
 e28:	a1 1d       	adc	r26, r1
 e2a:	62 1f       	adc	r22, r18
 e2c:	73 9f       	mul	r23, r19
 e2e:	b0 0d       	add	r27, r0
 e30:	a1 1d       	adc	r26, r1
 e32:	62 1f       	adc	r22, r18
 e34:	83 9f       	mul	r24, r19
 e36:	a0 0d       	add	r26, r0
 e38:	61 1d       	adc	r22, r1
 e3a:	22 1f       	adc	r18, r18
 e3c:	74 9f       	mul	r23, r20
 e3e:	33 27       	eor	r19, r19
 e40:	a0 0d       	add	r26, r0
 e42:	61 1d       	adc	r22, r1
 e44:	23 1f       	adc	r18, r19
 e46:	84 9f       	mul	r24, r20
 e48:	60 0d       	add	r22, r0
 e4a:	21 1d       	adc	r18, r1
 e4c:	82 2f       	mov	r24, r18
 e4e:	76 2f       	mov	r23, r22
 e50:	6a 2f       	mov	r22, r26
 e52:	11 24       	eor	r1, r1
 e54:	9f 57       	subi	r25, 0x7F	; 127
 e56:	50 40       	sbci	r21, 0x00	; 0
 e58:	8a f0       	brmi	.+34     	; 0xe7c <__mulsf3_pse+0x84>
 e5a:	e1 f0       	breq	.+56     	; 0xe94 <__mulsf3_pse+0x9c>
 e5c:	88 23       	and	r24, r24
 e5e:	4a f0       	brmi	.+18     	; 0xe72 <__mulsf3_pse+0x7a>
 e60:	ee 0f       	add	r30, r30
 e62:	ff 1f       	adc	r31, r31
 e64:	bb 1f       	adc	r27, r27
 e66:	66 1f       	adc	r22, r22
 e68:	77 1f       	adc	r23, r23
 e6a:	88 1f       	adc	r24, r24
 e6c:	91 50       	subi	r25, 0x01	; 1
 e6e:	50 40       	sbci	r21, 0x00	; 0
 e70:	a9 f7       	brne	.-22     	; 0xe5c <__mulsf3_pse+0x64>
 e72:	9e 3f       	cpi	r25, 0xFE	; 254
 e74:	51 05       	cpc	r21, r1
 e76:	70 f0       	brcs	.+28     	; 0xe94 <__mulsf3_pse+0x9c>
 e78:	20 cf       	rjmp	.-448    	; 0xcba <__fp_inf>
 e7a:	aa cf       	rjmp	.-172    	; 0xdd0 <__fp_szero>
 e7c:	5f 3f       	cpi	r21, 0xFF	; 255
 e7e:	ec f3       	brlt	.-6      	; 0xe7a <__mulsf3_pse+0x82>
 e80:	98 3e       	cpi	r25, 0xE8	; 232
 e82:	dc f3       	brlt	.-10     	; 0xe7a <__mulsf3_pse+0x82>
 e84:	86 95       	lsr	r24
 e86:	77 95       	ror	r23
 e88:	67 95       	ror	r22
 e8a:	b7 95       	ror	r27
 e8c:	f7 95       	ror	r31
 e8e:	e7 95       	ror	r30
 e90:	9f 5f       	subi	r25, 0xFF	; 255
 e92:	c1 f7       	brne	.-16     	; 0xe84 <__mulsf3_pse+0x8c>
 e94:	fe 2b       	or	r31, r30
 e96:	88 0f       	add	r24, r24
 e98:	91 1d       	adc	r25, r1
 e9a:	96 95       	lsr	r25
 e9c:	87 95       	ror	r24
 e9e:	97 f9       	bld	r25, 7
 ea0:	08 95       	ret

00000ea2 <__udivmodhi4>:
 ea2:	aa 1b       	sub	r26, r26
 ea4:	bb 1b       	sub	r27, r27
 ea6:	51 e1       	ldi	r21, 0x11	; 17
 ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <__udivmodhi4_ep>

00000eaa <__udivmodhi4_loop>:
 eaa:	aa 1f       	adc	r26, r26
 eac:	bb 1f       	adc	r27, r27
 eae:	a6 17       	cp	r26, r22
 eb0:	b7 07       	cpc	r27, r23
 eb2:	10 f0       	brcs	.+4      	; 0xeb8 <__udivmodhi4_ep>
 eb4:	a6 1b       	sub	r26, r22
 eb6:	b7 0b       	sbc	r27, r23

00000eb8 <__udivmodhi4_ep>:
 eb8:	88 1f       	adc	r24, r24
 eba:	99 1f       	adc	r25, r25
 ebc:	5a 95       	dec	r21
 ebe:	a9 f7       	brne	.-22     	; 0xeaa <__udivmodhi4_loop>
 ec0:	80 95       	com	r24
 ec2:	90 95       	com	r25
 ec4:	bc 01       	movw	r22, r24
 ec6:	cd 01       	movw	r24, r26
 ec8:	08 95       	ret

00000eca <__divmodhi4>:
 eca:	97 fb       	bst	r25, 7
 ecc:	09 2e       	mov	r0, r25
 ece:	07 26       	eor	r0, r23
 ed0:	0a d0       	rcall	.+20     	; 0xee6 <__divmodhi4_neg1>
 ed2:	77 fd       	sbrc	r23, 7
 ed4:	04 d0       	rcall	.+8      	; 0xede <__divmodhi4_neg2>
 ed6:	e5 df       	rcall	.-54     	; 0xea2 <__udivmodhi4>
 ed8:	06 d0       	rcall	.+12     	; 0xee6 <__divmodhi4_neg1>
 eda:	00 20       	and	r0, r0
 edc:	1a f4       	brpl	.+6      	; 0xee4 <__divmodhi4_exit>

00000ede <__divmodhi4_neg2>:
 ede:	70 95       	com	r23
 ee0:	61 95       	neg	r22
 ee2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ee4 <__divmodhi4_exit>:
 ee4:	08 95       	ret

00000ee6 <__divmodhi4_neg1>:
 ee6:	f6 f7       	brtc	.-4      	; 0xee4 <__divmodhi4_exit>
 ee8:	90 95       	com	r25
 eea:	81 95       	neg	r24
 eec:	9f 4f       	sbci	r25, 0xFF	; 255
 eee:	08 95       	ret

00000ef0 <_exit>:
 ef0:	f8 94       	cli

00000ef2 <__stop_program>:
 ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__stop_program>
=======
 aa2:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <main+0xc4>

00000aa8 <__subsf3>:
 aa8:	50 58       	subi	r21, 0x80	; 128

00000aaa <__addsf3>:
 aaa:	bb 27       	eor	r27, r27
 aac:	aa 27       	eor	r26, r26
 aae:	0e d0       	rcall	.+28     	; 0xacc <__addsf3x>
 ab0:	84 c1       	rjmp	.+776    	; 0xdba <__fp_round>
 ab2:	75 d1       	rcall	.+746    	; 0xd9e <__fp_pscA>
 ab4:	30 f0       	brcs	.+12     	; 0xac2 <__addsf3+0x18>
 ab6:	7a d1       	rcall	.+756    	; 0xdac <__fp_pscB>
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__addsf3+0x18>
 aba:	31 f4       	brne	.+12     	; 0xac8 <__addsf3+0x1e>
 abc:	9f 3f       	cpi	r25, 0xFF	; 255
 abe:	11 f4       	brne	.+4      	; 0xac4 <__addsf3+0x1a>
 ac0:	1e f4       	brtc	.+6      	; 0xac8 <__addsf3+0x1e>
 ac2:	6a c1       	rjmp	.+724    	; 0xd98 <__fp_nan>
 ac4:	0e f4       	brtc	.+2      	; 0xac8 <__addsf3+0x1e>
 ac6:	e0 95       	com	r30
 ac8:	e7 fb       	bst	r30, 7
 aca:	37 c1       	rjmp	.+622    	; 0xd3a <__fp_inf>

00000acc <__addsf3x>:
 acc:	e9 2f       	mov	r30, r25
 ace:	86 d1       	rcall	.+780    	; 0xddc <__fp_split3>
 ad0:	80 f3       	brcs	.-32     	; 0xab2 <__addsf3+0x8>
 ad2:	ba 17       	cp	r27, r26
 ad4:	62 07       	cpc	r22, r18
 ad6:	73 07       	cpc	r23, r19
 ad8:	84 07       	cpc	r24, r20
 ada:	95 07       	cpc	r25, r21
 adc:	18 f0       	brcs	.+6      	; 0xae4 <__addsf3x+0x18>
 ade:	71 f4       	brne	.+28     	; 0xafc <__addsf3x+0x30>
 ae0:	9e f5       	brtc	.+102    	; 0xb48 <__addsf3x+0x7c>
 ae2:	b5 c1       	rjmp	.+874    	; 0xe4e <__fp_zero>
 ae4:	0e f4       	brtc	.+2      	; 0xae8 <__addsf3x+0x1c>
 ae6:	e0 95       	com	r30
 ae8:	0b 2e       	mov	r0, r27
 aea:	ba 2f       	mov	r27, r26
 aec:	a0 2d       	mov	r26, r0
 aee:	0b 01       	movw	r0, r22
 af0:	b9 01       	movw	r22, r18
 af2:	90 01       	movw	r18, r0
 af4:	0c 01       	movw	r0, r24
 af6:	ca 01       	movw	r24, r20
 af8:	a0 01       	movw	r20, r0
 afa:	11 24       	eor	r1, r1
 afc:	ff 27       	eor	r31, r31
 afe:	59 1b       	sub	r21, r25
 b00:	99 f0       	breq	.+38     	; 0xb28 <__addsf3x+0x5c>
 b02:	59 3f       	cpi	r21, 0xF9	; 249
 b04:	50 f4       	brcc	.+20     	; 0xb1a <__addsf3x+0x4e>
 b06:	50 3e       	cpi	r21, 0xE0	; 224
 b08:	68 f1       	brcs	.+90     	; 0xb64 <__addsf3x+0x98>
 b0a:	1a 16       	cp	r1, r26
 b0c:	f0 40       	sbci	r31, 0x00	; 0
 b0e:	a2 2f       	mov	r26, r18
 b10:	23 2f       	mov	r18, r19
 b12:	34 2f       	mov	r19, r20
 b14:	44 27       	eor	r20, r20
 b16:	58 5f       	subi	r21, 0xF8	; 248
 b18:	f3 cf       	rjmp	.-26     	; 0xb00 <__addsf3x+0x34>
 b1a:	46 95       	lsr	r20
 b1c:	37 95       	ror	r19
 b1e:	27 95       	ror	r18
 b20:	a7 95       	ror	r26
 b22:	f0 40       	sbci	r31, 0x00	; 0
 b24:	53 95       	inc	r21
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__addsf3x+0x4e>
 b28:	7e f4       	brtc	.+30     	; 0xb48 <__addsf3x+0x7c>
 b2a:	1f 16       	cp	r1, r31
 b2c:	ba 0b       	sbc	r27, r26
 b2e:	62 0b       	sbc	r22, r18
 b30:	73 0b       	sbc	r23, r19
 b32:	84 0b       	sbc	r24, r20
 b34:	ba f0       	brmi	.+46     	; 0xb64 <__addsf3x+0x98>
 b36:	91 50       	subi	r25, 0x01	; 1
 b38:	a1 f0       	breq	.+40     	; 0xb62 <__addsf3x+0x96>
 b3a:	ff 0f       	add	r31, r31
 b3c:	bb 1f       	adc	r27, r27
 b3e:	66 1f       	adc	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	c2 f7       	brpl	.-16     	; 0xb36 <__addsf3x+0x6a>
 b46:	0e c0       	rjmp	.+28     	; 0xb64 <__addsf3x+0x98>
 b48:	ba 0f       	add	r27, r26
 b4a:	62 1f       	adc	r22, r18
 b4c:	73 1f       	adc	r23, r19
 b4e:	84 1f       	adc	r24, r20
 b50:	48 f4       	brcc	.+18     	; 0xb64 <__addsf3x+0x98>
 b52:	87 95       	ror	r24
 b54:	77 95       	ror	r23
 b56:	67 95       	ror	r22
 b58:	b7 95       	ror	r27
 b5a:	f7 95       	ror	r31
 b5c:	9e 3f       	cpi	r25, 0xFE	; 254
 b5e:	08 f0       	brcs	.+2      	; 0xb62 <__addsf3x+0x96>
 b60:	b3 cf       	rjmp	.-154    	; 0xac8 <__addsf3+0x1e>
 b62:	93 95       	inc	r25
 b64:	88 0f       	add	r24, r24
 b66:	08 f0       	brcs	.+2      	; 0xb6a <__addsf3x+0x9e>
 b68:	99 27       	eor	r25, r25
 b6a:	ee 0f       	add	r30, r30
 b6c:	97 95       	ror	r25
 b6e:	87 95       	ror	r24
 b70:	08 95       	ret

00000b72 <__divsf3>:
 b72:	0c d0       	rcall	.+24     	; 0xb8c <__divsf3x>
 b74:	22 c1       	rjmp	.+580    	; 0xdba <__fp_round>
 b76:	1a d1       	rcall	.+564    	; 0xdac <__fp_pscB>
 b78:	40 f0       	brcs	.+16     	; 0xb8a <__divsf3+0x18>
 b7a:	11 d1       	rcall	.+546    	; 0xd9e <__fp_pscA>
 b7c:	30 f0       	brcs	.+12     	; 0xb8a <__divsf3+0x18>
 b7e:	21 f4       	brne	.+8      	; 0xb88 <__divsf3+0x16>
 b80:	5f 3f       	cpi	r21, 0xFF	; 255
 b82:	19 f0       	breq	.+6      	; 0xb8a <__divsf3+0x18>
 b84:	da c0       	rjmp	.+436    	; 0xd3a <__fp_inf>
 b86:	51 11       	cpse	r21, r1
 b88:	63 c1       	rjmp	.+710    	; 0xe50 <__fp_szero>
 b8a:	06 c1       	rjmp	.+524    	; 0xd98 <__fp_nan>

00000b8c <__divsf3x>:
 b8c:	27 d1       	rcall	.+590    	; 0xddc <__fp_split3>
 b8e:	98 f3       	brcs	.-26     	; 0xb76 <__divsf3+0x4>

00000b90 <__divsf3_pse>:
 b90:	99 23       	and	r25, r25
 b92:	c9 f3       	breq	.-14     	; 0xb86 <__divsf3+0x14>
 b94:	55 23       	and	r21, r21
 b96:	b1 f3       	breq	.-20     	; 0xb84 <__divsf3+0x12>
 b98:	95 1b       	sub	r25, r21
 b9a:	55 0b       	sbc	r21, r21
 b9c:	bb 27       	eor	r27, r27
 b9e:	aa 27       	eor	r26, r26
 ba0:	62 17       	cp	r22, r18
 ba2:	73 07       	cpc	r23, r19
 ba4:	84 07       	cpc	r24, r20
 ba6:	38 f0       	brcs	.+14     	; 0xbb6 <__divsf3_pse+0x26>
 ba8:	9f 5f       	subi	r25, 0xFF	; 255
 baa:	5f 4f       	sbci	r21, 0xFF	; 255
 bac:	22 0f       	add	r18, r18
 bae:	33 1f       	adc	r19, r19
 bb0:	44 1f       	adc	r20, r20
 bb2:	aa 1f       	adc	r26, r26
 bb4:	a9 f3       	breq	.-22     	; 0xba0 <__divsf3_pse+0x10>
 bb6:	33 d0       	rcall	.+102    	; 0xc1e <__divsf3_pse+0x8e>
 bb8:	0e 2e       	mov	r0, r30
 bba:	3a f0       	brmi	.+14     	; 0xbca <__divsf3_pse+0x3a>
 bbc:	e0 e8       	ldi	r30, 0x80	; 128
 bbe:	30 d0       	rcall	.+96     	; 0xc20 <__divsf3_pse+0x90>
 bc0:	91 50       	subi	r25, 0x01	; 1
 bc2:	50 40       	sbci	r21, 0x00	; 0
 bc4:	e6 95       	lsr	r30
 bc6:	00 1c       	adc	r0, r0
 bc8:	ca f7       	brpl	.-14     	; 0xbbc <__divsf3_pse+0x2c>
 bca:	29 d0       	rcall	.+82     	; 0xc1e <__divsf3_pse+0x8e>
 bcc:	fe 2f       	mov	r31, r30
 bce:	27 d0       	rcall	.+78     	; 0xc1e <__divsf3_pse+0x8e>
 bd0:	66 0f       	add	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	bb 1f       	adc	r27, r27
 bd8:	26 17       	cp	r18, r22
 bda:	37 07       	cpc	r19, r23
 bdc:	48 07       	cpc	r20, r24
 bde:	ab 07       	cpc	r26, r27
 be0:	b0 e8       	ldi	r27, 0x80	; 128
 be2:	09 f0       	breq	.+2      	; 0xbe6 <__divsf3_pse+0x56>
 be4:	bb 0b       	sbc	r27, r27
 be6:	80 2d       	mov	r24, r0
 be8:	bf 01       	movw	r22, r30
 bea:	ff 27       	eor	r31, r31
 bec:	93 58       	subi	r25, 0x83	; 131
 bee:	5f 4f       	sbci	r21, 0xFF	; 255
 bf0:	2a f0       	brmi	.+10     	; 0xbfc <__divsf3_pse+0x6c>
 bf2:	9e 3f       	cpi	r25, 0xFE	; 254
 bf4:	51 05       	cpc	r21, r1
 bf6:	68 f0       	brcs	.+26     	; 0xc12 <__divsf3_pse+0x82>
 bf8:	a0 c0       	rjmp	.+320    	; 0xd3a <__fp_inf>
 bfa:	2a c1       	rjmp	.+596    	; 0xe50 <__fp_szero>
 bfc:	5f 3f       	cpi	r21, 0xFF	; 255
 bfe:	ec f3       	brlt	.-6      	; 0xbfa <__divsf3_pse+0x6a>
 c00:	98 3e       	cpi	r25, 0xE8	; 232
 c02:	dc f3       	brlt	.-10     	; 0xbfa <__divsf3_pse+0x6a>
 c04:	86 95       	lsr	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	b7 95       	ror	r27
 c0c:	f7 95       	ror	r31
 c0e:	9f 5f       	subi	r25, 0xFF	; 255
 c10:	c9 f7       	brne	.-14     	; 0xc04 <__divsf3_pse+0x74>
 c12:	88 0f       	add	r24, r24
 c14:	91 1d       	adc	r25, r1
 c16:	96 95       	lsr	r25
 c18:	87 95       	ror	r24
 c1a:	97 f9       	bld	r25, 7
 c1c:	08 95       	ret
 c1e:	e1 e0       	ldi	r30, 0x01	; 1
 c20:	66 0f       	add	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	bb 1f       	adc	r27, r27
 c28:	62 17       	cp	r22, r18
 c2a:	73 07       	cpc	r23, r19
 c2c:	84 07       	cpc	r24, r20
 c2e:	ba 07       	cpc	r27, r26
 c30:	20 f0       	brcs	.+8      	; 0xc3a <__divsf3_pse+0xaa>
 c32:	62 1b       	sub	r22, r18
 c34:	73 0b       	sbc	r23, r19
 c36:	84 0b       	sbc	r24, r20
 c38:	ba 0b       	sbc	r27, r26
 c3a:	ee 1f       	adc	r30, r30
 c3c:	88 f7       	brcc	.-30     	; 0xc20 <__divsf3_pse+0x90>
 c3e:	e0 95       	com	r30
 c40:	08 95       	ret

00000c42 <__fixunssfsi>:
 c42:	d4 d0       	rcall	.+424    	; 0xdec <__fp_splitA>
 c44:	88 f0       	brcs	.+34     	; 0xc68 <__fixunssfsi+0x26>
 c46:	9f 57       	subi	r25, 0x7F	; 127
 c48:	90 f0       	brcs	.+36     	; 0xc6e <__fixunssfsi+0x2c>
 c4a:	b9 2f       	mov	r27, r25
 c4c:	99 27       	eor	r25, r25
 c4e:	b7 51       	subi	r27, 0x17	; 23
 c50:	a0 f0       	brcs	.+40     	; 0xc7a <__fixunssfsi+0x38>
 c52:	d1 f0       	breq	.+52     	; 0xc88 <__fixunssfsi+0x46>
 c54:	66 0f       	add	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	1a f0       	brmi	.+6      	; 0xc64 <__fixunssfsi+0x22>
 c5e:	ba 95       	dec	r27
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__fixunssfsi+0x12>
 c62:	12 c0       	rjmp	.+36     	; 0xc88 <__fixunssfsi+0x46>
 c64:	b1 30       	cpi	r27, 0x01	; 1
 c66:	81 f0       	breq	.+32     	; 0xc88 <__fixunssfsi+0x46>
 c68:	f2 d0       	rcall	.+484    	; 0xe4e <__fp_zero>
 c6a:	b1 e0       	ldi	r27, 0x01	; 1
 c6c:	08 95       	ret
 c6e:	ef c0       	rjmp	.+478    	; 0xe4e <__fp_zero>
 c70:	67 2f       	mov	r22, r23
 c72:	78 2f       	mov	r23, r24
 c74:	88 27       	eor	r24, r24
 c76:	b8 5f       	subi	r27, 0xF8	; 248
 c78:	39 f0       	breq	.+14     	; 0xc88 <__fixunssfsi+0x46>
 c7a:	b9 3f       	cpi	r27, 0xF9	; 249
 c7c:	cc f3       	brlt	.-14     	; 0xc70 <__fixunssfsi+0x2e>
 c7e:	86 95       	lsr	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b3 95       	inc	r27
 c86:	d9 f7       	brne	.-10     	; 0xc7e <__fixunssfsi+0x3c>
 c88:	3e f4       	brtc	.+14     	; 0xc98 <__fixunssfsi+0x56>
 c8a:	90 95       	com	r25
 c8c:	80 95       	com	r24
 c8e:	70 95       	com	r23
 c90:	61 95       	neg	r22
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <__floatunsisf>:
 c9a:	e8 94       	clt
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <__floatsisf+0x12>

00000c9e <__floatsisf>:
 c9e:	97 fb       	bst	r25, 7
 ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__floatsisf+0x12>
 ca2:	90 95       	com	r25
 ca4:	80 95       	com	r24
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	99 23       	and	r25, r25
 cb2:	a9 f0       	breq	.+42     	; 0xcde <__floatsisf+0x40>
 cb4:	f9 2f       	mov	r31, r25
 cb6:	96 e9       	ldi	r25, 0x96	; 150
 cb8:	bb 27       	eor	r27, r27
 cba:	93 95       	inc	r25
 cbc:	f6 95       	lsr	r31
 cbe:	87 95       	ror	r24
 cc0:	77 95       	ror	r23
 cc2:	67 95       	ror	r22
 cc4:	b7 95       	ror	r27
 cc6:	f1 11       	cpse	r31, r1
 cc8:	f8 cf       	rjmp	.-16     	; 0xcba <__floatsisf+0x1c>
 cca:	fa f4       	brpl	.+62     	; 0xd0a <__floatsisf+0x6c>
 ccc:	bb 0f       	add	r27, r27
 cce:	11 f4       	brne	.+4      	; 0xcd4 <__floatsisf+0x36>
 cd0:	60 ff       	sbrs	r22, 0
 cd2:	1b c0       	rjmp	.+54     	; 0xd0a <__floatsisf+0x6c>
 cd4:	6f 5f       	subi	r22, 0xFF	; 255
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255
 cd8:	8f 4f       	sbci	r24, 0xFF	; 255
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	16 c0       	rjmp	.+44     	; 0xd0a <__floatsisf+0x6c>
 cde:	88 23       	and	r24, r24
 ce0:	11 f0       	breq	.+4      	; 0xce6 <__floatsisf+0x48>
 ce2:	96 e9       	ldi	r25, 0x96	; 150
 ce4:	11 c0       	rjmp	.+34     	; 0xd08 <__floatsisf+0x6a>
 ce6:	77 23       	and	r23, r23
 ce8:	21 f0       	breq	.+8      	; 0xcf2 <__floatsisf+0x54>
 cea:	9e e8       	ldi	r25, 0x8E	; 142
 cec:	87 2f       	mov	r24, r23
 cee:	76 2f       	mov	r23, r22
 cf0:	05 c0       	rjmp	.+10     	; 0xcfc <__floatsisf+0x5e>
 cf2:	66 23       	and	r22, r22
 cf4:	71 f0       	breq	.+28     	; 0xd12 <__floatsisf+0x74>
 cf6:	96 e8       	ldi	r25, 0x86	; 134
 cf8:	86 2f       	mov	r24, r22
 cfa:	70 e0       	ldi	r23, 0x00	; 0
 cfc:	60 e0       	ldi	r22, 0x00	; 0
 cfe:	2a f0       	brmi	.+10     	; 0xd0a <__floatsisf+0x6c>
 d00:	9a 95       	dec	r25
 d02:	66 0f       	add	r22, r22
 d04:	77 1f       	adc	r23, r23
 d06:	88 1f       	adc	r24, r24
 d08:	da f7       	brpl	.-10     	; 0xd00 <__floatsisf+0x62>
 d0a:	88 0f       	add	r24, r24
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret

00000d14 <floor>:
 d14:	85 d0       	rcall	.+266    	; 0xe20 <__fp_trunc>
 d16:	80 f0       	brcs	.+32     	; 0xd38 <floor+0x24>
 d18:	9f 37       	cpi	r25, 0x7F	; 127
 d1a:	40 f4       	brcc	.+16     	; 0xd2c <floor+0x18>
 d1c:	91 11       	cpse	r25, r1
 d1e:	0e f0       	brts	.+2      	; 0xd22 <floor+0xe>
 d20:	97 c0       	rjmp	.+302    	; 0xe50 <__fp_szero>
 d22:	60 e0       	ldi	r22, 0x00	; 0
 d24:	70 e0       	ldi	r23, 0x00	; 0
 d26:	80 e8       	ldi	r24, 0x80	; 128
 d28:	9f eb       	ldi	r25, 0xBF	; 191
 d2a:	08 95       	ret
 d2c:	26 f4       	brtc	.+8      	; 0xd36 <floor+0x22>
 d2e:	1b 16       	cp	r1, r27
 d30:	61 1d       	adc	r22, r1
 d32:	71 1d       	adc	r23, r1
 d34:	81 1d       	adc	r24, r1
 d36:	07 c0       	rjmp	.+14     	; 0xd46 <__fp_mintl>
 d38:	21 c0       	rjmp	.+66     	; 0xd7c <__fp_mpack>

00000d3a <__fp_inf>:
 d3a:	97 f9       	bld	r25, 7
 d3c:	9f 67       	ori	r25, 0x7F	; 127
 d3e:	80 e8       	ldi	r24, 0x80	; 128
 d40:	70 e0       	ldi	r23, 0x00	; 0
 d42:	60 e0       	ldi	r22, 0x00	; 0
 d44:	08 95       	ret

00000d46 <__fp_mintl>:
 d46:	88 23       	and	r24, r24
 d48:	71 f4       	brne	.+28     	; 0xd66 <__fp_mintl+0x20>
 d4a:	77 23       	and	r23, r23
 d4c:	21 f0       	breq	.+8      	; 0xd56 <__fp_mintl+0x10>
 d4e:	98 50       	subi	r25, 0x08	; 8
 d50:	87 2b       	or	r24, r23
 d52:	76 2f       	mov	r23, r22
 d54:	07 c0       	rjmp	.+14     	; 0xd64 <__fp_mintl+0x1e>
 d56:	66 23       	and	r22, r22
 d58:	11 f4       	brne	.+4      	; 0xd5e <__fp_mintl+0x18>
 d5a:	99 27       	eor	r25, r25
 d5c:	0d c0       	rjmp	.+26     	; 0xd78 <__fp_mintl+0x32>
 d5e:	90 51       	subi	r25, 0x10	; 16
 d60:	86 2b       	or	r24, r22
 d62:	70 e0       	ldi	r23, 0x00	; 0
 d64:	60 e0       	ldi	r22, 0x00	; 0
 d66:	2a f0       	brmi	.+10     	; 0xd72 <__fp_mintl+0x2c>
 d68:	9a 95       	dec	r25
 d6a:	66 0f       	add	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	da f7       	brpl	.-10     	; 0xd68 <__fp_mintl+0x22>
 d72:	88 0f       	add	r24, r24
 d74:	96 95       	lsr	r25
 d76:	87 95       	ror	r24
 d78:	97 f9       	bld	r25, 7
 d7a:	08 95       	ret

00000d7c <__fp_mpack>:
 d7c:	9f 3f       	cpi	r25, 0xFF	; 255
 d7e:	31 f0       	breq	.+12     	; 0xd8c <__fp_mpack_finite+0xc>

00000d80 <__fp_mpack_finite>:
 d80:	91 50       	subi	r25, 0x01	; 1
 d82:	20 f4       	brcc	.+8      	; 0xd8c <__fp_mpack_finite+0xc>
 d84:	87 95       	ror	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	b7 95       	ror	r27
 d8c:	88 0f       	add	r24, r24
 d8e:	91 1d       	adc	r25, r1
 d90:	96 95       	lsr	r25
 d92:	87 95       	ror	r24
 d94:	97 f9       	bld	r25, 7
 d96:	08 95       	ret

00000d98 <__fp_nan>:
 d98:	9f ef       	ldi	r25, 0xFF	; 255
 d9a:	80 ec       	ldi	r24, 0xC0	; 192
 d9c:	08 95       	ret

00000d9e <__fp_pscA>:
 d9e:	00 24       	eor	r0, r0
 da0:	0a 94       	dec	r0
 da2:	16 16       	cp	r1, r22
 da4:	17 06       	cpc	r1, r23
 da6:	18 06       	cpc	r1, r24
 da8:	09 06       	cpc	r0, r25
 daa:	08 95       	ret

00000dac <__fp_pscB>:
 dac:	00 24       	eor	r0, r0
 dae:	0a 94       	dec	r0
 db0:	12 16       	cp	r1, r18
 db2:	13 06       	cpc	r1, r19
 db4:	14 06       	cpc	r1, r20
 db6:	05 06       	cpc	r0, r21
 db8:	08 95       	ret

00000dba <__fp_round>:
 dba:	09 2e       	mov	r0, r25
 dbc:	03 94       	inc	r0
 dbe:	00 0c       	add	r0, r0
 dc0:	11 f4       	brne	.+4      	; 0xdc6 <__fp_round+0xc>
 dc2:	88 23       	and	r24, r24
 dc4:	52 f0       	brmi	.+20     	; 0xdda <__fp_round+0x20>
 dc6:	bb 0f       	add	r27, r27
 dc8:	40 f4       	brcc	.+16     	; 0xdda <__fp_round+0x20>
 dca:	bf 2b       	or	r27, r31
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_round+0x18>
 dce:	60 ff       	sbrs	r22, 0
 dd0:	04 c0       	rjmp	.+8      	; 0xdda <__fp_round+0x20>
 dd2:	6f 5f       	subi	r22, 0xFF	; 255
 dd4:	7f 4f       	sbci	r23, 0xFF	; 255
 dd6:	8f 4f       	sbci	r24, 0xFF	; 255
 dd8:	9f 4f       	sbci	r25, 0xFF	; 255
 dda:	08 95       	ret

00000ddc <__fp_split3>:
 ddc:	57 fd       	sbrc	r21, 7
 dde:	90 58       	subi	r25, 0x80	; 128
 de0:	44 0f       	add	r20, r20
 de2:	55 1f       	adc	r21, r21
 de4:	59 f0       	breq	.+22     	; 0xdfc <__fp_splitA+0x10>
 de6:	5f 3f       	cpi	r21, 0xFF	; 255
 de8:	71 f0       	breq	.+28     	; 0xe06 <__fp_splitA+0x1a>
 dea:	47 95       	ror	r20

00000dec <__fp_splitA>:
 dec:	88 0f       	add	r24, r24
 dee:	97 fb       	bst	r25, 7
 df0:	99 1f       	adc	r25, r25
 df2:	61 f0       	breq	.+24     	; 0xe0c <__fp_splitA+0x20>
 df4:	9f 3f       	cpi	r25, 0xFF	; 255
 df6:	79 f0       	breq	.+30     	; 0xe16 <__fp_splitA+0x2a>
 df8:	87 95       	ror	r24
 dfa:	08 95       	ret
 dfc:	12 16       	cp	r1, r18
 dfe:	13 06       	cpc	r1, r19
 e00:	14 06       	cpc	r1, r20
 e02:	55 1f       	adc	r21, r21
 e04:	f2 cf       	rjmp	.-28     	; 0xdea <__fp_split3+0xe>
 e06:	46 95       	lsr	r20
 e08:	f1 df       	rcall	.-30     	; 0xdec <__fp_splitA>
 e0a:	08 c0       	rjmp	.+16     	; 0xe1c <__fp_splitA+0x30>
 e0c:	16 16       	cp	r1, r22
 e0e:	17 06       	cpc	r1, r23
 e10:	18 06       	cpc	r1, r24
 e12:	99 1f       	adc	r25, r25
 e14:	f1 cf       	rjmp	.-30     	; 0xdf8 <__fp_splitA+0xc>
 e16:	86 95       	lsr	r24
 e18:	71 05       	cpc	r23, r1
 e1a:	61 05       	cpc	r22, r1
 e1c:	08 94       	sec
 e1e:	08 95       	ret

00000e20 <__fp_trunc>:
 e20:	e5 df       	rcall	.-54     	; 0xdec <__fp_splitA>
 e22:	a0 f0       	brcs	.+40     	; 0xe4c <__fp_trunc+0x2c>
 e24:	be e7       	ldi	r27, 0x7E	; 126
 e26:	b9 17       	cp	r27, r25
 e28:	88 f4       	brcc	.+34     	; 0xe4c <__fp_trunc+0x2c>
 e2a:	bb 27       	eor	r27, r27
 e2c:	9f 38       	cpi	r25, 0x8F	; 143
 e2e:	60 f4       	brcc	.+24     	; 0xe48 <__fp_trunc+0x28>
 e30:	16 16       	cp	r1, r22
 e32:	b1 1d       	adc	r27, r1
 e34:	67 2f       	mov	r22, r23
 e36:	78 2f       	mov	r23, r24
 e38:	88 27       	eor	r24, r24
 e3a:	98 5f       	subi	r25, 0xF8	; 248
 e3c:	f7 cf       	rjmp	.-18     	; 0xe2c <__fp_trunc+0xc>
 e3e:	86 95       	lsr	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	b1 1d       	adc	r27, r1
 e46:	93 95       	inc	r25
 e48:	96 39       	cpi	r25, 0x96	; 150
 e4a:	c8 f3       	brcs	.-14     	; 0xe3e <__fp_trunc+0x1e>
 e4c:	08 95       	ret

00000e4e <__fp_zero>:
 e4e:	e8 94       	clt

00000e50 <__fp_szero>:
 e50:	bb 27       	eor	r27, r27
 e52:	66 27       	eor	r22, r22
 e54:	77 27       	eor	r23, r23
 e56:	cb 01       	movw	r24, r22
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <__mulsf3>:
 e5c:	0b d0       	rcall	.+22     	; 0xe74 <__mulsf3x>
 e5e:	ad cf       	rjmp	.-166    	; 0xdba <__fp_round>
 e60:	9e df       	rcall	.-196    	; 0xd9e <__fp_pscA>
 e62:	28 f0       	brcs	.+10     	; 0xe6e <__mulsf3+0x12>
 e64:	a3 df       	rcall	.-186    	; 0xdac <__fp_pscB>
 e66:	18 f0       	brcs	.+6      	; 0xe6e <__mulsf3+0x12>
 e68:	95 23       	and	r25, r21
 e6a:	09 f0       	breq	.+2      	; 0xe6e <__mulsf3+0x12>
 e6c:	66 cf       	rjmp	.-308    	; 0xd3a <__fp_inf>
 e6e:	94 cf       	rjmp	.-216    	; 0xd98 <__fp_nan>
 e70:	11 24       	eor	r1, r1
 e72:	ee cf       	rjmp	.-36     	; 0xe50 <__fp_szero>

00000e74 <__mulsf3x>:
 e74:	b3 df       	rcall	.-154    	; 0xddc <__fp_split3>
 e76:	a0 f3       	brcs	.-24     	; 0xe60 <__mulsf3+0x4>

00000e78 <__mulsf3_pse>:
 e78:	95 9f       	mul	r25, r21
 e7a:	d1 f3       	breq	.-12     	; 0xe70 <__mulsf3+0x14>
 e7c:	95 0f       	add	r25, r21
 e7e:	50 e0       	ldi	r21, 0x00	; 0
 e80:	55 1f       	adc	r21, r21
 e82:	62 9f       	mul	r22, r18
 e84:	f0 01       	movw	r30, r0
 e86:	72 9f       	mul	r23, r18
 e88:	bb 27       	eor	r27, r27
 e8a:	f0 0d       	add	r31, r0
 e8c:	b1 1d       	adc	r27, r1
 e8e:	63 9f       	mul	r22, r19
 e90:	aa 27       	eor	r26, r26
 e92:	f0 0d       	add	r31, r0
 e94:	b1 1d       	adc	r27, r1
 e96:	aa 1f       	adc	r26, r26
 e98:	64 9f       	mul	r22, r20
 e9a:	66 27       	eor	r22, r22
 e9c:	b0 0d       	add	r27, r0
 e9e:	a1 1d       	adc	r26, r1
 ea0:	66 1f       	adc	r22, r22
 ea2:	82 9f       	mul	r24, r18
 ea4:	22 27       	eor	r18, r18
 ea6:	b0 0d       	add	r27, r0
 ea8:	a1 1d       	adc	r26, r1
 eaa:	62 1f       	adc	r22, r18
 eac:	73 9f       	mul	r23, r19
 eae:	b0 0d       	add	r27, r0
 eb0:	a1 1d       	adc	r26, r1
 eb2:	62 1f       	adc	r22, r18
 eb4:	83 9f       	mul	r24, r19
 eb6:	a0 0d       	add	r26, r0
 eb8:	61 1d       	adc	r22, r1
 eba:	22 1f       	adc	r18, r18
 ebc:	74 9f       	mul	r23, r20
 ebe:	33 27       	eor	r19, r19
 ec0:	a0 0d       	add	r26, r0
 ec2:	61 1d       	adc	r22, r1
 ec4:	23 1f       	adc	r18, r19
 ec6:	84 9f       	mul	r24, r20
 ec8:	60 0d       	add	r22, r0
 eca:	21 1d       	adc	r18, r1
 ecc:	82 2f       	mov	r24, r18
 ece:	76 2f       	mov	r23, r22
 ed0:	6a 2f       	mov	r22, r26
 ed2:	11 24       	eor	r1, r1
 ed4:	9f 57       	subi	r25, 0x7F	; 127
 ed6:	50 40       	sbci	r21, 0x00	; 0
 ed8:	8a f0       	brmi	.+34     	; 0xefc <__mulsf3_pse+0x84>
 eda:	e1 f0       	breq	.+56     	; 0xf14 <__mulsf3_pse+0x9c>
 edc:	88 23       	and	r24, r24
 ede:	4a f0       	brmi	.+18     	; 0xef2 <__mulsf3_pse+0x7a>
 ee0:	ee 0f       	add	r30, r30
 ee2:	ff 1f       	adc	r31, r31
 ee4:	bb 1f       	adc	r27, r27
 ee6:	66 1f       	adc	r22, r22
 ee8:	77 1f       	adc	r23, r23
 eea:	88 1f       	adc	r24, r24
 eec:	91 50       	subi	r25, 0x01	; 1
 eee:	50 40       	sbci	r21, 0x00	; 0
 ef0:	a9 f7       	brne	.-22     	; 0xedc <__mulsf3_pse+0x64>
 ef2:	9e 3f       	cpi	r25, 0xFE	; 254
 ef4:	51 05       	cpc	r21, r1
 ef6:	70 f0       	brcs	.+28     	; 0xf14 <__mulsf3_pse+0x9c>
 ef8:	20 cf       	rjmp	.-448    	; 0xd3a <__fp_inf>
 efa:	aa cf       	rjmp	.-172    	; 0xe50 <__fp_szero>
 efc:	5f 3f       	cpi	r21, 0xFF	; 255
 efe:	ec f3       	brlt	.-6      	; 0xefa <__mulsf3_pse+0x82>
 f00:	98 3e       	cpi	r25, 0xE8	; 232
 f02:	dc f3       	brlt	.-10     	; 0xefa <__mulsf3_pse+0x82>
 f04:	86 95       	lsr	r24
 f06:	77 95       	ror	r23
 f08:	67 95       	ror	r22
 f0a:	b7 95       	ror	r27
 f0c:	f7 95       	ror	r31
 f0e:	e7 95       	ror	r30
 f10:	9f 5f       	subi	r25, 0xFF	; 255
 f12:	c1 f7       	brne	.-16     	; 0xf04 <__mulsf3_pse+0x8c>
 f14:	fe 2b       	or	r31, r30
 f16:	88 0f       	add	r24, r24
 f18:	91 1d       	adc	r25, r1
 f1a:	96 95       	lsr	r25
 f1c:	87 95       	ror	r24
 f1e:	97 f9       	bld	r25, 7
 f20:	08 95       	ret

00000f22 <__udivmodhi4>:
 f22:	aa 1b       	sub	r26, r26
 f24:	bb 1b       	sub	r27, r27
 f26:	51 e1       	ldi	r21, 0x11	; 17
 f28:	07 c0       	rjmp	.+14     	; 0xf38 <__udivmodhi4_ep>

00000f2a <__udivmodhi4_loop>:
 f2a:	aa 1f       	adc	r26, r26
 f2c:	bb 1f       	adc	r27, r27
 f2e:	a6 17       	cp	r26, r22
 f30:	b7 07       	cpc	r27, r23
 f32:	10 f0       	brcs	.+4      	; 0xf38 <__udivmodhi4_ep>
 f34:	a6 1b       	sub	r26, r22
 f36:	b7 0b       	sbc	r27, r23

00000f38 <__udivmodhi4_ep>:
 f38:	88 1f       	adc	r24, r24
 f3a:	99 1f       	adc	r25, r25
 f3c:	5a 95       	dec	r21
 f3e:	a9 f7       	brne	.-22     	; 0xf2a <__udivmodhi4_loop>
 f40:	80 95       	com	r24
 f42:	90 95       	com	r25
 f44:	bc 01       	movw	r22, r24
 f46:	cd 01       	movw	r24, r26
 f48:	08 95       	ret

00000f4a <__divmodhi4>:
 f4a:	97 fb       	bst	r25, 7
 f4c:	09 2e       	mov	r0, r25
 f4e:	07 26       	eor	r0, r23
 f50:	0a d0       	rcall	.+20     	; 0xf66 <__divmodhi4_neg1>
 f52:	77 fd       	sbrc	r23, 7
 f54:	04 d0       	rcall	.+8      	; 0xf5e <__divmodhi4_neg2>
 f56:	e5 df       	rcall	.-54     	; 0xf22 <__udivmodhi4>
 f58:	06 d0       	rcall	.+12     	; 0xf66 <__divmodhi4_neg1>
 f5a:	00 20       	and	r0, r0
 f5c:	1a f4       	brpl	.+6      	; 0xf64 <__divmodhi4_exit>

00000f5e <__divmodhi4_neg2>:
 f5e:	70 95       	com	r23
 f60:	61 95       	neg	r22
 f62:	7f 4f       	sbci	r23, 0xFF	; 255

00000f64 <__divmodhi4_exit>:
 f64:	08 95       	ret

00000f66 <__divmodhi4_neg1>:
 f66:	f6 f7       	brtc	.-4      	; 0xf64 <__divmodhi4_exit>
 f68:	90 95       	com	r25
 f6a:	81 95       	neg	r24
 f6c:	9f 4f       	sbci	r25, 0xFF	; 255
 f6e:	08 95       	ret

00000f70 <_exit>:
 f70:	f8 94       	cli

00000f72 <__stop_program>:
 f72:	ff cf       	rjmp	.-2      	; 0xf72 <__stop_program>
>>>>>>> origin/Roy
