
testsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f0a  00000f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  00800108  00800108  00000fa6  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007cf  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f66  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e9  00000000  00000000  00004d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ba  00000000  00000000  00005157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00005814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a9  00000000  00000000  00005bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bf  00000000  00000000  00006175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 04 	call	0x974	; 0x974 <main>
  9e:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	db 01       	movw	r26, r22
  b2:	8a 01       	movw	r16, r20
  b4:	80 91 0d 01 	lds	r24, 0x010D
  b8:	90 91 0e 01 	lds	r25, 0x010E
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e4 e1       	ldi	r30, 0x14	; 20
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	2f 31       	cpi	r18, 0x1F	; 31
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	8e 31       	cpi	r24, 0x1E	; 30
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	e3 5f       	subi	r30, 0xF3	; 243
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	d1 83       	std	Z+1, r29	; 0x01
 10c:	c0 83       	st	Z, r28
 10e:	b3 83       	std	Z+3, r27	; 0x03
 110:	a2 83       	std	Z+2, r26	; 0x02
 112:	15 83       	std	Z+5, r17	; 0x05
 114:	04 83       	std	Z+4, r16	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	e3 5f       	subi	r30, 0xF3	; 243
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c3 e1       	ldi	r28, 0x13	; 19
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	1e 31       	cpi	r17, 0x1E	; 30
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	ce 31       	cpi	r28, 0x1E	; 30
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	ed e0       	ldi	r30, 0x0D	; 13
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	2f ed       	ldi	r18, 0xDF	; 223
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	91 f0       	breq	.+36     	; 0x242 <__vector_11+0x56>
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	59 f4       	brne	.+22     	; 0x23c <__vector_11+0x50>
 226:	8c 91       	ld	r24, X
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	8c 93       	st	X, r24
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f0       	breq	.+14     	; 0x242 <__vector_11+0x56>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	93 83       	std	Z+3, r25	; 0x03
 238:	82 83       	std	Z+2, r24	; 0x02
 23a:	03 c0       	rjmp	.+6      	; 0x242 <__vector_11+0x56>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	93 83       	std	Z+3, r25	; 0x03
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	37 96       	adiw	r30, 0x07	; 7
 244:	17 96       	adiw	r26, 0x07	; 7
 246:	e2 17       	cp	r30, r18
 248:	f3 07       	cpc	r31, r19
 24a:	29 f7       	brne	.-54     	; 0x216 <__vector_11+0x2a>
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <turnOnYELLOW>:
void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
}

void turnOnYELLOW(){
	PORTB |= _BV(PORTB3);
 26a:	2b 9a       	sbi	0x05, 3	; 5
}
 26c:	08 95       	ret

0000026e <turnOffYELLOW>:

void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
 26e:	2b 98       	cbi	0x05, 3	; 5
}
 270:	08 95       	ret

00000272 <lowerScreen>:

//********FUNCTIONS TO CONTROL THE SCREEN*************

//Actually physically lowers the screen
void lowerScreen(){
	distance -= SCROLLSPEED;
 272:	80 91 08 02 	lds	r24, 0x0208
 276:	85 50       	subi	r24, 0x05	; 5
 278:	80 93 08 02 	sts	0x0208, r24
}
 27c:	08 95       	ret

0000027e <upScreen>:

//Actually physically rises the screen
void upScreen(){
	distance += SCROLLSPEED;
 27e:	80 91 08 02 	lds	r24, 0x0208
 282:	8b 5f       	subi	r24, 0xFB	; 251
 284:	80 93 08 02 	sts	0x0208, r24
}
 288:	08 95       	ret

0000028a <resetAverageTemperature>:
	send_temperature(averageTemperature);
}

//reset average temperature back to 0 so next measurement can begin
void resetAverageTemperature(){
	averageTemperature = 0; //reset average temperature.
 28a:	10 92 0c 01 	sts	0x010C, r1
 28e:	10 92 0b 01 	sts	0x010B, r1
}
 292:	08 95       	ret

00000294 <resetAverageLight>:

	averageLight += (uint8_t)light;
}

void resetAverageLight(){
	averageLight = 0; //reset average temperature.
 294:	10 92 0a 01 	sts	0x010A, r1
 298:	10 92 09 01 	sts	0x0109, r1
}
 29c:	08 95       	ret

0000029e <setupLeds>:
unsigned char upscreen;


//**********FUNCTIONS TO CONTROL LEDS*****************
void setupLeds(){
	DDRB |= _BV(DDB5); //red led pin 5
 29e:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB3); //yellow led pin 3
 2a0:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= _BV(DDB1); //green led pin 1
 2a2:	21 9a       	sbi	0x04, 1	; 4
}
 2a4:	08 95       	ret

000002a6 <turnOnRED>:

void turnOnRED(){
	 PORTB |= _BV(PORTB5);
 2a6:	2d 9a       	sbi	0x05, 5	; 5
}
 2a8:	08 95       	ret

000002aa <turnOffRED>:

void turnOffRED(){
	PORTB &= ~_BV(PORTB5);
 2aa:	2d 98       	cbi	0x05, 5	; 5
}
 2ac:	08 95       	ret

000002ae <turnOnGREEN>:
void turnOffYELLOW(){
	PORTB &= ~_BV(PORTB3);
}

void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
 2ae:	29 9a       	sbi	0x05, 1	; 5
}
 2b0:	08 95       	ret

000002b2 <setStartingPosition>:
	}
}

//Sets starting position of the screen and turns on the corresponding led
void setStartingPosition(){
	if(screen == UP){
 2b2:	80 91 01 01 	lds	r24, 0x0101
 2b6:	88 23       	and	r24, r24
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <setStartingPosition+0x16>
		distance = MAX_DISTANCE;
 2ba:	80 91 02 01 	lds	r24, 0x0102
 2be:	80 93 08 02 	sts	0x0208, r24
		turnOnGREEN();
 2c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOnGREEN>
 2c6:	08 95       	ret
	} else {
		distance = MIN_DISTANCE;
 2c8:	80 91 03 01 	lds	r24, 0x0103
 2cc:	80 93 08 02 	sts	0x0208, r24
		turnOnRED();
 2d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOnRED>
 2d4:	08 95       	ret

000002d6 <turnOffGREEN>:
void turnOnGREEN(){
	PORTB |= _BV(PORTB1);
}

void turnOffGREEN(){
	PORTB &= ~_BV(PORTB1);
 2d6:	29 98       	cbi	0x05, 1	; 5
}
 2d8:	08 95       	ret

000002da <turnOffAll>:

void turnOffAll(){
	turnOffYELLOW();
 2da:	0e 94 37 01 	call	0x26e	; 0x26e <turnOffYELLOW>
	turnOffRED();
 2de:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnOffRED>
	turnOffGREEN();
 2e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <turnOffGREEN>
}
 2e6:	08 95       	ret

000002e8 <uart_init>:

//Initialize UART.
void uart_init()
{
	 // set the baud rate
	 UBRR0H = 0;
 2e8:	10 92 c5 00 	sts	0x00C5, r1
	 UBRR0L = UBBRVAL;
 2ec:	83 e3       	ldi	r24, 0x33	; 51
 2ee:	80 93 c4 00 	sts	0x00C4, r24
	 // disable U2X mode
	 UCSR0A = 0;
 2f2:	10 92 c0 00 	sts	0x00C0, r1
	 // enable transmitter and receiver
	 UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 2f6:	88 e1       	ldi	r24, 0x18	; 24
 2f8:	80 93 c1 00 	sts	0x00C1, r24
	 // set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	 UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	80 93 c2 00 	sts	0x00C2, r24
}
 302:	08 95       	ret

00000304 <transmit>:
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
 304:	e0 ec       	ldi	r30, 0xC0	; 192
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	90 81       	ld	r25, Z
 30a:	95 ff       	sbrs	r25, 5
 30c:	fd cf       	rjmp	.-6      	; 0x308 <transmit+0x4>
	UDR0 = data;
 30e:	80 93 c6 00 	sts	0x00C6, r24
}
 312:	08 95       	ret

00000314 <transmit_string>:

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	while (*c != -1) {
 31a:	88 81       	ld	r24, Y
 31c:	99 81       	ldd	r25, Y+1	; 0x01
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	8f 3f       	cpi	r24, 0xFF	; 255
 322:	92 07       	cpc	r25, r18
 324:	49 f0       	breq	.+18     	; 0x338 <transmit_string+0x24>
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
 326:	22 96       	adiw	r28, 0x02	; 2
	while (*c != -1) {
		transmit(*c);
 328:	0e 94 82 01 	call	0x304	; 0x304 <transmit>
	UDR0 = data;
}

// Sends a string of chars (bytes) over UART
void transmit_string(int *c) {
	while (*c != -1) {
 32c:	89 91       	ld	r24, Y+
 32e:	99 91       	ld	r25, Y+
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	8f 3f       	cpi	r24, 0xFF	; 255
 334:	92 07       	cpc	r25, r18
 336:	c1 f7       	brne	.-16     	; 0x328 <transmit_string+0x14>
		transmit(*c);
		c++;
	}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <receive>:

// Receives a byte from UART
uint8_t receive(uint8_t response) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 33e:	e0 ec       	ldi	r30, 0xC0	; 192
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	90 81       	ld	r25, Z
 344:	99 23       	and	r25, r25
 346:	ec f7       	brge	.-6      	; 0x342 <receive+0x4>
	return response;
}
 348:	08 95       	ret

0000034a <receive_non_blocking>:

// Returns what's received, if nothing is received, return -1
// This is non-blocking
int receive_non_blocking() {
	if (UCSR0A & (1<<RXC0)) { // is the received data bit set in the UCSR0A register?
 34a:	80 91 c0 00 	lds	r24, 0x00C0
 34e:	88 23       	and	r24, r24
 350:	24 f4       	brge	.+8      	; 0x35a <receive_non_blocking+0x10>
	return (int) UDR0;
 352:	80 91 c6 00 	lds	r24, 0x00C6
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
}
return -1;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	9f ef       	ldi	r25, 0xFF	; 255
}
 35e:	08 95       	ret

00000360 <send_light>:

// Sends the light value via UART
void send_light(int light) {
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	28 97       	sbiw	r28, 0x08	; 8
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	8c 01       	movw	r16, r24
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
 37a:	99 23       	and	r25, r25
 37c:	cc f0       	brlt	.+50     	; 0x3b0 <send_light+0x50>
		// if light value > max value able to send
		val1 = 127;
		val2 = 255;
	}
	else {
		val1 = (uint8_t)floor(light / 256);
 37e:	bc 01       	movw	r22, r24
 380:	99 23       	and	r25, r25
 382:	14 f4       	brge	.+4      	; 0x388 <send_light+0x28>
 384:	61 50       	subi	r22, 0x01	; 1
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	67 2f       	mov	r22, r23
 38a:	77 0f       	add	r23, r23
 38c:	77 0b       	sbc	r23, r23
 38e:	88 27       	eor	r24, r24
 390:	77 fd       	sbrc	r23, 7
 392:	80 95       	com	r24
 394:	98 2f       	mov	r25, r24
 396:	0e 94 1a 06 	call	0xc34	; 0xc34 <__floatsisf>
 39a:	0e 94 55 06 	call	0xcaa	; 0xcaa <floor>
 39e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 3a2:	46 2f       	mov	r20, r22
		val2 = (uint8_t)(light % 256);
 3a4:	c8 01       	movw	r24, r16
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	0e 94 70 07 	call	0xee0	; 0xee0 <__divmodhi4>
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <send_light+0x54>
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
		val2 = 0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
void send_light(int light) {
	uint8_t val1;
	uint8_t val2;
	
	if (light < 0) {
		val1 = 0;
 3b2:	40 e0       	ldi	r20, 0x00	; 0
		val1 = (uint8_t)floor(light / 256);
		val2 = (uint8_t)(light % 256);
	}

	int buffer[4];
	buffer[0] = 1;
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	3a 83       	std	Y+2, r19	; 0x02
 3ba:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val1;
 3bc:	4b 83       	std	Y+3, r20	; 0x03
 3be:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = val2;
 3c0:	8d 83       	std	Y+5, r24	; 0x05
 3c2:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	98 87       	std	Y+8, r25	; 0x08
 3ca:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 8a 01 	call	0x314	; 0x314 <transmit_string>
}
 3d4:	28 96       	adiw	r28, 0x08	; 8
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <calculateAverageLight>:
}

//This function is used to calculate the average temperature.
void calculateAverageLight()
{
	averageLight /= 5; //calculate average from 10 measured values
 3ea:	80 91 09 01 	lds	r24, 0x0109
 3ee:	90 91 0a 01 	lds	r25, 0x010A
 3f2:	65 e0       	ldi	r22, 0x05	; 5
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 3fa:	86 2f       	mov	r24, r22
 3fc:	60 93 09 01 	sts	0x0109, r22
 400:	70 93 0a 01 	sts	0x010A, r23
	//transmit(averageLight); //Send average to screen.
	send_light((uint8_t)averageLight);
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 b0 01 	call	0x360	; 0x360 <send_light>
}
 40a:	08 95       	ret

0000040c <send_temperature>:
	buffer[3] = -1;
	transmit_string(buffer);
}

// Sends the temperature via UART
void send_temperature(int temp) {
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <send_temperature+0x6>
 412:	00 d0       	rcall	.+0      	; 0x414 <send_temperature+0x8>
 414:	00 d0       	rcall	.+0      	; 0x416 <send_temperature+0xa>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	temp += 128;
 41a:	80 58       	subi	r24, 0x80	; 128
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
	uint8_t val;
	
	if (temp < 0) {
 41e:	2a f0       	brmi	.+10     	; 0x42a <send_temperature+0x1e>
		val = 0;
	}
	else if (temp > 255) {
 420:	8f 3f       	cpi	r24, 0xFF	; 255
 422:	91 05       	cpc	r25, r1
 424:	29 f0       	breq	.+10     	; 0x430 <send_temperature+0x24>
 426:	24 f0       	brlt	.+8      	; 0x430 <send_temperature+0x24>
 428:	02 c0       	rjmp	.+4      	; 0x42e <send_temperature+0x22>
void send_temperature(int temp) {
	temp += 128;
	uint8_t val;
	
	if (temp < 0) {
		val = 0;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	01 c0       	rjmp	.+2      	; 0x430 <send_temperature+0x24>
	}
	else if (temp > 255) {
		val = 255;
 42e:	8f ef       	ldi	r24, 0xFF	; 255
	else {
		val = (uint8_t)temp;
	}
	
	int buffer[3];
	buffer[0] = 2;
 430:	22 e0       	ldi	r18, 0x02	; 2
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	3a 83       	std	Y+2, r19	; 0x02
 436:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = val;
 438:	8b 83       	std	Y+3, r24	; 0x03
 43a:	1c 82       	std	Y+4, r1	; 0x04
	buffer[2] = -1;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	9e 83       	std	Y+6, r25	; 0x06
 442:	8d 83       	std	Y+5, r24	; 0x05
	transmit_string(buffer);
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 8a 01 	call	0x314	; 0x314 <transmit_string>
}
 44c:	26 96       	adiw	r28, 0x06	; 6
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <calculateAverageTemperature>:
}

//This function is used to calculate the average temperature.
void calculateAverageTemperature()
{
	averageTemperature /= 5; //calculate average from 6 measured values with intervals of 10 seconds.
 45e:	80 91 0b 01 	lds	r24, 0x010B
 462:	90 91 0c 01 	lds	r25, 0x010C
 466:	65 e0       	ldi	r22, 0x05	; 5
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 46e:	86 2f       	mov	r24, r22
 470:	97 2f       	mov	r25, r23
 472:	60 93 0b 01 	sts	0x010B, r22
 476:	70 93 0c 01 	sts	0x010C, r23
	//transmit(averageTemperature); //Send average temperature to screen.
	send_temperature(averageTemperature);
 47a:	0e 94 06 02 	call	0x40c	; 0x40c <send_temperature>
}
 47e:	08 95       	ret

00000480 <send_blinds_status>:
	transmit_string(buffer);
}

// Sends whether the blinds are open or closed
// 0 = closed, 1 = moving, 2 = open
void send_blinds_status(uint8_t status) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	28 97       	sbiw	r28, 0x08	; 8
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
	if (status > 2) {
		status = 2;
	}
	int buffer[4];
	buffer[0] = 3;
 494:	23 e0       	ldi	r18, 0x03	; 3
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	3a 83       	std	Y+2, r19	; 0x02
 49a:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = 0;
 49c:	1c 82       	std	Y+4, r1	; 0x04
 49e:	1b 82       	std	Y+3, r1	; 0x03
	buffer[2] = status;
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <send_blinds_status+0x26>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	8d 83       	std	Y+5, r24	; 0x05
 4a8:	1e 82       	std	Y+6, r1	; 0x06
	buffer[3] = -1;
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	9f ef       	ldi	r25, 0xFF	; 255
 4ae:	98 87       	std	Y+8, r25	; 0x08
 4b0:	8f 83       	std	Y+7, r24	; 0x07
	transmit_string(buffer);
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	0e 94 8a 01 	call	0x314	; 0x314 <transmit_string>
}
 4ba:	28 96       	adiw	r28, 0x08	; 8
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <checkDistance>:
		ScrollUp();
	}
}

void checkDistance(){
	if(distance == MIN_DISTANCE && instruction == SCROLLDOWN){ //we finished scrolling down
 4cc:	80 91 08 02 	lds	r24, 0x0208
 4d0:	90 91 03 01 	lds	r25, 0x0103
 4d4:	89 17       	cp	r24, r25
 4d6:	f1 f4       	brne	.+60     	; 0x514 <checkDistance+0x48>
 4d8:	90 91 00 01 	lds	r25, 0x0100
 4dc:	99 23       	and	r25, r25
 4de:	d1 f4       	brne	.+52     	; 0x514 <checkDistance+0x48>
		screen = DOWN;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	80 93 01 01 	sts	0x0101, r24
		instruction = NEUTRAL;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 4ec:	0e 94 6d 01 	call	0x2da	; 0x2da <turnOffAll>
		SCH_Delete_Task(lowerscreen);
 4f0:	80 91 0c 02 	lds	r24, 0x020C
 4f4:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 4f8:	80 91 0a 02 	lds	r24, 0x020A
 4fc:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 500:	80 91 0f 02 	lds	r24, 0x020F
 504:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		turnOnRED();
 508:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOnRED>
		send_blinds_status(0);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 40 02 	call	0x480	; 0x480 <send_blinds_status>
 512:	08 95       	ret
	} else if(distance == MAX_DISTANCE && instruction == SCROLLUP){ //we finished scrolling up
 514:	90 91 02 01 	lds	r25, 0x0102
 518:	89 17       	cp	r24, r25
 51a:	e1 f4       	brne	.+56     	; 0x554 <checkDistance+0x88>
 51c:	80 91 00 01 	lds	r24, 0x0100
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	c1 f4       	brne	.+48     	; 0x554 <checkDistance+0x88>
		screen = UP;
 524:	10 92 01 01 	sts	0x0101, r1
		instruction = NEUTRAL;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 00 01 	sts	0x0100, r24
		turnOffAll();
 52e:	0e 94 6d 01 	call	0x2da	; 0x2da <turnOffAll>
		SCH_Delete_Task(upscreen);
 532:	80 91 09 02 	lds	r24, 0x0209
 536:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowon);
 53a:	80 91 0a 02 	lds	r24, 0x020A
 53e:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		SCH_Delete_Task(yellowoff);
 542:	80 91 0f 02 	lds	r24, 0x020F
 546:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
		turnOnGREEN();
 54a:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOnGREEN>
		send_blinds_status(1);
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 40 02 	call	0x480	; 0x480 <send_blinds_status>
 554:	08 95       	ret

00000556 <ScrollUp>:
}

//Set instruction to SCROLLUP, scroll the screen, and light correct leds
void ScrollUp()
{
	if(screen == DOWN && instruction == NEUTRAL){ // Only scroll up if it is DOWN and hasnt received other instruction before
 556:	80 91 01 01 	lds	r24, 0x0101
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	79 f5       	brne	.+94     	; 0x5bc <ScrollUp+0x66>
 55e:	80 91 00 01 	lds	r24, 0x0100
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	59 f5       	brne	.+86     	; 0x5bc <ScrollUp+0x66>
		instruction = SCROLLUP;
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	80 93 00 01 	sts	0x0100, r24
		screen = SCROLLING;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	80 93 01 01 	sts	0x0101, r24
		send_blinds_status(2);
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 40 02 	call	0x480	; 0x480 <send_blinds_status>
		turnOffAll();
 578:	0e 94 6d 01 	call	0x2da	; 0x2da <turnOffAll>
		upscreen = SCH_Add_Task(upScreen, 0, 50);
 57c:	8f e3       	ldi	r24, 0x3F	; 63
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	42 e3       	ldi	r20, 0x32	; 50
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 58c:	80 93 09 02 	sts	0x0209, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 0, 100);
 590:	85 e3       	ldi	r24, 0x35	; 53
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	44 e6       	ldi	r20, 0x64	; 100
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5a0:	80 93 0a 02 	sts	0x020A, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 50, 100);
 5a4:	87 e3       	ldi	r24, 0x37	; 55
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	62 e3       	ldi	r22, 0x32	; 50
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	44 e6       	ldi	r20, 0x64	; 100
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5b4:	80 93 0f 02 	sts	0x020F, r24
		turnOnGREEN();
 5b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <turnOnGREEN>
 5bc:	08 95       	ret

000005be <ScrollDown>:
}

//Set instruction to SCROLLDOWN, scroll the screen and light correct leds
void ScrollDown()
{
	if(screen == UP && instruction == NEUTRAL){ // Only scroll down if it is UP and hasnt received other instruction before
 5be:	80 91 01 01 	lds	r24, 0x0101
 5c2:	88 23       	and	r24, r24
 5c4:	69 f5       	brne	.+90     	; 0x620 <ScrollDown+0x62>
 5c6:	80 91 00 01 	lds	r24, 0x0100
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	49 f5       	brne	.+82     	; 0x620 <ScrollDown+0x62>
		instruction = SCROLLDOWN;
 5ce:	10 92 00 01 	sts	0x0100, r1
		screen = SCROLLING;
 5d2:	80 93 01 01 	sts	0x0101, r24
		send_blinds_status(2);
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	0e 94 40 02 	call	0x480	; 0x480 <send_blinds_status>
		turnOffAll();
 5dc:	0e 94 6d 01 	call	0x2da	; 0x2da <turnOffAll>
		lowerscreen = SCH_Add_Task(lowerScreen, 0, 50);
 5e0:	89 e3       	ldi	r24, 0x39	; 57
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	42 e3       	ldi	r20, 0x32	; 50
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 5f0:	80 93 0c 02 	sts	0x020C, r24
		yellowon = SCH_Add_Task(turnOnYELLOW, 0, 100);
 5f4:	85 e3       	ldi	r24, 0x35	; 53
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	44 e6       	ldi	r20, 0x64	; 100
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 604:	80 93 0a 02 	sts	0x020A, r24
		yellowoff = SCH_Add_Task(turnOffYELLOW, 50, 100);
 608:	87 e3       	ldi	r24, 0x37	; 55
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	62 e3       	ldi	r22, 0x32	; 50
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	44 e6       	ldi	r20, 0x64	; 100
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
 618:	80 93 0f 02 	sts	0x020F, r24
		turnOnRED();
 61c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <turnOnRED>
 620:	08 95       	ret

00000622 <lightCheck>:
	}
}

//Adjusts the screen based on the measured light value. Either scroll up or down if possible
void lightCheck(){
	if(averageLight >= MAX_LIGHT){
 622:	80 91 09 01 	lds	r24, 0x0109
 626:	90 91 0a 01 	lds	r25, 0x010A
 62a:	20 91 06 01 	lds	r18, 0x0106
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	82 17       	cp	r24, r18
 632:	93 07       	cpc	r25, r19
 634:	18 f0       	brcs	.+6      	; 0x63c <lightCheck+0x1a>
		ScrollDown();
 636:	0e 94 df 02 	call	0x5be	; 0x5be <ScrollDown>
 63a:	08 95       	ret
	} else if (averageLight <= MIN_LIGHT){
 63c:	20 91 07 01 	lds	r18, 0x0107
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	28 17       	cp	r18, r24
 644:	39 07       	cpc	r19, r25
 646:	10 f0       	brcs	.+4      	; 0x64c <lightCheck+0x2a>
		ScrollUp();
 648:	0e 94 ab 02 	call	0x556	; 0x556 <ScrollUp>
 64c:	08 95       	ret

0000064e <temperatureCheck>:


//***********FUNCTIONS TO CHECK VALUES**************
//Adjusts the screen based on the measured temperature value. Either scroll up or down if possible
void temperatureCheck(){
	if(averageTemperature >= MAX_TEMP){
 64e:	80 91 0b 01 	lds	r24, 0x010B
 652:	90 91 0c 01 	lds	r25, 0x010C
 656:	20 91 04 01 	lds	r18, 0x0104
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	82 17       	cp	r24, r18
 65e:	93 07       	cpc	r25, r19
 660:	18 f0       	brcs	.+6      	; 0x668 <temperatureCheck+0x1a>
		ScrollDown();
 662:	0e 94 df 02 	call	0x5be	; 0x5be <ScrollDown>
 666:	08 95       	ret
	} else if (averageTemperature <= MIN_TEMP){
 668:	20 91 05 01 	lds	r18, 0x0105
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	28 17       	cp	r18, r24
 670:	39 07       	cpc	r19, r25
 672:	10 f0       	brcs	.+4      	; 0x678 <temperatureCheck+0x2a>
		ScrollUp();
 674:	0e 94 ab 02 	call	0x556	; 0x556 <ScrollUp>
 678:	08 95       	ret

0000067a <reset_buffer>:
}

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
 67a:	e0 ee       	ldi	r30, 0xE0	; 224
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	20 e3       	ldi	r18, 0x30	; 48
 680:	32 e0       	ldi	r19, 0x02	; 2
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
		receive_buffer[i] = -1;
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	9f ef       	ldi	r25, 0xFF	; 255
 686:	81 93       	st	Z+, r24
 688:	91 93       	st	Z+, r25

// Reset the buffer of incoming messages
int receive_buffer[20];
uint8_t buffer_reset = 0;
void reset_buffer() {
	for(uint8_t i = 0; i < sizeof(receive_buffer); i++) {
 68a:	e2 17       	cp	r30, r18
 68c:	f3 07       	cpc	r31, r19
 68e:	d9 f7       	brne	.-10     	; 0x686 <reset_buffer+0xc>
		receive_buffer[i] = -1;
	}
}
 690:	08 95       	ret

00000692 <add_to_buffer>:

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 692:	20 91 e0 01 	lds	r18, 0x01E0
 696:	30 91 e1 01 	lds	r19, 0x01E1
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	2f 3f       	cpi	r18, 0xFF	; 255
 69e:	39 07       	cpc	r19, r25
 6a0:	91 f0       	breq	.+36     	; 0x6c6 <add_to_buffer+0x34>
	}
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
 6a2:	90 e0       	ldi	r25, 0x00	; 0
	while (receive_buffer[i] != -1) {
 6a4:	40 ee       	ldi	r20, 0xE0	; 224
 6a6:	51 e0       	ldi	r21, 0x01	; 1
		i++;
 6a8:	9f 5f       	subi	r25, 0xFF	; 255
}

// Add a byte to the buffer of incoming messages
void add_to_buffer(uint8_t c) {
	uint8_t i = 0;
	while (receive_buffer[i] != -1) {
 6aa:	29 2f       	mov	r18, r25
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	f9 01       	movw	r30, r18
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	e4 0f       	add	r30, r20
 6b6:	f5 1f       	adc	r31, r21
 6b8:	60 81       	ld	r22, Z
 6ba:	71 81       	ldd	r23, Z+1	; 0x01
 6bc:	ef ef       	ldi	r30, 0xFF	; 255
 6be:	6f 3f       	cpi	r22, 0xFF	; 255
 6c0:	7e 07       	cpc	r23, r30
 6c2:	91 f7       	brne	.-28     	; 0x6a8 <add_to_buffer+0x16>
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <add_to_buffer+0x38>
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
		i++;
	}
	receive_buffer[i] = c;
 6ca:	f9 01       	movw	r30, r18
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	e0 52       	subi	r30, 0x20	; 32
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
 6d4:	80 83       	st	Z, r24
 6d6:	11 82       	std	Z+1, r1	; 0x01
}
 6d8:	08 95       	ret

000006da <receiveMessages>:

//Receive messages
// This should be in the scheduler
// TODO edit this to do the stuff it has to do
void receiveMessages() {
	if (buffer_reset != 123) {
 6da:	80 91 08 01 	lds	r24, 0x0108
 6de:	8b 37       	cpi	r24, 0x7B	; 123
 6e0:	29 f0       	breq	.+10     	; 0x6ec <receiveMessages+0x12>
		reset_buffer();
 6e2:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
		buffer_reset = 123;
 6e6:	8b e7       	ldi	r24, 0x7B	; 123
 6e8:	80 93 08 01 	sts	0x0108, r24
	}
	int b = receive_non_blocking();
 6ec:	0e 94 a5 01 	call	0x34a	; 0x34a <receive_non_blocking>
	while (b != -1) {
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	8f 3f       	cpi	r24, 0xFF	; 255
 6f4:	92 07       	cpc	r25, r18
 6f6:	41 f0       	breq	.+16     	; 0x708 <receiveMessages+0x2e>
		add_to_buffer((uint8_t) b);
 6f8:	0e 94 49 03 	call	0x692	; 0x692 <add_to_buffer>
		b = receive_non_blocking();
 6fc:	0e 94 a5 01 	call	0x34a	; 0x34a <receive_non_blocking>
	if (buffer_reset != 123) {
		reset_buffer();
		buffer_reset = 123;
	}
	int b = receive_non_blocking();
	while (b != -1) {
 700:	2f ef       	ldi	r18, 0xFF	; 255
 702:	8f 3f       	cpi	r24, 0xFF	; 255
 704:	92 07       	cpc	r25, r18
 706:	c1 f7       	brne	.-16     	; 0x6f8 <receiveMessages+0x1e>
		add_to_buffer((uint8_t) b);
		b = receive_non_blocking();
	}
	
	int c = receive_buffer[0];
 708:	80 91 e0 01 	lds	r24, 0x01E0
 70c:	90 91 e1 01 	lds	r25, 0x01E1
	int p1 = receive_buffer[1];
 710:	20 91 e2 01 	lds	r18, 0x01E2
 714:	30 91 e3 01 	lds	r19, 0x01E3
	int p2 = receive_buffer[2];
 718:	40 91 e4 01 	lds	r20, 0x01E4
 71c:	50 91 e5 01 	lds	r21, 0x01E5
	int p3 = receive_buffer[3];
	
	if (c == 10) { // Open blinds
 720:	8a 30       	cpi	r24, 0x0A	; 10
 722:	91 05       	cpc	r25, r1
 724:	81 f4       	brne	.+32     	; 0x746 <receiveMessages+0x6c>
		if (p1 == 1) {
 726:	21 30       	cpi	r18, 0x01	; 1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <receiveMessages+0x5c>
			// OPEN THE BLINDS
			// Do stuff here
			ScrollUp();
 72c:	0e 94 ab 02 	call	0x556	; 0x556 <ScrollUp>
			// End do stuff
			reset_buffer();
 730:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 734:	08 95       	ret
		}
		else if (p1 != -1) {
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	2f 3f       	cpi	r18, 0xFF	; 255
 73a:	38 07       	cpc	r19, r24
 73c:	09 f4       	brne	.+2      	; 0x740 <receiveMessages+0x66>
 73e:	7c c0       	rjmp	.+248    	; 0x838 <receiveMessages+0x15e>
			reset_buffer();
 740:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 744:	08 95       	ret
		}
	}
	else if (c == 11) { // Close blinds
 746:	8b 30       	cpi	r24, 0x0B	; 11
 748:	91 05       	cpc	r25, r1
 74a:	81 f4       	brne	.+32     	; 0x76c <receiveMessages+0x92>
		if (p1 == 1) {
 74c:	21 30       	cpi	r18, 0x01	; 1
 74e:	31 05       	cpc	r19, r1
 750:	29 f4       	brne	.+10     	; 0x75c <receiveMessages+0x82>
			// CLOSE THE BLINDS
			// Do stuff here
			ScrollDown();
 752:	0e 94 df 02 	call	0x5be	; 0x5be <ScrollDown>
			// End do stuff
			reset_buffer();
 756:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 75a:	08 95       	ret
		}
		else if (p1 != -1) {
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	2f 3f       	cpi	r18, 0xFF	; 255
 760:	38 07       	cpc	r19, r24
 762:	09 f4       	brne	.+2      	; 0x766 <receiveMessages+0x8c>
 764:	69 c0       	rjmp	.+210    	; 0x838 <receiveMessages+0x15e>
			reset_buffer();
 766:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 76a:	08 95       	ret
		}
	}
	else if (c == 20) { // Set blinds open distance
 76c:	84 31       	cpi	r24, 0x14	; 20
 76e:	91 05       	cpc	r25, r1
 770:	79 f4       	brne	.+30     	; 0x790 <receiveMessages+0xb6>
		if (p1 != -1 && p2 != -1) {
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	2f 3f       	cpi	r18, 0xFF	; 255
 776:	38 07       	cpc	r19, r24
 778:	09 f4       	brne	.+2      	; 0x77c <receiveMessages+0xa2>
 77a:	5e c0       	rjmp	.+188    	; 0x838 <receiveMessages+0x15e>
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	4f 3f       	cpi	r20, 0xFF	; 255
 780:	52 07       	cpc	r21, r18
 782:	09 f4       	brne	.+2      	; 0x786 <receiveMessages+0xac>
 784:	59 c0       	rjmp	.+178    	; 0x838 <receiveMessages+0x15e>
			int blinds_open_distance = p1 * 256 + p2; // The new blinds open distance
			// Do stuff here
			MAX_DISTANCE = blinds_open_distance;
 786:	40 93 02 01 	sts	0x0102, r20
			// End do stuff
			reset_buffer();
 78a:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 78e:	08 95       	ret
		}
	}
	else if (c == 21) { // Set blinds closed distance
 790:	85 31       	cpi	r24, 0x15	; 21
 792:	91 05       	cpc	r25, r1
 794:	79 f4       	brne	.+30     	; 0x7b4 <receiveMessages+0xda>
		if (p1 != -1 && p2 != -1) {
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	2f 3f       	cpi	r18, 0xFF	; 255
 79a:	38 07       	cpc	r19, r24
 79c:	09 f4       	brne	.+2      	; 0x7a0 <receiveMessages+0xc6>
 79e:	4c c0       	rjmp	.+152    	; 0x838 <receiveMessages+0x15e>
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	4f 3f       	cpi	r20, 0xFF	; 255
 7a4:	52 07       	cpc	r21, r18
 7a6:	09 f4       	brne	.+2      	; 0x7aa <receiveMessages+0xd0>
 7a8:	47 c0       	rjmp	.+142    	; 0x838 <receiveMessages+0x15e>
			int blinds_closed_distance = p1 * 256 + p2; // The new blinds closed distance
			// Do stuff here
			MIN_DISTANCE = blinds_closed_distance;
 7aa:	40 93 03 01 	sts	0x0103, r20
			// End do stuff
			reset_buffer();
 7ae:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 7b2:	08 95       	ret
		}			
	}
	else if (c == 30) { // Set temperature to close
 7b4:	8e 31       	cpi	r24, 0x1E	; 30
 7b6:	91 05       	cpc	r25, r1
 7b8:	59 f4       	brne	.+22     	; 0x7d0 <receiveMessages+0xf6>
		if (p1 != -1) {
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	2f 3f       	cpi	r18, 0xFF	; 255
 7be:	38 07       	cpc	r19, r24
 7c0:	d9 f1       	breq	.+118    	; 0x838 <receiveMessages+0x15e>
			int temperature_to_close = p1 - 128; // The new temperature threshold to close the blinds at
 7c2:	20 58       	subi	r18, 0x80	; 128
 7c4:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MAX_TEMP = temperature_to_close;
 7c6:	20 93 04 01 	sts	0x0104, r18
			// End do stuff
			reset_buffer();
 7ca:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 7ce:	08 95       	ret
		}
	}
	else if (c == 31) { // Set temperature to open
 7d0:	8f 31       	cpi	r24, 0x1F	; 31
 7d2:	91 05       	cpc	r25, r1
 7d4:	59 f4       	brne	.+22     	; 0x7ec <receiveMessages+0x112>
		if (p1 != -1) {
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	2f 3f       	cpi	r18, 0xFF	; 255
 7da:	38 07       	cpc	r19, r24
 7dc:	69 f1       	breq	.+90     	; 0x838 <receiveMessages+0x15e>
			int temperature_to_open = p1 - 128; // The new temperature threshold to open the blinds at
 7de:	20 58       	subi	r18, 0x80	; 128
 7e0:	30 40       	sbci	r19, 0x00	; 0
			// Do stuff here
			MIN_TEMP = temperature_to_open;
 7e2:	20 93 05 01 	sts	0x0105, r18
			// End do stuff
			reset_buffer();
 7e6:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 7ea:	08 95       	ret
		}
	}
	else if (c == 32) { // Set light to close
 7ec:	80 32       	cpi	r24, 0x20	; 32
 7ee:	91 05       	cpc	r25, r1
 7f0:	69 f4       	brne	.+26     	; 0x80c <receiveMessages+0x132>
		if (p1 != -1 && p2 != -1) {
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	2f 3f       	cpi	r18, 0xFF	; 255
 7f6:	38 07       	cpc	r19, r24
 7f8:	f9 f0       	breq	.+62     	; 0x838 <receiveMessages+0x15e>
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	4f 3f       	cpi	r20, 0xFF	; 255
 7fe:	52 07       	cpc	r21, r18
 800:	d9 f0       	breq	.+54     	; 0x838 <receiveMessages+0x15e>
			int light_to_close = p1 * 256 + p2; // The new light threshold to close the blinds at
			// Do stuff here
			MAX_LIGHT = light_to_close;
 802:	40 93 06 01 	sts	0x0106, r20
			// End do stuff
			reset_buffer();
 806:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 80a:	08 95       	ret
		}
	}
	else if (c == 33) { // Set light to open
 80c:	81 32       	cpi	r24, 0x21	; 33
 80e:	91 05       	cpc	r25, r1
 810:	69 f4       	brne	.+26     	; 0x82c <receiveMessages+0x152>
		if (p1 != -1 && p2 != -1) {
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	2f 3f       	cpi	r18, 0xFF	; 255
 816:	38 07       	cpc	r19, r24
 818:	79 f0       	breq	.+30     	; 0x838 <receiveMessages+0x15e>
 81a:	2f ef       	ldi	r18, 0xFF	; 255
 81c:	4f 3f       	cpi	r20, 0xFF	; 255
 81e:	52 07       	cpc	r21, r18
 820:	59 f0       	breq	.+22     	; 0x838 <receiveMessages+0x15e>
			int light_to_open = p1 * 256 + p2; // The new light threshold to open the blinds at
			// Do stuff here
			MIN_LIGHT = light_to_open;
 822:	40 93 07 01 	sts	0x0107, r20
			// End do stuff
			reset_buffer();
 826:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 82a:	08 95       	ret
		}
	}
	else if (c != -1) { // Command is not empty and not recognized, so something went wrong, reset buffer
 82c:	2f ef       	ldi	r18, 0xFF	; 255
 82e:	8f 3f       	cpi	r24, 0xFF	; 255
 830:	92 07       	cpc	r25, r18
 832:	11 f0       	breq	.+4      	; 0x838 <receiveMessages+0x15e>
		reset_buffer();
 834:	0e 94 3d 03 	call	0x67a	; 0x67a <reset_buffer>
 838:	08 95       	ret

0000083a <setChannelZero>:


//***********FUNCTIONS FOR THE ADC****************

void setChannelZero(){
	ADMUX &= ~(1 << MUX0); //Set channel to 0
 83a:	ec e7       	ldi	r30, 0x7C	; 124
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	8e 7f       	andi	r24, 0xFE	; 254
 842:	80 83       	st	Z, r24
}
 844:	08 95       	ret

00000846 <setChannelOne>:

void setChannelOne(){
	ADMUX |= (1 << MUX0); // set channel to 1
 846:	ec e7       	ldi	r30, 0x7C	; 124
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	81 60       	ori	r24, 0x01	; 1
 84e:	80 83       	st	Z, r24
}
 850:	08 95       	ret

00000852 <setupADC>:

//Set up the ADC registers: ADMUX and ADCSRA. We use ADC channel 0.
void setupADC()
{
	//Channel = 0 as of now
	ADMUX |= (1 << REFS0); //set reference voltage
 852:	ec e7       	ldi	r30, 0x7C	; 124
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	80 64       	ori	r24, 0x40	; 64
 85a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //set prescaler
 85c:	ea e7       	ldi	r30, 0x7A	; 122
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	87 60       	ori	r24, 0x07	; 7
 864:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable the ADC
 866:	80 81       	ld	r24, Z
 868:	80 68       	ori	r24, 0x80	; 128
 86a:	80 83       	st	Z, r24
}
 86c:	08 95       	ret

0000086e <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 86e:	ec e7       	ldi	r30, 0x7C	; 124
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	90 81       	ld	r25, Z
	ADCSRA |= (1 << ADEN); //enable the ADC
}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;  // AND operation with 7 to keep channel < 7 always
 874:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 876:	98 7f       	andi	r25, 0xF8	; 248
 878:	98 2b       	or	r25, r24
 87a:	90 83       	st	Z, r25

	// start the conversion
	ADCSRA |= (1<<ADSC);
 87c:	ea e7       	ldi	r30, 0x7A	; 122
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	80 64       	ori	r24, 0x40	; 64
 884:	80 83       	st	Z, r24

	// wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
 886:	80 81       	ld	r24, Z
 888:	86 fd       	sbrc	r24, 6
 88a:	fd cf       	rjmp	.-6      	; 0x886 <adc_read+0x18>

	return (ADC);
 88c:	80 91 78 00 	lds	r24, 0x0078
 890:	90 91 79 00 	lds	r25, 0x0079
}
 894:	08 95       	ret

00000896 <calculateLight>:
}


//**********FUNCTIONS FOR LIGHTSENSOR**************
void calculateLight(){
	setChannelOne();
 896:	0e 94 23 04 	call	0x846	; 0x846 <setChannelOne>
	uint16_t reading = adc_read(1);
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 37 04 	call	0x86e	; 0x86e <adc_read>
	float temp = (reading/4);
 8a0:	bc 01       	movw	r22, r24
 8a2:	76 95       	lsr	r23
 8a4:	67 95       	ror	r22
 8a6:	76 95       	lsr	r23
 8a8:	67 95       	ror	r22
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
	float light = 100 - ((temp/(float)255)*100); //Light is a percentage. 0 = dark. 100 = bright
 8b2:	20 e0       	ldi	r18, 0x00	; 0
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	4f e7       	ldi	r20, 0x7F	; 127
 8b8:	53 e4       	ldi	r21, 0x43	; 67
 8ba:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
 8be:	20 e0       	ldi	r18, 0x00	; 0
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	48 ec       	ldi	r20, 0xC8	; 200
 8c4:	52 e4       	ldi	r21, 0x42	; 66
 8c6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	88 ec       	ldi	r24, 0xC8	; 200
 8d4:	92 e4       	ldi	r25, 0x42	; 66
 8d6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
	//transmit(light);

	averageLight += (uint8_t)light;
 8da:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 8de:	80 91 09 01 	lds	r24, 0x0109
 8e2:	90 91 0a 01 	lds	r25, 0x010A
 8e6:	86 0f       	add	r24, r22
 8e8:	91 1d       	adc	r25, r1
 8ea:	90 93 0a 01 	sts	0x010A, r25
 8ee:	80 93 09 01 	sts	0x0109, r24
}
 8f2:	08 95       	ret

000008f4 <calculateTemperature>:
//**********FUNCTIONS FOR TEMPSENSOR****************

//This function translates the voltage value from the ADC into a temperature.
void calculateTemperature()
{
	setChannelZero(); //Channel 0 is used to measure temperature
 8f4:	0e 94 1d 04 	call	0x83a	; 0x83a <setChannelZero>
	uint16_t reading = adc_read(0); //get the 10 bit return value from the ADC. (0 - 1023)
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0e 94 37 04 	call	0x86e	; 0x86e <adc_read>

	//Formula to calculate the temperature
	float voltage = (float)reading/(float)1024; //ADC return a value between 0 and 1023 which is a ratio to the 5V.
 8fe:	bc 01       	movw	r22, r24
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	40 e8       	ldi	r20, 0x80	; 128
 90e:	5a e3       	ldi	r21, 0x3A	; 58
 910:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
	voltage *= 5; //Multiply by 5V
 914:	46 2f       	mov	r20, r22
 916:	57 2f       	mov	r21, r23
 918:	68 2f       	mov	r22, r24
 91a:	79 2f       	mov	r23, r25
 91c:	cb 01       	movw	r24, r22
 91e:	ba 01       	movw	r22, r20
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	40 ea       	ldi	r20, 0xA0	; 160
 926:	50 e4       	ldi	r21, 0x40	; 64
 928:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
	voltage -= 0.5; //Deduct the offset ( Offset is 0.5 )
 92c:	46 2f       	mov	r20, r22
 92e:	57 2f       	mov	r21, r23
 930:	68 2f       	mov	r22, r24
 932:	79 2f       	mov	r23, r25
 934:	cb 01       	movw	r24, r22
 936:	ba 01       	movw	r22, r20
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	40 e0       	ldi	r20, 0x00	; 0
 93e:	5f e3       	ldi	r21, 0x3F	; 63
 940:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__subsf3>
	float temperature = (float)100*voltage;
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	48 ec       	ldi	r20, 0xC8	; 200
 94a:	52 e4       	ldi	r21, 0x42	; 66
 94c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>

	//transmit(number); //enable to transmit to screen
	averageTemperature += (uint8_t)temperature;
 950:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
 954:	80 91 0b 01 	lds	r24, 0x010B
 958:	90 91 0c 01 	lds	r25, 0x010C
 95c:	86 0f       	add	r24, r22
 95e:	91 1d       	adc	r25, r1
 960:	90 93 0c 01 	sts	0x010C, r25
 964:	80 93 0b 01 	sts	0x010B, r24
}
 968:	08 95       	ret

0000096a <transmitDistance>:
	}
}

//Used for debugging. Sends value of distance to UART.
void transmitDistance(){
	transmit(distance);
 96a:	80 91 08 02 	lds	r24, 0x0208
 96e:	0e 94 82 01 	call	0x304	; 0x304 <transmit>
}
 972:	08 95       	ret

00000974 <main>:

//******MAIN********

int main()
{
	setupADC();
 974:	0e 94 29 04 	call	0x852	; 0x852 <setupADC>
	setupLeds();
 978:	0e 94 4f 01 	call	0x29e	; 0x29e <setupLeds>
	uart_init();
 97c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_init>
	SCH_Init_T1();
 980:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(setStartingPosition, 500, 0); //Set starting pos of screen and light starting led
 984:	89 e5       	ldi	r24, 0x59	; 89
 986:	91 e0       	ldi	r25, 0x01	; 1
 988:	64 ef       	ldi	r22, 0xF4	; 244
 98a:	71 e0       	ldi	r23, 0x01	; 1
 98c:	40 e0       	ldi	r20, 0x00	; 0
 98e:	50 e0       	ldi	r21, 0x00	; 0
 990:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(receiveMessages, 0, 50); // Receive every half second, is more than enough
 994:	8d e6       	ldi	r24, 0x6D	; 109
 996:	93 e0       	ldi	r25, 0x03	; 3
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	42 e3       	ldi	r20, 0x32	; 50
 99e:	50 e0       	ldi	r21, 0x00	; 0
 9a0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(calculateTemperature, 0, 200); //Read temperature every 2 seconds
 9a4:	8a e7       	ldi	r24, 0x7A	; 122
 9a6:	94 e0       	ldi	r25, 0x04	; 4
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	70 e0       	ldi	r23, 0x00	; 0
 9ac:	48 ec       	ldi	r20, 0xC8	; 200
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateLight, 100, 200); //Read light every 2 seconds
 9b4:	8b e4       	ldi	r24, 0x4B	; 75
 9b6:	94 e0       	ldi	r25, 0x04	; 4
 9b8:	64 e6       	ldi	r22, 0x64	; 100
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	48 ec       	ldi	r20, 0xC8	; 200
 9be:	50 e0       	ldi	r21, 0x00	; 0
 9c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(calculateAverageTemperature, 1001, 1000); //Calculate average every 10 seconds. Delay it by 10 seconds to prevent incomplete average measurements.
 9c4:	8f e2       	ldi	r24, 0x2F	; 47
 9c6:	92 e0       	ldi	r25, 0x02	; 2
 9c8:	69 ee       	ldi	r22, 0xE9	; 233
 9ca:	73 e0       	ldi	r23, 0x03	; 3
 9cc:	48 ee       	ldi	r20, 0xE8	; 232
 9ce:	53 e0       	ldi	r21, 0x03	; 3
 9d0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(calculateAverageLight, 1101, 1000); //Calculate average light every 10 seconds.
 9d4:	85 ef       	ldi	r24, 0xF5	; 245
 9d6:	91 e0       	ldi	r25, 0x01	; 1
 9d8:	6d e4       	ldi	r22, 0x4D	; 77
 9da:	74 e0       	ldi	r23, 0x04	; 4
 9dc:	48 ee       	ldi	r20, 0xE8	; 232
 9de:	53 e0       	ldi	r21, 0x03	; 3
 9e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(temperatureCheck, 1002, 1000); //What instruction should we send to screen?
 9e4:	87 e2       	ldi	r24, 0x27	; 39
 9e6:	93 e0       	ldi	r25, 0x03	; 3
 9e8:	6a ee       	ldi	r22, 0xEA	; 234
 9ea:	73 e0       	ldi	r23, 0x03	; 3
 9ec:	48 ee       	ldi	r20, 0xE8	; 232
 9ee:	53 e0       	ldi	r21, 0x03	; 3
 9f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(lightCheck, 1102, 1000); 
 9f4:	81 e1       	ldi	r24, 0x11	; 17
 9f6:	93 e0       	ldi	r25, 0x03	; 3
 9f8:	6e e4       	ldi	r22, 0x4E	; 78
 9fa:	74 e0       	ldi	r23, 0x04	; 4
 9fc:	48 ee       	ldi	r20, 0xE8	; 232
 9fe:	53 e0       	ldi	r21, 0x03	; 3
 a00:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Add_Task(resetAverageTemperature, 1003, 1000); //reset average temperature
 a04:	85 e4       	ldi	r24, 0x45	; 69
 a06:	91 e0       	ldi	r25, 0x01	; 1
 a08:	6b ee       	ldi	r22, 0xEB	; 235
 a0a:	73 e0       	ldi	r23, 0x03	; 3
 a0c:	48 ee       	ldi	r20, 0xE8	; 232
 a0e:	53 e0       	ldi	r21, 0x03	; 3
 a10:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(resetAverageLight, 1103, 1000); //reset average light
 a14:	8a e4       	ldi	r24, 0x4A	; 74
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	6f e4       	ldi	r22, 0x4F	; 79
 a1a:	74 e0       	ldi	r23, 0x04	; 4
 a1c:	48 ee       	ldi	r20, 0xE8	; 232
 a1e:	53 e0       	ldi	r21, 0x03	; 3
 a20:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	//SCH_Add_Task(transmitDistance, 1000, 50); //Used for debugging
	SCH_Add_Task(checkDistance, 1004, 1); 
 a24:	86 e6       	ldi	r24, 0x66	; 102
 a26:	92 e0       	ldi	r25, 0x02	; 2
 a28:	6c ee       	ldi	r22, 0xEC	; 236
 a2a:	73 e0       	ldi	r23, 0x03	; 3
 a2c:	41 e0       	ldi	r20, 0x01	; 1
 a2e:	50 e0       	ldi	r21, 0x00	; 0
 a30:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 a34:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
	
	while(1)
	{
		SCH_Dispatch_Tasks();
 a38:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 a3c:	fd cf       	rjmp	.-6      	; 0xa38 <main+0xc4>

00000a3e <__subsf3>:
 a3e:	50 58       	subi	r21, 0x80	; 128

00000a40 <__addsf3>:
 a40:	bb 27       	eor	r27, r27
 a42:	aa 27       	eor	r26, r26
 a44:	0e d0       	rcall	.+28     	; 0xa62 <__addsf3x>
 a46:	84 c1       	rjmp	.+776    	; 0xd50 <__fp_round>
 a48:	75 d1       	rcall	.+746    	; 0xd34 <__fp_pscA>
 a4a:	30 f0       	brcs	.+12     	; 0xa58 <__addsf3+0x18>
 a4c:	7a d1       	rcall	.+756    	; 0xd42 <__fp_pscB>
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__addsf3+0x18>
 a50:	31 f4       	brne	.+12     	; 0xa5e <__addsf3+0x1e>
 a52:	9f 3f       	cpi	r25, 0xFF	; 255
 a54:	11 f4       	brne	.+4      	; 0xa5a <__addsf3+0x1a>
 a56:	1e f4       	brtc	.+6      	; 0xa5e <__addsf3+0x1e>
 a58:	6a c1       	rjmp	.+724    	; 0xd2e <__fp_nan>
 a5a:	0e f4       	brtc	.+2      	; 0xa5e <__addsf3+0x1e>
 a5c:	e0 95       	com	r30
 a5e:	e7 fb       	bst	r30, 7
 a60:	37 c1       	rjmp	.+622    	; 0xcd0 <__fp_inf>

00000a62 <__addsf3x>:
 a62:	e9 2f       	mov	r30, r25
 a64:	86 d1       	rcall	.+780    	; 0xd72 <__fp_split3>
 a66:	80 f3       	brcs	.-32     	; 0xa48 <__addsf3+0x8>
 a68:	ba 17       	cp	r27, r26
 a6a:	62 07       	cpc	r22, r18
 a6c:	73 07       	cpc	r23, r19
 a6e:	84 07       	cpc	r24, r20
 a70:	95 07       	cpc	r25, r21
 a72:	18 f0       	brcs	.+6      	; 0xa7a <__addsf3x+0x18>
 a74:	71 f4       	brne	.+28     	; 0xa92 <__addsf3x+0x30>
 a76:	9e f5       	brtc	.+102    	; 0xade <__addsf3x+0x7c>
 a78:	b5 c1       	rjmp	.+874    	; 0xde4 <__fp_zero>
 a7a:	0e f4       	brtc	.+2      	; 0xa7e <__addsf3x+0x1c>
 a7c:	e0 95       	com	r30
 a7e:	0b 2e       	mov	r0, r27
 a80:	ba 2f       	mov	r27, r26
 a82:	a0 2d       	mov	r26, r0
 a84:	0b 01       	movw	r0, r22
 a86:	b9 01       	movw	r22, r18
 a88:	90 01       	movw	r18, r0
 a8a:	0c 01       	movw	r0, r24
 a8c:	ca 01       	movw	r24, r20
 a8e:	a0 01       	movw	r20, r0
 a90:	11 24       	eor	r1, r1
 a92:	ff 27       	eor	r31, r31
 a94:	59 1b       	sub	r21, r25
 a96:	99 f0       	breq	.+38     	; 0xabe <__addsf3x+0x5c>
 a98:	59 3f       	cpi	r21, 0xF9	; 249
 a9a:	50 f4       	brcc	.+20     	; 0xab0 <__addsf3x+0x4e>
 a9c:	50 3e       	cpi	r21, 0xE0	; 224
 a9e:	68 f1       	brcs	.+90     	; 0xafa <__addsf3x+0x98>
 aa0:	1a 16       	cp	r1, r26
 aa2:	f0 40       	sbci	r31, 0x00	; 0
 aa4:	a2 2f       	mov	r26, r18
 aa6:	23 2f       	mov	r18, r19
 aa8:	34 2f       	mov	r19, r20
 aaa:	44 27       	eor	r20, r20
 aac:	58 5f       	subi	r21, 0xF8	; 248
 aae:	f3 cf       	rjmp	.-26     	; 0xa96 <__addsf3x+0x34>
 ab0:	46 95       	lsr	r20
 ab2:	37 95       	ror	r19
 ab4:	27 95       	ror	r18
 ab6:	a7 95       	ror	r26
 ab8:	f0 40       	sbci	r31, 0x00	; 0
 aba:	53 95       	inc	r21
 abc:	c9 f7       	brne	.-14     	; 0xab0 <__addsf3x+0x4e>
 abe:	7e f4       	brtc	.+30     	; 0xade <__addsf3x+0x7c>
 ac0:	1f 16       	cp	r1, r31
 ac2:	ba 0b       	sbc	r27, r26
 ac4:	62 0b       	sbc	r22, r18
 ac6:	73 0b       	sbc	r23, r19
 ac8:	84 0b       	sbc	r24, r20
 aca:	ba f0       	brmi	.+46     	; 0xafa <__addsf3x+0x98>
 acc:	91 50       	subi	r25, 0x01	; 1
 ace:	a1 f0       	breq	.+40     	; 0xaf8 <__addsf3x+0x96>
 ad0:	ff 0f       	add	r31, r31
 ad2:	bb 1f       	adc	r27, r27
 ad4:	66 1f       	adc	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	c2 f7       	brpl	.-16     	; 0xacc <__addsf3x+0x6a>
 adc:	0e c0       	rjmp	.+28     	; 0xafa <__addsf3x+0x98>
 ade:	ba 0f       	add	r27, r26
 ae0:	62 1f       	adc	r22, r18
 ae2:	73 1f       	adc	r23, r19
 ae4:	84 1f       	adc	r24, r20
 ae6:	48 f4       	brcc	.+18     	; 0xafa <__addsf3x+0x98>
 ae8:	87 95       	ror	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b7 95       	ror	r27
 af0:	f7 95       	ror	r31
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__addsf3x+0x96>
 af6:	b3 cf       	rjmp	.-154    	; 0xa5e <__addsf3+0x1e>
 af8:	93 95       	inc	r25
 afa:	88 0f       	add	r24, r24
 afc:	08 f0       	brcs	.+2      	; 0xb00 <__addsf3x+0x9e>
 afe:	99 27       	eor	r25, r25
 b00:	ee 0f       	add	r30, r30
 b02:	97 95       	ror	r25
 b04:	87 95       	ror	r24
 b06:	08 95       	ret

00000b08 <__divsf3>:
 b08:	0c d0       	rcall	.+24     	; 0xb22 <__divsf3x>
 b0a:	22 c1       	rjmp	.+580    	; 0xd50 <__fp_round>
 b0c:	1a d1       	rcall	.+564    	; 0xd42 <__fp_pscB>
 b0e:	40 f0       	brcs	.+16     	; 0xb20 <__divsf3+0x18>
 b10:	11 d1       	rcall	.+546    	; 0xd34 <__fp_pscA>
 b12:	30 f0       	brcs	.+12     	; 0xb20 <__divsf3+0x18>
 b14:	21 f4       	brne	.+8      	; 0xb1e <__divsf3+0x16>
 b16:	5f 3f       	cpi	r21, 0xFF	; 255
 b18:	19 f0       	breq	.+6      	; 0xb20 <__divsf3+0x18>
 b1a:	da c0       	rjmp	.+436    	; 0xcd0 <__fp_inf>
 b1c:	51 11       	cpse	r21, r1
 b1e:	63 c1       	rjmp	.+710    	; 0xde6 <__fp_szero>
 b20:	06 c1       	rjmp	.+524    	; 0xd2e <__fp_nan>

00000b22 <__divsf3x>:
 b22:	27 d1       	rcall	.+590    	; 0xd72 <__fp_split3>
 b24:	98 f3       	brcs	.-26     	; 0xb0c <__divsf3+0x4>

00000b26 <__divsf3_pse>:
 b26:	99 23       	and	r25, r25
 b28:	c9 f3       	breq	.-14     	; 0xb1c <__divsf3+0x14>
 b2a:	55 23       	and	r21, r21
 b2c:	b1 f3       	breq	.-20     	; 0xb1a <__divsf3+0x12>
 b2e:	95 1b       	sub	r25, r21
 b30:	55 0b       	sbc	r21, r21
 b32:	bb 27       	eor	r27, r27
 b34:	aa 27       	eor	r26, r26
 b36:	62 17       	cp	r22, r18
 b38:	73 07       	cpc	r23, r19
 b3a:	84 07       	cpc	r24, r20
 b3c:	38 f0       	brcs	.+14     	; 0xb4c <__divsf3_pse+0x26>
 b3e:	9f 5f       	subi	r25, 0xFF	; 255
 b40:	5f 4f       	sbci	r21, 0xFF	; 255
 b42:	22 0f       	add	r18, r18
 b44:	33 1f       	adc	r19, r19
 b46:	44 1f       	adc	r20, r20
 b48:	aa 1f       	adc	r26, r26
 b4a:	a9 f3       	breq	.-22     	; 0xb36 <__divsf3_pse+0x10>
 b4c:	33 d0       	rcall	.+102    	; 0xbb4 <__divsf3_pse+0x8e>
 b4e:	0e 2e       	mov	r0, r30
 b50:	3a f0       	brmi	.+14     	; 0xb60 <__divsf3_pse+0x3a>
 b52:	e0 e8       	ldi	r30, 0x80	; 128
 b54:	30 d0       	rcall	.+96     	; 0xbb6 <__divsf3_pse+0x90>
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	e6 95       	lsr	r30
 b5c:	00 1c       	adc	r0, r0
 b5e:	ca f7       	brpl	.-14     	; 0xb52 <__divsf3_pse+0x2c>
 b60:	29 d0       	rcall	.+82     	; 0xbb4 <__divsf3_pse+0x8e>
 b62:	fe 2f       	mov	r31, r30
 b64:	27 d0       	rcall	.+78     	; 0xbb4 <__divsf3_pse+0x8e>
 b66:	66 0f       	add	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	bb 1f       	adc	r27, r27
 b6e:	26 17       	cp	r18, r22
 b70:	37 07       	cpc	r19, r23
 b72:	48 07       	cpc	r20, r24
 b74:	ab 07       	cpc	r26, r27
 b76:	b0 e8       	ldi	r27, 0x80	; 128
 b78:	09 f0       	breq	.+2      	; 0xb7c <__divsf3_pse+0x56>
 b7a:	bb 0b       	sbc	r27, r27
 b7c:	80 2d       	mov	r24, r0
 b7e:	bf 01       	movw	r22, r30
 b80:	ff 27       	eor	r31, r31
 b82:	93 58       	subi	r25, 0x83	; 131
 b84:	5f 4f       	sbci	r21, 0xFF	; 255
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__divsf3_pse+0x6c>
 b88:	9e 3f       	cpi	r25, 0xFE	; 254
 b8a:	51 05       	cpc	r21, r1
 b8c:	68 f0       	brcs	.+26     	; 0xba8 <__divsf3_pse+0x82>
 b8e:	a0 c0       	rjmp	.+320    	; 0xcd0 <__fp_inf>
 b90:	2a c1       	rjmp	.+596    	; 0xde6 <__fp_szero>
 b92:	5f 3f       	cpi	r21, 0xFF	; 255
 b94:	ec f3       	brlt	.-6      	; 0xb90 <__divsf3_pse+0x6a>
 b96:	98 3e       	cpi	r25, 0xE8	; 232
 b98:	dc f3       	brlt	.-10     	; 0xb90 <__divsf3_pse+0x6a>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b7 95       	ror	r27
 ba2:	f7 95       	ror	r31
 ba4:	9f 5f       	subi	r25, 0xFF	; 255
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__divsf3_pse+0x74>
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret
 bb4:	e1 e0       	ldi	r30, 0x01	; 1
 bb6:	66 0f       	add	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	bb 1f       	adc	r27, r27
 bbe:	62 17       	cp	r22, r18
 bc0:	73 07       	cpc	r23, r19
 bc2:	84 07       	cpc	r24, r20
 bc4:	ba 07       	cpc	r27, r26
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__divsf3_pse+0xaa>
 bc8:	62 1b       	sub	r22, r18
 bca:	73 0b       	sbc	r23, r19
 bcc:	84 0b       	sbc	r24, r20
 bce:	ba 0b       	sbc	r27, r26
 bd0:	ee 1f       	adc	r30, r30
 bd2:	88 f7       	brcc	.-30     	; 0xbb6 <__divsf3_pse+0x90>
 bd4:	e0 95       	com	r30
 bd6:	08 95       	ret

00000bd8 <__fixunssfsi>:
 bd8:	d4 d0       	rcall	.+424    	; 0xd82 <__fp_splitA>
 bda:	88 f0       	brcs	.+34     	; 0xbfe <__fixunssfsi+0x26>
 bdc:	9f 57       	subi	r25, 0x7F	; 127
 bde:	90 f0       	brcs	.+36     	; 0xc04 <__fixunssfsi+0x2c>
 be0:	b9 2f       	mov	r27, r25
 be2:	99 27       	eor	r25, r25
 be4:	b7 51       	subi	r27, 0x17	; 23
 be6:	a0 f0       	brcs	.+40     	; 0xc10 <__fixunssfsi+0x38>
 be8:	d1 f0       	breq	.+52     	; 0xc1e <__fixunssfsi+0x46>
 bea:	66 0f       	add	r22, r22
 bec:	77 1f       	adc	r23, r23
 bee:	88 1f       	adc	r24, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	1a f0       	brmi	.+6      	; 0xbfa <__fixunssfsi+0x22>
 bf4:	ba 95       	dec	r27
 bf6:	c9 f7       	brne	.-14     	; 0xbea <__fixunssfsi+0x12>
 bf8:	12 c0       	rjmp	.+36     	; 0xc1e <__fixunssfsi+0x46>
 bfa:	b1 30       	cpi	r27, 0x01	; 1
 bfc:	81 f0       	breq	.+32     	; 0xc1e <__fixunssfsi+0x46>
 bfe:	f2 d0       	rcall	.+484    	; 0xde4 <__fp_zero>
 c00:	b1 e0       	ldi	r27, 0x01	; 1
 c02:	08 95       	ret
 c04:	ef c0       	rjmp	.+478    	; 0xde4 <__fp_zero>
 c06:	67 2f       	mov	r22, r23
 c08:	78 2f       	mov	r23, r24
 c0a:	88 27       	eor	r24, r24
 c0c:	b8 5f       	subi	r27, 0xF8	; 248
 c0e:	39 f0       	breq	.+14     	; 0xc1e <__fixunssfsi+0x46>
 c10:	b9 3f       	cpi	r27, 0xF9	; 249
 c12:	cc f3       	brlt	.-14     	; 0xc06 <__fixunssfsi+0x2e>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b3 95       	inc	r27
 c1c:	d9 f7       	brne	.-10     	; 0xc14 <__fixunssfsi+0x3c>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__fixunssfsi+0x56>
 c20:	90 95       	com	r25
 c22:	80 95       	com	r24
 c24:	70 95       	com	r23
 c26:	61 95       	neg	r22
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__floatunsisf>:
 c30:	e8 94       	clt
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <__floatsisf+0x12>

00000c34 <__floatsisf>:
 c34:	97 fb       	bst	r25, 7
 c36:	3e f4       	brtc	.+14     	; 0xc46 <__floatsisf+0x12>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	99 23       	and	r25, r25
 c48:	a9 f0       	breq	.+42     	; 0xc74 <__floatsisf+0x40>
 c4a:	f9 2f       	mov	r31, r25
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	bb 27       	eor	r27, r27
 c50:	93 95       	inc	r25
 c52:	f6 95       	lsr	r31
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f1 11       	cpse	r31, r1
 c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <__floatsisf+0x1c>
 c60:	fa f4       	brpl	.+62     	; 0xca0 <__floatsisf+0x6c>
 c62:	bb 0f       	add	r27, r27
 c64:	11 f4       	brne	.+4      	; 0xc6a <__floatsisf+0x36>
 c66:	60 ff       	sbrs	r22, 0
 c68:	1b c0       	rjmp	.+54     	; 0xca0 <__floatsisf+0x6c>
 c6a:	6f 5f       	subi	r22, 0xFF	; 255
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <__floatsisf+0x6c>
 c74:	88 23       	and	r24, r24
 c76:	11 f0       	breq	.+4      	; 0xc7c <__floatsisf+0x48>
 c78:	96 e9       	ldi	r25, 0x96	; 150
 c7a:	11 c0       	rjmp	.+34     	; 0xc9e <__floatsisf+0x6a>
 c7c:	77 23       	and	r23, r23
 c7e:	21 f0       	breq	.+8      	; 0xc88 <__floatsisf+0x54>
 c80:	9e e8       	ldi	r25, 0x8E	; 142
 c82:	87 2f       	mov	r24, r23
 c84:	76 2f       	mov	r23, r22
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <__floatsisf+0x5e>
 c88:	66 23       	and	r22, r22
 c8a:	71 f0       	breq	.+28     	; 0xca8 <__floatsisf+0x74>
 c8c:	96 e8       	ldi	r25, 0x86	; 134
 c8e:	86 2f       	mov	r24, r22
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	2a f0       	brmi	.+10     	; 0xca0 <__floatsisf+0x6c>
 c96:	9a 95       	dec	r25
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	da f7       	brpl	.-10     	; 0xc96 <__floatsisf+0x62>
 ca0:	88 0f       	add	r24, r24
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <floor>:
 caa:	85 d0       	rcall	.+266    	; 0xdb6 <__fp_trunc>
 cac:	80 f0       	brcs	.+32     	; 0xcce <floor+0x24>
 cae:	9f 37       	cpi	r25, 0x7F	; 127
 cb0:	40 f4       	brcc	.+16     	; 0xcc2 <floor+0x18>
 cb2:	91 11       	cpse	r25, r1
 cb4:	0e f0       	brts	.+2      	; 0xcb8 <floor+0xe>
 cb6:	97 c0       	rjmp	.+302    	; 0xde6 <__fp_szero>
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	80 e8       	ldi	r24, 0x80	; 128
 cbe:	9f eb       	ldi	r25, 0xBF	; 191
 cc0:	08 95       	ret
 cc2:	26 f4       	brtc	.+8      	; 0xccc <floor+0x22>
 cc4:	1b 16       	cp	r1, r27
 cc6:	61 1d       	adc	r22, r1
 cc8:	71 1d       	adc	r23, r1
 cca:	81 1d       	adc	r24, r1
 ccc:	07 c0       	rjmp	.+14     	; 0xcdc <__fp_mintl>
 cce:	21 c0       	rjmp	.+66     	; 0xd12 <__fp_mpack>

00000cd0 <__fp_inf>:
 cd0:	97 f9       	bld	r25, 7
 cd2:	9f 67       	ori	r25, 0x7F	; 127
 cd4:	80 e8       	ldi	r24, 0x80	; 128
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	60 e0       	ldi	r22, 0x00	; 0
 cda:	08 95       	ret

00000cdc <__fp_mintl>:
 cdc:	88 23       	and	r24, r24
 cde:	71 f4       	brne	.+28     	; 0xcfc <__fp_mintl+0x20>
 ce0:	77 23       	and	r23, r23
 ce2:	21 f0       	breq	.+8      	; 0xcec <__fp_mintl+0x10>
 ce4:	98 50       	subi	r25, 0x08	; 8
 ce6:	87 2b       	or	r24, r23
 ce8:	76 2f       	mov	r23, r22
 cea:	07 c0       	rjmp	.+14     	; 0xcfa <__fp_mintl+0x1e>
 cec:	66 23       	and	r22, r22
 cee:	11 f4       	brne	.+4      	; 0xcf4 <__fp_mintl+0x18>
 cf0:	99 27       	eor	r25, r25
 cf2:	0d c0       	rjmp	.+26     	; 0xd0e <__fp_mintl+0x32>
 cf4:	90 51       	subi	r25, 0x10	; 16
 cf6:	86 2b       	or	r24, r22
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	2a f0       	brmi	.+10     	; 0xd08 <__fp_mintl+0x2c>
 cfe:	9a 95       	dec	r25
 d00:	66 0f       	add	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	da f7       	brpl	.-10     	; 0xcfe <__fp_mintl+0x22>
 d08:	88 0f       	add	r24, r24
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__fp_mpack>:
 d12:	9f 3f       	cpi	r25, 0xFF	; 255
 d14:	31 f0       	breq	.+12     	; 0xd22 <__fp_mpack_finite+0xc>

00000d16 <__fp_mpack_finite>:
 d16:	91 50       	subi	r25, 0x01	; 1
 d18:	20 f4       	brcc	.+8      	; 0xd22 <__fp_mpack_finite+0xc>
 d1a:	87 95       	ror	r24
 d1c:	77 95       	ror	r23
 d1e:	67 95       	ror	r22
 d20:	b7 95       	ror	r27
 d22:	88 0f       	add	r24, r24
 d24:	91 1d       	adc	r25, r1
 d26:	96 95       	lsr	r25
 d28:	87 95       	ror	r24
 d2a:	97 f9       	bld	r25, 7
 d2c:	08 95       	ret

00000d2e <__fp_nan>:
 d2e:	9f ef       	ldi	r25, 0xFF	; 255
 d30:	80 ec       	ldi	r24, 0xC0	; 192
 d32:	08 95       	ret

00000d34 <__fp_pscA>:
 d34:	00 24       	eor	r0, r0
 d36:	0a 94       	dec	r0
 d38:	16 16       	cp	r1, r22
 d3a:	17 06       	cpc	r1, r23
 d3c:	18 06       	cpc	r1, r24
 d3e:	09 06       	cpc	r0, r25
 d40:	08 95       	ret

00000d42 <__fp_pscB>:
 d42:	00 24       	eor	r0, r0
 d44:	0a 94       	dec	r0
 d46:	12 16       	cp	r1, r18
 d48:	13 06       	cpc	r1, r19
 d4a:	14 06       	cpc	r1, r20
 d4c:	05 06       	cpc	r0, r21
 d4e:	08 95       	ret

00000d50 <__fp_round>:
 d50:	09 2e       	mov	r0, r25
 d52:	03 94       	inc	r0
 d54:	00 0c       	add	r0, r0
 d56:	11 f4       	brne	.+4      	; 0xd5c <__fp_round+0xc>
 d58:	88 23       	and	r24, r24
 d5a:	52 f0       	brmi	.+20     	; 0xd70 <__fp_round+0x20>
 d5c:	bb 0f       	add	r27, r27
 d5e:	40 f4       	brcc	.+16     	; 0xd70 <__fp_round+0x20>
 d60:	bf 2b       	or	r27, r31
 d62:	11 f4       	brne	.+4      	; 0xd68 <__fp_round+0x18>
 d64:	60 ff       	sbrs	r22, 0
 d66:	04 c0       	rjmp	.+8      	; 0xd70 <__fp_round+0x20>
 d68:	6f 5f       	subi	r22, 0xFF	; 255
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	8f 4f       	sbci	r24, 0xFF	; 255
 d6e:	9f 4f       	sbci	r25, 0xFF	; 255
 d70:	08 95       	ret

00000d72 <__fp_split3>:
 d72:	57 fd       	sbrc	r21, 7
 d74:	90 58       	subi	r25, 0x80	; 128
 d76:	44 0f       	add	r20, r20
 d78:	55 1f       	adc	r21, r21
 d7a:	59 f0       	breq	.+22     	; 0xd92 <__fp_splitA+0x10>
 d7c:	5f 3f       	cpi	r21, 0xFF	; 255
 d7e:	71 f0       	breq	.+28     	; 0xd9c <__fp_splitA+0x1a>
 d80:	47 95       	ror	r20

00000d82 <__fp_splitA>:
 d82:	88 0f       	add	r24, r24
 d84:	97 fb       	bst	r25, 7
 d86:	99 1f       	adc	r25, r25
 d88:	61 f0       	breq	.+24     	; 0xda2 <__fp_splitA+0x20>
 d8a:	9f 3f       	cpi	r25, 0xFF	; 255
 d8c:	79 f0       	breq	.+30     	; 0xdac <__fp_splitA+0x2a>
 d8e:	87 95       	ror	r24
 d90:	08 95       	ret
 d92:	12 16       	cp	r1, r18
 d94:	13 06       	cpc	r1, r19
 d96:	14 06       	cpc	r1, r20
 d98:	55 1f       	adc	r21, r21
 d9a:	f2 cf       	rjmp	.-28     	; 0xd80 <__fp_split3+0xe>
 d9c:	46 95       	lsr	r20
 d9e:	f1 df       	rcall	.-30     	; 0xd82 <__fp_splitA>
 da0:	08 c0       	rjmp	.+16     	; 0xdb2 <__fp_splitA+0x30>
 da2:	16 16       	cp	r1, r22
 da4:	17 06       	cpc	r1, r23
 da6:	18 06       	cpc	r1, r24
 da8:	99 1f       	adc	r25, r25
 daa:	f1 cf       	rjmp	.-30     	; 0xd8e <__fp_splitA+0xc>
 dac:	86 95       	lsr	r24
 dae:	71 05       	cpc	r23, r1
 db0:	61 05       	cpc	r22, r1
 db2:	08 94       	sec
 db4:	08 95       	ret

00000db6 <__fp_trunc>:
 db6:	e5 df       	rcall	.-54     	; 0xd82 <__fp_splitA>
 db8:	a0 f0       	brcs	.+40     	; 0xde2 <__fp_trunc+0x2c>
 dba:	be e7       	ldi	r27, 0x7E	; 126
 dbc:	b9 17       	cp	r27, r25
 dbe:	88 f4       	brcc	.+34     	; 0xde2 <__fp_trunc+0x2c>
 dc0:	bb 27       	eor	r27, r27
 dc2:	9f 38       	cpi	r25, 0x8F	; 143
 dc4:	60 f4       	brcc	.+24     	; 0xdde <__fp_trunc+0x28>
 dc6:	16 16       	cp	r1, r22
 dc8:	b1 1d       	adc	r27, r1
 dca:	67 2f       	mov	r22, r23
 dcc:	78 2f       	mov	r23, r24
 dce:	88 27       	eor	r24, r24
 dd0:	98 5f       	subi	r25, 0xF8	; 248
 dd2:	f7 cf       	rjmp	.-18     	; 0xdc2 <__fp_trunc+0xc>
 dd4:	86 95       	lsr	r24
 dd6:	77 95       	ror	r23
 dd8:	67 95       	ror	r22
 dda:	b1 1d       	adc	r27, r1
 ddc:	93 95       	inc	r25
 dde:	96 39       	cpi	r25, 0x96	; 150
 de0:	c8 f3       	brcs	.-14     	; 0xdd4 <__fp_trunc+0x1e>
 de2:	08 95       	ret

00000de4 <__fp_zero>:
 de4:	e8 94       	clt

00000de6 <__fp_szero>:
 de6:	bb 27       	eor	r27, r27
 de8:	66 27       	eor	r22, r22
 dea:	77 27       	eor	r23, r23
 dec:	cb 01       	movw	r24, r22
 dee:	97 f9       	bld	r25, 7
 df0:	08 95       	ret

00000df2 <__mulsf3>:
 df2:	0b d0       	rcall	.+22     	; 0xe0a <__mulsf3x>
 df4:	ad cf       	rjmp	.-166    	; 0xd50 <__fp_round>
 df6:	9e df       	rcall	.-196    	; 0xd34 <__fp_pscA>
 df8:	28 f0       	brcs	.+10     	; 0xe04 <__mulsf3+0x12>
 dfa:	a3 df       	rcall	.-186    	; 0xd42 <__fp_pscB>
 dfc:	18 f0       	brcs	.+6      	; 0xe04 <__mulsf3+0x12>
 dfe:	95 23       	and	r25, r21
 e00:	09 f0       	breq	.+2      	; 0xe04 <__mulsf3+0x12>
 e02:	66 cf       	rjmp	.-308    	; 0xcd0 <__fp_inf>
 e04:	94 cf       	rjmp	.-216    	; 0xd2e <__fp_nan>
 e06:	11 24       	eor	r1, r1
 e08:	ee cf       	rjmp	.-36     	; 0xde6 <__fp_szero>

00000e0a <__mulsf3x>:
 e0a:	b3 df       	rcall	.-154    	; 0xd72 <__fp_split3>
 e0c:	a0 f3       	brcs	.-24     	; 0xdf6 <__mulsf3+0x4>

00000e0e <__mulsf3_pse>:
 e0e:	95 9f       	mul	r25, r21
 e10:	d1 f3       	breq	.-12     	; 0xe06 <__mulsf3+0x14>
 e12:	95 0f       	add	r25, r21
 e14:	50 e0       	ldi	r21, 0x00	; 0
 e16:	55 1f       	adc	r21, r21
 e18:	62 9f       	mul	r22, r18
 e1a:	f0 01       	movw	r30, r0
 e1c:	72 9f       	mul	r23, r18
 e1e:	bb 27       	eor	r27, r27
 e20:	f0 0d       	add	r31, r0
 e22:	b1 1d       	adc	r27, r1
 e24:	63 9f       	mul	r22, r19
 e26:	aa 27       	eor	r26, r26
 e28:	f0 0d       	add	r31, r0
 e2a:	b1 1d       	adc	r27, r1
 e2c:	aa 1f       	adc	r26, r26
 e2e:	64 9f       	mul	r22, r20
 e30:	66 27       	eor	r22, r22
 e32:	b0 0d       	add	r27, r0
 e34:	a1 1d       	adc	r26, r1
 e36:	66 1f       	adc	r22, r22
 e38:	82 9f       	mul	r24, r18
 e3a:	22 27       	eor	r18, r18
 e3c:	b0 0d       	add	r27, r0
 e3e:	a1 1d       	adc	r26, r1
 e40:	62 1f       	adc	r22, r18
 e42:	73 9f       	mul	r23, r19
 e44:	b0 0d       	add	r27, r0
 e46:	a1 1d       	adc	r26, r1
 e48:	62 1f       	adc	r22, r18
 e4a:	83 9f       	mul	r24, r19
 e4c:	a0 0d       	add	r26, r0
 e4e:	61 1d       	adc	r22, r1
 e50:	22 1f       	adc	r18, r18
 e52:	74 9f       	mul	r23, r20
 e54:	33 27       	eor	r19, r19
 e56:	a0 0d       	add	r26, r0
 e58:	61 1d       	adc	r22, r1
 e5a:	23 1f       	adc	r18, r19
 e5c:	84 9f       	mul	r24, r20
 e5e:	60 0d       	add	r22, r0
 e60:	21 1d       	adc	r18, r1
 e62:	82 2f       	mov	r24, r18
 e64:	76 2f       	mov	r23, r22
 e66:	6a 2f       	mov	r22, r26
 e68:	11 24       	eor	r1, r1
 e6a:	9f 57       	subi	r25, 0x7F	; 127
 e6c:	50 40       	sbci	r21, 0x00	; 0
 e6e:	8a f0       	brmi	.+34     	; 0xe92 <__mulsf3_pse+0x84>
 e70:	e1 f0       	breq	.+56     	; 0xeaa <__mulsf3_pse+0x9c>
 e72:	88 23       	and	r24, r24
 e74:	4a f0       	brmi	.+18     	; 0xe88 <__mulsf3_pse+0x7a>
 e76:	ee 0f       	add	r30, r30
 e78:	ff 1f       	adc	r31, r31
 e7a:	bb 1f       	adc	r27, r27
 e7c:	66 1f       	adc	r22, r22
 e7e:	77 1f       	adc	r23, r23
 e80:	88 1f       	adc	r24, r24
 e82:	91 50       	subi	r25, 0x01	; 1
 e84:	50 40       	sbci	r21, 0x00	; 0
 e86:	a9 f7       	brne	.-22     	; 0xe72 <__mulsf3_pse+0x64>
 e88:	9e 3f       	cpi	r25, 0xFE	; 254
 e8a:	51 05       	cpc	r21, r1
 e8c:	70 f0       	brcs	.+28     	; 0xeaa <__mulsf3_pse+0x9c>
 e8e:	20 cf       	rjmp	.-448    	; 0xcd0 <__fp_inf>
 e90:	aa cf       	rjmp	.-172    	; 0xde6 <__fp_szero>
 e92:	5f 3f       	cpi	r21, 0xFF	; 255
 e94:	ec f3       	brlt	.-6      	; 0xe90 <__mulsf3_pse+0x82>
 e96:	98 3e       	cpi	r25, 0xE8	; 232
 e98:	dc f3       	brlt	.-10     	; 0xe90 <__mulsf3_pse+0x82>
 e9a:	86 95       	lsr	r24
 e9c:	77 95       	ror	r23
 e9e:	67 95       	ror	r22
 ea0:	b7 95       	ror	r27
 ea2:	f7 95       	ror	r31
 ea4:	e7 95       	ror	r30
 ea6:	9f 5f       	subi	r25, 0xFF	; 255
 ea8:	c1 f7       	brne	.-16     	; 0xe9a <__mulsf3_pse+0x8c>
 eaa:	fe 2b       	or	r31, r30
 eac:	88 0f       	add	r24, r24
 eae:	91 1d       	adc	r25, r1
 eb0:	96 95       	lsr	r25
 eb2:	87 95       	ror	r24
 eb4:	97 f9       	bld	r25, 7
 eb6:	08 95       	ret

00000eb8 <__udivmodhi4>:
 eb8:	aa 1b       	sub	r26, r26
 eba:	bb 1b       	sub	r27, r27
 ebc:	51 e1       	ldi	r21, 0x11	; 17
 ebe:	07 c0       	rjmp	.+14     	; 0xece <__udivmodhi4_ep>

00000ec0 <__udivmodhi4_loop>:
 ec0:	aa 1f       	adc	r26, r26
 ec2:	bb 1f       	adc	r27, r27
 ec4:	a6 17       	cp	r26, r22
 ec6:	b7 07       	cpc	r27, r23
 ec8:	10 f0       	brcs	.+4      	; 0xece <__udivmodhi4_ep>
 eca:	a6 1b       	sub	r26, r22
 ecc:	b7 0b       	sbc	r27, r23

00000ece <__udivmodhi4_ep>:
 ece:	88 1f       	adc	r24, r24
 ed0:	99 1f       	adc	r25, r25
 ed2:	5a 95       	dec	r21
 ed4:	a9 f7       	brne	.-22     	; 0xec0 <__udivmodhi4_loop>
 ed6:	80 95       	com	r24
 ed8:	90 95       	com	r25
 eda:	bc 01       	movw	r22, r24
 edc:	cd 01       	movw	r24, r26
 ede:	08 95       	ret

00000ee0 <__divmodhi4>:
 ee0:	97 fb       	bst	r25, 7
 ee2:	09 2e       	mov	r0, r25
 ee4:	07 26       	eor	r0, r23
 ee6:	0a d0       	rcall	.+20     	; 0xefc <__divmodhi4_neg1>
 ee8:	77 fd       	sbrc	r23, 7
 eea:	04 d0       	rcall	.+8      	; 0xef4 <__divmodhi4_neg2>
 eec:	e5 df       	rcall	.-54     	; 0xeb8 <__udivmodhi4>
 eee:	06 d0       	rcall	.+12     	; 0xefc <__divmodhi4_neg1>
 ef0:	00 20       	and	r0, r0
 ef2:	1a f4       	brpl	.+6      	; 0xefa <__divmodhi4_exit>

00000ef4 <__divmodhi4_neg2>:
 ef4:	70 95       	com	r23
 ef6:	61 95       	neg	r22
 ef8:	7f 4f       	sbci	r23, 0xFF	; 255

00000efa <__divmodhi4_exit>:
 efa:	08 95       	ret

00000efc <__divmodhi4_neg1>:
 efc:	f6 f7       	brtc	.-4      	; 0xefa <__divmodhi4_exit>
 efe:	90 95       	com	r25
 f00:	81 95       	neg	r24
 f02:	9f 4f       	sbci	r25, 0xFF	; 255
 f04:	08 95       	ret

00000f06 <_exit>:
 f06:	f8 94       	cli

00000f08 <__stop_program>:
 f08:	ff cf       	rjmp	.-2      	; 0xf08 <__stop_program>
